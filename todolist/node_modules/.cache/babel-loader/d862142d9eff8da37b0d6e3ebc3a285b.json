{"ast":null,"code":"import { getApp, _getProvider, _registerComponent, registerVersion } from '@firebase/app';\nimport { Component } from '@firebase/component';\nimport { ErrorFactory, FirebaseError } from '@firebase/util';\nimport { openDB } from 'idb';\nconst name = \"@firebase/installations\";\nconst version = \"0.5.9\";\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nconst PENDING_TIMEOUT_MS = 10000;\nconst PACKAGE_VERSION = `w:${version}`;\nconst INTERNAL_AUTH_VERSION = 'FIS_v2';\nconst INSTALLATIONS_API_URL = 'https://firebaseinstallations.googleapis.com/v1';\nconst TOKEN_EXPIRATION_BUFFER = 60 * 60 * 1000; // One hour\n\nconst SERVICE = 'installations';\nconst SERVICE_NAME = 'Installations';\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nconst ERROR_DESCRIPTION_MAP = {\n  [\"missing-app-config-values\"\n  /* MISSING_APP_CONFIG_VALUES */\n  ]: 'Missing App configuration value: \"{$valueName}\"',\n  [\"not-registered\"\n  /* NOT_REGISTERED */\n  ]: 'Firebase Installation is not registered.',\n  [\"installation-not-found\"\n  /* INSTALLATION_NOT_FOUND */\n  ]: 'Firebase Installation not found.',\n  [\"request-failed\"\n  /* REQUEST_FAILED */\n  ]: '{$requestName} request failed with error \"{$serverCode} {$serverStatus}: {$serverMessage}\"',\n  [\"app-offline\"\n  /* APP_OFFLINE */\n  ]: 'Could not process request. Application offline.',\n  [\"delete-pending-registration\"\n  /* DELETE_PENDING_REGISTRATION */\n  ]: \"Can't delete installation while there is a pending registration request.\"\n};\nconst ERROR_FACTORY = new ErrorFactory(SERVICE, SERVICE_NAME, ERROR_DESCRIPTION_MAP);\n/** Returns true if error is a FirebaseError that is based on an error from the server. */\n\nfunction isServerError(error) {\n  return error instanceof FirebaseError && error.code.includes(\"request-failed\"\n  /* REQUEST_FAILED */\n  );\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nfunction getInstallationsEndpoint(_ref) {\n  let {\n    projectId\n  } = _ref;\n  return `${INSTALLATIONS_API_URL}/projects/${projectId}/installations`;\n}\n\nfunction extractAuthTokenInfoFromResponse(response) {\n  return {\n    token: response.token,\n    requestStatus: 2\n    /* COMPLETED */\n    ,\n    expiresIn: getExpiresInFromResponseExpiresIn(response.expiresIn),\n    creationTime: Date.now()\n  };\n}\n\nasync function getErrorFromResponse(requestName, response) {\n  const responseJson = await response.json();\n  const errorData = responseJson.error;\n  return ERROR_FACTORY.create(\"request-failed\"\n  /* REQUEST_FAILED */\n  , {\n    requestName,\n    serverCode: errorData.code,\n    serverMessage: errorData.message,\n    serverStatus: errorData.status\n  });\n}\n\nfunction getHeaders(_ref2) {\n  let {\n    apiKey\n  } = _ref2;\n  return new Headers({\n    'Content-Type': 'application/json',\n    Accept: 'application/json',\n    'x-goog-api-key': apiKey\n  });\n}\n\nfunction getHeadersWithAuth(appConfig, _ref3) {\n  let {\n    refreshToken\n  } = _ref3;\n  const headers = getHeaders(appConfig);\n  headers.append('Authorization', getAuthorizationHeader(refreshToken));\n  return headers;\n}\n/**\r\n * Calls the passed in fetch wrapper and returns the response.\r\n * If the returned response has a status of 5xx, re-runs the function once and\r\n * returns the response.\r\n */\n\n\nasync function retryIfServerError(fn) {\n  const result = await fn();\n\n  if (result.status >= 500 && result.status < 600) {\n    // Internal Server Error. Retry request.\n    return fn();\n  }\n\n  return result;\n}\n\nfunction getExpiresInFromResponseExpiresIn(responseExpiresIn) {\n  // This works because the server will never respond with fractions of a second.\n  return Number(responseExpiresIn.replace('s', '000'));\n}\n\nfunction getAuthorizationHeader(refreshToken) {\n  return `${INTERNAL_AUTH_VERSION} ${refreshToken}`;\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nasync function createInstallationRequest(_ref4, _ref5) {\n  let {\n    appConfig,\n    heartbeatServiceProvider\n  } = _ref4;\n  let {\n    fid\n  } = _ref5;\n  const endpoint = getInstallationsEndpoint(appConfig);\n  const headers = getHeaders(appConfig); // If heartbeat service exists, add the heartbeat string to the header.\n\n  const heartbeatService = heartbeatServiceProvider.getImmediate({\n    optional: true\n  });\n\n  if (heartbeatService) {\n    const heartbeatsHeader = await heartbeatService.getHeartbeatsHeader();\n\n    if (heartbeatsHeader) {\n      headers.append('x-firebase-client', heartbeatsHeader);\n    }\n  }\n\n  const body = {\n    fid,\n    authVersion: INTERNAL_AUTH_VERSION,\n    appId: appConfig.appId,\n    sdkVersion: PACKAGE_VERSION\n  };\n  const request = {\n    method: 'POST',\n    headers,\n    body: JSON.stringify(body)\n  };\n  const response = await retryIfServerError(() => fetch(endpoint, request));\n\n  if (response.ok) {\n    const responseValue = await response.json();\n    const registeredInstallationEntry = {\n      fid: responseValue.fid || fid,\n      registrationStatus: 2\n      /* COMPLETED */\n      ,\n      refreshToken: responseValue.refreshToken,\n      authToken: extractAuthTokenInfoFromResponse(responseValue.authToken)\n    };\n    return registeredInstallationEntry;\n  } else {\n    throw await getErrorFromResponse('Create Installation', response);\n  }\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/** Returns a promise that resolves after given time passes. */\n\n\nfunction sleep(ms) {\n  return new Promise(resolve => {\n    setTimeout(resolve, ms);\n  });\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nfunction bufferToBase64UrlSafe(array) {\n  const b64 = btoa(String.fromCharCode(...array));\n  return b64.replace(/\\+/g, '-').replace(/\\//g, '_');\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nconst VALID_FID_PATTERN = /^[cdef][\\w-]{21}$/;\nconst INVALID_FID = '';\n/**\r\n * Generates a new FID using random values from Web Crypto API.\r\n * Returns an empty string if FID generation fails for any reason.\r\n */\n\nfunction generateFid() {\n  try {\n    // A valid FID has exactly 22 base64 characters, which is 132 bits, or 16.5\n    // bytes. our implementation generates a 17 byte array instead.\n    const fidByteArray = new Uint8Array(17);\n    const crypto = self.crypto || self.msCrypto;\n    crypto.getRandomValues(fidByteArray); // Replace the first 4 random bits with the constant FID header of 0b0111.\n\n    fidByteArray[0] = 0b01110000 + fidByteArray[0] % 0b00010000;\n    const fid = encode(fidByteArray);\n    return VALID_FID_PATTERN.test(fid) ? fid : INVALID_FID;\n  } catch (_a) {\n    // FID generation errored\n    return INVALID_FID;\n  }\n}\n/** Converts a FID Uint8Array to a base64 string representation. */\n\n\nfunction encode(fidByteArray) {\n  const b64String = bufferToBase64UrlSafe(fidByteArray); // Remove the 23rd character that was added because of the extra 4 bits at the\n  // end of our 17 byte array, and the '=' padding.\n\n  return b64String.substr(0, 22);\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/** Returns a string key that can be used to identify the app. */\n\n\nfunction getKey(appConfig) {\n  return `${appConfig.appName}!${appConfig.appId}`;\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nconst fidChangeCallbacks = new Map();\n/**\r\n * Calls the onIdChange callbacks with the new FID value, and broadcasts the\r\n * change to other tabs.\r\n */\n\nfunction fidChanged(appConfig, fid) {\n  const key = getKey(appConfig);\n  callFidChangeCallbacks(key, fid);\n  broadcastFidChange(key, fid);\n}\n\nfunction addCallback(appConfig, callback) {\n  // Open the broadcast channel if it's not already open,\n  // to be able to listen to change events from other tabs.\n  getBroadcastChannel();\n  const key = getKey(appConfig);\n  let callbackSet = fidChangeCallbacks.get(key);\n\n  if (!callbackSet) {\n    callbackSet = new Set();\n    fidChangeCallbacks.set(key, callbackSet);\n  }\n\n  callbackSet.add(callback);\n}\n\nfunction removeCallback(appConfig, callback) {\n  const key = getKey(appConfig);\n  const callbackSet = fidChangeCallbacks.get(key);\n\n  if (!callbackSet) {\n    return;\n  }\n\n  callbackSet.delete(callback);\n\n  if (callbackSet.size === 0) {\n    fidChangeCallbacks.delete(key);\n  } // Close broadcast channel if there are no more callbacks.\n\n\n  closeBroadcastChannel();\n}\n\nfunction callFidChangeCallbacks(key, fid) {\n  const callbacks = fidChangeCallbacks.get(key);\n\n  if (!callbacks) {\n    return;\n  }\n\n  for (const callback of callbacks) {\n    callback(fid);\n  }\n}\n\nfunction broadcastFidChange(key, fid) {\n  const channel = getBroadcastChannel();\n\n  if (channel) {\n    channel.postMessage({\n      key,\n      fid\n    });\n  }\n\n  closeBroadcastChannel();\n}\n\nlet broadcastChannel = null;\n/** Opens and returns a BroadcastChannel if it is supported by the browser. */\n\nfunction getBroadcastChannel() {\n  if (!broadcastChannel && 'BroadcastChannel' in self) {\n    broadcastChannel = new BroadcastChannel('[Firebase] FID Change');\n\n    broadcastChannel.onmessage = e => {\n      callFidChangeCallbacks(e.data.key, e.data.fid);\n    };\n  }\n\n  return broadcastChannel;\n}\n\nfunction closeBroadcastChannel() {\n  if (fidChangeCallbacks.size === 0 && broadcastChannel) {\n    broadcastChannel.close();\n    broadcastChannel = null;\n  }\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nconst DATABASE_NAME = 'firebase-installations-database';\nconst DATABASE_VERSION = 1;\nconst OBJECT_STORE_NAME = 'firebase-installations-store';\nlet dbPromise = null;\n\nfunction getDbPromise() {\n  if (!dbPromise) {\n    dbPromise = openDB(DATABASE_NAME, DATABASE_VERSION, {\n      upgrade: (db, oldVersion) => {\n        // We don't use 'break' in this switch statement, the fall-through\n        // behavior is what we want, because if there are multiple versions between\n        // the old version and the current version, we want ALL the migrations\n        // that correspond to those versions to run, not only the last one.\n        // eslint-disable-next-line default-case\n        switch (oldVersion) {\n          case 0:\n            db.createObjectStore(OBJECT_STORE_NAME);\n        }\n      }\n    });\n  }\n\n  return dbPromise;\n}\n/** Assigns or overwrites the record for the given key with the given value. */\n\n\nasync function set(appConfig, value) {\n  const key = getKey(appConfig);\n  const db = await getDbPromise();\n  const tx = db.transaction(OBJECT_STORE_NAME, 'readwrite');\n  const objectStore = tx.objectStore(OBJECT_STORE_NAME);\n  const oldValue = await objectStore.get(key);\n  await objectStore.put(value, key);\n  await tx.done;\n\n  if (!oldValue || oldValue.fid !== value.fid) {\n    fidChanged(appConfig, value.fid);\n  }\n\n  return value;\n}\n/** Removes record(s) from the objectStore that match the given key. */\n\n\nasync function remove(appConfig) {\n  const key = getKey(appConfig);\n  const db = await getDbPromise();\n  const tx = db.transaction(OBJECT_STORE_NAME, 'readwrite');\n  await tx.objectStore(OBJECT_STORE_NAME).delete(key);\n  await tx.done;\n}\n/**\r\n * Atomically updates a record with the result of updateFn, which gets\r\n * called with the current value. If newValue is undefined, the record is\r\n * deleted instead.\r\n * @return Updated value\r\n */\n\n\nasync function update(appConfig, updateFn) {\n  const key = getKey(appConfig);\n  const db = await getDbPromise();\n  const tx = db.transaction(OBJECT_STORE_NAME, 'readwrite');\n  const store = tx.objectStore(OBJECT_STORE_NAME);\n  const oldValue = await store.get(key);\n  const newValue = updateFn(oldValue);\n\n  if (newValue === undefined) {\n    await store.delete(key);\n  } else {\n    await store.put(newValue, key);\n  }\n\n  await tx.done;\n\n  if (newValue && (!oldValue || oldValue.fid !== newValue.fid)) {\n    fidChanged(appConfig, newValue.fid);\n  }\n\n  return newValue;\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Updates and returns the InstallationEntry from the database.\r\n * Also triggers a registration request if it is necessary and possible.\r\n */\n\n\nasync function getInstallationEntry(installations) {\n  let registrationPromise;\n  const installationEntry = await update(installations.appConfig, oldEntry => {\n    const installationEntry = updateOrCreateInstallationEntry(oldEntry);\n    const entryWithPromise = triggerRegistrationIfNecessary(installations, installationEntry);\n    registrationPromise = entryWithPromise.registrationPromise;\n    return entryWithPromise.installationEntry;\n  });\n\n  if (installationEntry.fid === INVALID_FID) {\n    // FID generation failed. Waiting for the FID from the server.\n    return {\n      installationEntry: await registrationPromise\n    };\n  }\n\n  return {\n    installationEntry,\n    registrationPromise\n  };\n}\n/**\r\n * Creates a new Installation Entry if one does not exist.\r\n * Also clears timed out pending requests.\r\n */\n\n\nfunction updateOrCreateInstallationEntry(oldEntry) {\n  const entry = oldEntry || {\n    fid: generateFid(),\n    registrationStatus: 0\n    /* NOT_STARTED */\n\n  };\n  return clearTimedOutRequest(entry);\n}\n/**\r\n * If the Firebase Installation is not registered yet, this will trigger the\r\n * registration and return an InProgressInstallationEntry.\r\n *\r\n * If registrationPromise does not exist, the installationEntry is guaranteed\r\n * to be registered.\r\n */\n\n\nfunction triggerRegistrationIfNecessary(installations, installationEntry) {\n  if (installationEntry.registrationStatus === 0\n  /* NOT_STARTED */\n  ) {\n    if (!navigator.onLine) {\n      // Registration required but app is offline.\n      const registrationPromiseWithError = Promise.reject(ERROR_FACTORY.create(\"app-offline\"\n      /* APP_OFFLINE */\n      ));\n      return {\n        installationEntry,\n        registrationPromise: registrationPromiseWithError\n      };\n    } // Try registering. Change status to IN_PROGRESS.\n\n\n    const inProgressEntry = {\n      fid: installationEntry.fid,\n      registrationStatus: 1\n      /* IN_PROGRESS */\n      ,\n      registrationTime: Date.now()\n    };\n    const registrationPromise = registerInstallation(installations, inProgressEntry);\n    return {\n      installationEntry: inProgressEntry,\n      registrationPromise\n    };\n  } else if (installationEntry.registrationStatus === 1\n  /* IN_PROGRESS */\n  ) {\n    return {\n      installationEntry,\n      registrationPromise: waitUntilFidRegistration(installations)\n    };\n  } else {\n    return {\n      installationEntry\n    };\n  }\n}\n/** This will be executed only once for each new Firebase Installation. */\n\n\nasync function registerInstallation(installations, installationEntry) {\n  try {\n    const registeredInstallationEntry = await createInstallationRequest(installations, installationEntry);\n    return set(installations.appConfig, registeredInstallationEntry);\n  } catch (e) {\n    if (isServerError(e) && e.customData.serverCode === 409) {\n      // Server returned a \"FID can not be used\" error.\n      // Generate a new ID next time.\n      await remove(installations.appConfig);\n    } else {\n      // Registration failed. Set FID as not registered.\n      await set(installations.appConfig, {\n        fid: installationEntry.fid,\n        registrationStatus: 0\n        /* NOT_STARTED */\n\n      });\n    }\n\n    throw e;\n  }\n}\n/** Call if FID registration is pending in another request. */\n\n\nasync function waitUntilFidRegistration(installations) {\n  // Unfortunately, there is no way of reliably observing when a value in\n  // IndexedDB changes (yet, see https://github.com/WICG/indexed-db-observers),\n  // so we need to poll.\n  let entry = await updateInstallationRequest(installations.appConfig);\n\n  while (entry.registrationStatus === 1\n  /* IN_PROGRESS */\n  ) {\n    // createInstallation request still in progress.\n    await sleep(100);\n    entry = await updateInstallationRequest(installations.appConfig);\n  }\n\n  if (entry.registrationStatus === 0\n  /* NOT_STARTED */\n  ) {\n    // The request timed out or failed in a different call. Try again.\n    const {\n      installationEntry,\n      registrationPromise\n    } = await getInstallationEntry(installations);\n\n    if (registrationPromise) {\n      return registrationPromise;\n    } else {\n      // if there is no registrationPromise, entry is registered.\n      return installationEntry;\n    }\n  }\n\n  return entry;\n}\n/**\r\n * Called only if there is a CreateInstallation request in progress.\r\n *\r\n * Updates the InstallationEntry in the DB based on the status of the\r\n * CreateInstallation request.\r\n *\r\n * Returns the updated InstallationEntry.\r\n */\n\n\nfunction updateInstallationRequest(appConfig) {\n  return update(appConfig, oldEntry => {\n    if (!oldEntry) {\n      throw ERROR_FACTORY.create(\"installation-not-found\"\n      /* INSTALLATION_NOT_FOUND */\n      );\n    }\n\n    return clearTimedOutRequest(oldEntry);\n  });\n}\n\nfunction clearTimedOutRequest(entry) {\n  if (hasInstallationRequestTimedOut(entry)) {\n    return {\n      fid: entry.fid,\n      registrationStatus: 0\n      /* NOT_STARTED */\n\n    };\n  }\n\n  return entry;\n}\n\nfunction hasInstallationRequestTimedOut(installationEntry) {\n  return installationEntry.registrationStatus === 1\n  /* IN_PROGRESS */\n  && installationEntry.registrationTime + PENDING_TIMEOUT_MS < Date.now();\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nasync function generateAuthTokenRequest(_ref6, installationEntry) {\n  let {\n    appConfig,\n    heartbeatServiceProvider\n  } = _ref6;\n  const endpoint = getGenerateAuthTokenEndpoint(appConfig, installationEntry);\n  const headers = getHeadersWithAuth(appConfig, installationEntry); // If heartbeat service exists, add the heartbeat string to the header.\n\n  const heartbeatService = heartbeatServiceProvider.getImmediate({\n    optional: true\n  });\n\n  if (heartbeatService) {\n    const heartbeatsHeader = await heartbeatService.getHeartbeatsHeader();\n\n    if (heartbeatsHeader) {\n      headers.append('x-firebase-client', heartbeatsHeader);\n    }\n  }\n\n  const body = {\n    installation: {\n      sdkVersion: PACKAGE_VERSION,\n      appId: appConfig.appId\n    }\n  };\n  const request = {\n    method: 'POST',\n    headers,\n    body: JSON.stringify(body)\n  };\n  const response = await retryIfServerError(() => fetch(endpoint, request));\n\n  if (response.ok) {\n    const responseValue = await response.json();\n    const completedAuthToken = extractAuthTokenInfoFromResponse(responseValue);\n    return completedAuthToken;\n  } else {\n    throw await getErrorFromResponse('Generate Auth Token', response);\n  }\n}\n\nfunction getGenerateAuthTokenEndpoint(appConfig, _ref7) {\n  let {\n    fid\n  } = _ref7;\n  return `${getInstallationsEndpoint(appConfig)}/${fid}/authTokens:generate`;\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Returns a valid authentication token for the installation. Generates a new\r\n * token if one doesn't exist, is expired or about to expire.\r\n *\r\n * Should only be called if the Firebase Installation is registered.\r\n */\n\n\nasync function refreshAuthToken(installations) {\n  let forceRefresh = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  let tokenPromise;\n  const entry = await update(installations.appConfig, oldEntry => {\n    if (!isEntryRegistered(oldEntry)) {\n      throw ERROR_FACTORY.create(\"not-registered\"\n      /* NOT_REGISTERED */\n      );\n    }\n\n    const oldAuthToken = oldEntry.authToken;\n\n    if (!forceRefresh && isAuthTokenValid(oldAuthToken)) {\n      // There is a valid token in the DB.\n      return oldEntry;\n    } else if (oldAuthToken.requestStatus === 1\n    /* IN_PROGRESS */\n    ) {\n      // There already is a token request in progress.\n      tokenPromise = waitUntilAuthTokenRequest(installations, forceRefresh);\n      return oldEntry;\n    } else {\n      // No token or token expired.\n      if (!navigator.onLine) {\n        throw ERROR_FACTORY.create(\"app-offline\"\n        /* APP_OFFLINE */\n        );\n      }\n\n      const inProgressEntry = makeAuthTokenRequestInProgressEntry(oldEntry);\n      tokenPromise = fetchAuthTokenFromServer(installations, inProgressEntry);\n      return inProgressEntry;\n    }\n  });\n  const authToken = tokenPromise ? await tokenPromise : entry.authToken;\n  return authToken;\n}\n/**\r\n * Call only if FID is registered and Auth Token request is in progress.\r\n *\r\n * Waits until the current pending request finishes. If the request times out,\r\n * tries once in this thread as well.\r\n */\n\n\nasync function waitUntilAuthTokenRequest(installations, forceRefresh) {\n  // Unfortunately, there is no way of reliably observing when a value in\n  // IndexedDB changes (yet, see https://github.com/WICG/indexed-db-observers),\n  // so we need to poll.\n  let entry = await updateAuthTokenRequest(installations.appConfig);\n\n  while (entry.authToken.requestStatus === 1\n  /* IN_PROGRESS */\n  ) {\n    // generateAuthToken still in progress.\n    await sleep(100);\n    entry = await updateAuthTokenRequest(installations.appConfig);\n  }\n\n  const authToken = entry.authToken;\n\n  if (authToken.requestStatus === 0\n  /* NOT_STARTED */\n  ) {\n    // The request timed out or failed in a different call. Try again.\n    return refreshAuthToken(installations, forceRefresh);\n  } else {\n    return authToken;\n  }\n}\n/**\r\n * Called only if there is a GenerateAuthToken request in progress.\r\n *\r\n * Updates the InstallationEntry in the DB based on the status of the\r\n * GenerateAuthToken request.\r\n *\r\n * Returns the updated InstallationEntry.\r\n */\n\n\nfunction updateAuthTokenRequest(appConfig) {\n  return update(appConfig, oldEntry => {\n    if (!isEntryRegistered(oldEntry)) {\n      throw ERROR_FACTORY.create(\"not-registered\"\n      /* NOT_REGISTERED */\n      );\n    }\n\n    const oldAuthToken = oldEntry.authToken;\n\n    if (hasAuthTokenRequestTimedOut(oldAuthToken)) {\n      return Object.assign(Object.assign({}, oldEntry), {\n        authToken: {\n          requestStatus: 0\n          /* NOT_STARTED */\n\n        }\n      });\n    }\n\n    return oldEntry;\n  });\n}\n\nasync function fetchAuthTokenFromServer(installations, installationEntry) {\n  try {\n    const authToken = await generateAuthTokenRequest(installations, installationEntry);\n    const updatedInstallationEntry = Object.assign(Object.assign({}, installationEntry), {\n      authToken\n    });\n    await set(installations.appConfig, updatedInstallationEntry);\n    return authToken;\n  } catch (e) {\n    if (isServerError(e) && (e.customData.serverCode === 401 || e.customData.serverCode === 404)) {\n      // Server returned a \"FID not found\" or a \"Invalid authentication\" error.\n      // Generate a new ID next time.\n      await remove(installations.appConfig);\n    } else {\n      const updatedInstallationEntry = Object.assign(Object.assign({}, installationEntry), {\n        authToken: {\n          requestStatus: 0\n          /* NOT_STARTED */\n\n        }\n      });\n      await set(installations.appConfig, updatedInstallationEntry);\n    }\n\n    throw e;\n  }\n}\n\nfunction isEntryRegistered(installationEntry) {\n  return installationEntry !== undefined && installationEntry.registrationStatus === 2\n  /* COMPLETED */\n  ;\n}\n\nfunction isAuthTokenValid(authToken) {\n  return authToken.requestStatus === 2\n  /* COMPLETED */\n  && !isAuthTokenExpired(authToken);\n}\n\nfunction isAuthTokenExpired(authToken) {\n  const now = Date.now();\n  return now < authToken.creationTime || authToken.creationTime + authToken.expiresIn < now + TOKEN_EXPIRATION_BUFFER;\n}\n/** Returns an updated InstallationEntry with an InProgressAuthToken. */\n\n\nfunction makeAuthTokenRequestInProgressEntry(oldEntry) {\n  const inProgressAuthToken = {\n    requestStatus: 1\n    /* IN_PROGRESS */\n    ,\n    requestTime: Date.now()\n  };\n  return Object.assign(Object.assign({}, oldEntry), {\n    authToken: inProgressAuthToken\n  });\n}\n\nfunction hasAuthTokenRequestTimedOut(authToken) {\n  return authToken.requestStatus === 1\n  /* IN_PROGRESS */\n  && authToken.requestTime + PENDING_TIMEOUT_MS < Date.now();\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Creates a Firebase Installation if there isn't one for the app and\r\n * returns the Installation ID.\r\n * @param installations - The `Installations` instance.\r\n *\r\n * @public\r\n */\n\n\nasync function getId(installations) {\n  const installationsImpl = installations;\n  const {\n    installationEntry,\n    registrationPromise\n  } = await getInstallationEntry(installationsImpl);\n\n  if (registrationPromise) {\n    registrationPromise.catch(console.error);\n  } else {\n    // If the installation is already registered, update the authentication\n    // token if needed.\n    refreshAuthToken(installationsImpl).catch(console.error);\n  }\n\n  return installationEntry.fid;\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Returns a Firebase Installations auth token, identifying the current\r\n * Firebase Installation.\r\n * @param installations - The `Installations` instance.\r\n * @param forceRefresh - Force refresh regardless of token expiration.\r\n *\r\n * @public\r\n */\n\n\nasync function getToken(installations) {\n  let forceRefresh = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  const installationsImpl = installations;\n  await completeInstallationRegistration(installationsImpl); // At this point we either have a Registered Installation in the DB, or we've\n  // already thrown an error.\n\n  const authToken = await refreshAuthToken(installationsImpl, forceRefresh);\n  return authToken.token;\n}\n\nasync function completeInstallationRegistration(installations) {\n  const {\n    registrationPromise\n  } = await getInstallationEntry(installations);\n\n  if (registrationPromise) {\n    // A createInstallation request is in progress. Wait until it finishes.\n    await registrationPromise;\n  }\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nasync function deleteInstallationRequest(appConfig, installationEntry) {\n  const endpoint = getDeleteEndpoint(appConfig, installationEntry);\n  const headers = getHeadersWithAuth(appConfig, installationEntry);\n  const request = {\n    method: 'DELETE',\n    headers\n  };\n  const response = await retryIfServerError(() => fetch(endpoint, request));\n\n  if (!response.ok) {\n    throw await getErrorFromResponse('Delete Installation', response);\n  }\n}\n\nfunction getDeleteEndpoint(appConfig, _ref8) {\n  let {\n    fid\n  } = _ref8;\n  return `${getInstallationsEndpoint(appConfig)}/${fid}`;\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Deletes the Firebase Installation and all associated data.\r\n * @param installations - The `Installations` instance.\r\n *\r\n * @public\r\n */\n\n\nasync function deleteInstallations(installations) {\n  const {\n    appConfig\n  } = installations;\n  const entry = await update(appConfig, oldEntry => {\n    if (oldEntry && oldEntry.registrationStatus === 0\n    /* NOT_STARTED */\n    ) {\n      // Delete the unregistered entry without sending a deleteInstallation request.\n      return undefined;\n    }\n\n    return oldEntry;\n  });\n\n  if (entry) {\n    if (entry.registrationStatus === 1\n    /* IN_PROGRESS */\n    ) {\n      // Can't delete while trying to register.\n      throw ERROR_FACTORY.create(\"delete-pending-registration\"\n      /* DELETE_PENDING_REGISTRATION */\n      );\n    } else if (entry.registrationStatus === 2\n    /* COMPLETED */\n    ) {\n      if (!navigator.onLine) {\n        throw ERROR_FACTORY.create(\"app-offline\"\n        /* APP_OFFLINE */\n        );\n      } else {\n        await deleteInstallationRequest(appConfig, entry);\n        await remove(appConfig);\n      }\n    }\n  }\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Sets a new callback that will get called when Installation ID changes.\r\n * Returns an unsubscribe function that will remove the callback when called.\r\n * @param installations - The `Installations` instance.\r\n * @param callback - The callback function that is invoked when FID changes.\r\n * @returns A function that can be called to unsubscribe.\r\n *\r\n * @public\r\n */\n\n\nfunction onIdChange(installations, callback) {\n  const {\n    appConfig\n  } = installations;\n  addCallback(appConfig, callback);\n  return () => {\n    removeCallback(appConfig, callback);\n  };\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Returns an instance of {@link Installations} associated with the given\r\n * {@link @firebase/app#FirebaseApp} instance.\r\n * @param app - The {@link @firebase/app#FirebaseApp} instance.\r\n *\r\n * @public\r\n */\n\n\nfunction getInstallations() {\n  let app = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : getApp();\n\n  const installationsImpl = _getProvider(app, 'installations').getImmediate();\n\n  return installationsImpl;\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nfunction extractAppConfig(app) {\n  if (!app || !app.options) {\n    throw getMissingValueError('App Configuration');\n  }\n\n  if (!app.name) {\n    throw getMissingValueError('App Name');\n  } // Required app config keys\n\n\n  const configKeys = ['projectId', 'apiKey', 'appId'];\n\n  for (const keyName of configKeys) {\n    if (!app.options[keyName]) {\n      throw getMissingValueError(keyName);\n    }\n  }\n\n  return {\n    appName: app.name,\n    projectId: app.options.projectId,\n    apiKey: app.options.apiKey,\n    appId: app.options.appId\n  };\n}\n\nfunction getMissingValueError(valueName) {\n  return ERROR_FACTORY.create(\"missing-app-config-values\"\n  /* MISSING_APP_CONFIG_VALUES */\n  , {\n    valueName\n  });\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nconst INSTALLATIONS_NAME = 'installations';\nconst INSTALLATIONS_NAME_INTERNAL = 'installations-internal';\n\nconst publicFactory = container => {\n  const app = container.getProvider('app').getImmediate(); // Throws if app isn't configured properly.\n\n  const appConfig = extractAppConfig(app);\n\n  const heartbeatServiceProvider = _getProvider(app, 'heartbeat');\n\n  const installationsImpl = {\n    app,\n    appConfig,\n    heartbeatServiceProvider,\n    _delete: () => Promise.resolve()\n  };\n  return installationsImpl;\n};\n\nconst internalFactory = container => {\n  const app = container.getProvider('app').getImmediate(); // Internal FIS instance relies on public FIS instance.\n\n  const installations = _getProvider(app, INSTALLATIONS_NAME).getImmediate();\n\n  const installationsInternal = {\n    getId: () => getId(installations),\n    getToken: forceRefresh => getToken(installations, forceRefresh)\n  };\n  return installationsInternal;\n};\n\nfunction registerInstallations() {\n  _registerComponent(new Component(INSTALLATIONS_NAME, publicFactory, \"PUBLIC\"\n  /* PUBLIC */\n  ));\n\n  _registerComponent(new Component(INSTALLATIONS_NAME_INTERNAL, internalFactory, \"PRIVATE\"\n  /* PRIVATE */\n  ));\n}\n/**\r\n * Firebase Installations\r\n *\r\n * @packageDocumentation\r\n */\n\n\nregisterInstallations();\nregisterVersion(name, version); // BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation\n\nregisterVersion(name, version, 'esm2017');\nexport { deleteInstallations, getId, getInstallations, getToken, onIdChange };","map":{"version":3,"mappings":"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","names":["PENDING_TIMEOUT_MS","PACKAGE_VERSION","version","INTERNAL_AUTH_VERSION","INSTALLATIONS_API_URL","TOKEN_EXPIRATION_BUFFER","SERVICE","SERVICE_NAME","ERROR_DESCRIPTION_MAP","ERROR_FACTORY","ErrorFactory","isServerError","error","FirebaseError","code","includes","getInstallationsEndpoint","projectId","extractAuthTokenInfoFromResponse","response","token","requestStatus","expiresIn","getExpiresInFromResponseExpiresIn","creationTime","Date","now","getErrorFromResponse","requestName","responseJson","json","errorData","create","serverCode","serverMessage","message","serverStatus","status","getHeaders","apiKey","Headers","Accept","getHeadersWithAuth","appConfig","refreshToken","headers","append","getAuthorizationHeader","retryIfServerError","fn","result","responseExpiresIn","Number","replace","createInstallationRequest","heartbeatServiceProvider","fid","endpoint","heartbeatService","getImmediate","optional","heartbeatsHeader","getHeartbeatsHeader","body","authVersion","appId","sdkVersion","request","method","JSON","stringify","fetch","ok","responseValue","registeredInstallationEntry","registrationStatus","authToken","sleep","ms","Promise","resolve","setTimeout","bufferToBase64UrlSafe","array","b64","btoa","String","fromCharCode","VALID_FID_PATTERN","INVALID_FID","generateFid","fidByteArray","Uint8Array","crypto","self","msCrypto","getRandomValues","encode","test","b64String","substr","getKey","appName","fidChangeCallbacks","Map","fidChanged","key","callFidChangeCallbacks","broadcastFidChange","addCallback","callback","getBroadcastChannel","callbackSet","get","Set","set","add","removeCallback","delete","size","closeBroadcastChannel","callbacks","channel","postMessage","broadcastChannel","BroadcastChannel","onmessage","e","data","close","DATABASE_NAME","DATABASE_VERSION","OBJECT_STORE_NAME","dbPromise","getDbPromise","openDB","upgrade","db","oldVersion","createObjectStore","value","tx","transaction","objectStore","oldValue","put","done","remove","update","updateFn","store","newValue","undefined","getInstallationEntry","installations","registrationPromise","installationEntry","oldEntry","updateOrCreateInstallationEntry","entryWithPromise","triggerRegistrationIfNecessary","entry","clearTimedOutRequest","navigator","onLine","registrationPromiseWithError","reject","inProgressEntry","registrationTime","registerInstallation","waitUntilFidRegistration","customData","updateInstallationRequest","hasInstallationRequestTimedOut","generateAuthTokenRequest","getGenerateAuthTokenEndpoint","installation","completedAuthToken","refreshAuthToken","forceRefresh","tokenPromise","isEntryRegistered","oldAuthToken","isAuthTokenValid","waitUntilAuthTokenRequest","makeAuthTokenRequestInProgressEntry","fetchAuthTokenFromServer","updateAuthTokenRequest","hasAuthTokenRequestTimedOut","updatedInstallationEntry","isAuthTokenExpired","inProgressAuthToken","requestTime","getId","installationsImpl","catch","console","getToken","completeInstallationRegistration","deleteInstallationRequest","getDeleteEndpoint","deleteInstallations","onIdChange","getInstallations","app","getApp","_getProvider","extractAppConfig","options","getMissingValueError","name","configKeys","keyName","valueName","INSTALLATIONS_NAME","INSTALLATIONS_NAME_INTERNAL","publicFactory","container","getProvider","_delete","internalFactory","installationsInternal","registerInstallations","_registerComponent","Component","registerVersion"],"sources":["/home/fullzer4/Documents/GitHub/ToDoList/todolist/node_modules/@firebase/installations/src/util/constants.ts","/home/fullzer4/Documents/GitHub/ToDoList/todolist/node_modules/@firebase/installations/src/util/errors.ts","/home/fullzer4/Documents/GitHub/ToDoList/todolist/node_modules/@firebase/installations/src/functions/common.ts","/home/fullzer4/Documents/GitHub/ToDoList/todolist/node_modules/@firebase/installations/src/functions/create-installation-request.ts","/home/fullzer4/Documents/GitHub/ToDoList/todolist/node_modules/@firebase/installations/src/util/sleep.ts","/home/fullzer4/Documents/GitHub/ToDoList/todolist/node_modules/@firebase/installations/src/helpers/buffer-to-base64-url-safe.ts","/home/fullzer4/Documents/GitHub/ToDoList/todolist/node_modules/@firebase/installations/src/helpers/generate-fid.ts","/home/fullzer4/Documents/GitHub/ToDoList/todolist/node_modules/@firebase/installations/src/util/get-key.ts","/home/fullzer4/Documents/GitHub/ToDoList/todolist/node_modules/@firebase/installations/src/helpers/fid-changed.ts","/home/fullzer4/Documents/GitHub/ToDoList/todolist/node_modules/@firebase/installations/src/helpers/idb-manager.ts","/home/fullzer4/Documents/GitHub/ToDoList/todolist/node_modules/@firebase/installations/src/helpers/get-installation-entry.ts","/home/fullzer4/Documents/GitHub/ToDoList/todolist/node_modules/@firebase/installations/src/functions/generate-auth-token-request.ts","/home/fullzer4/Documents/GitHub/ToDoList/todolist/node_modules/@firebase/installations/src/helpers/refresh-auth-token.ts","/home/fullzer4/Documents/GitHub/ToDoList/todolist/node_modules/@firebase/installations/src/api/get-id.ts","/home/fullzer4/Documents/GitHub/ToDoList/todolist/node_modules/@firebase/installations/src/api/get-token.ts","/home/fullzer4/Documents/GitHub/ToDoList/todolist/node_modules/@firebase/installations/src/functions/delete-installation-request.ts","/home/fullzer4/Documents/GitHub/ToDoList/todolist/node_modules/@firebase/installations/src/api/delete-installations.ts","/home/fullzer4/Documents/GitHub/ToDoList/todolist/node_modules/@firebase/installations/src/api/on-id-change.ts","/home/fullzer4/Documents/GitHub/ToDoList/todolist/node_modules/@firebase/installations/src/api/get-installations.ts","/home/fullzer4/Documents/GitHub/ToDoList/todolist/node_modules/@firebase/installations/src/helpers/extract-app-config.ts","/home/fullzer4/Documents/GitHub/ToDoList/todolist/node_modules/@firebase/installations/src/functions/config.ts","/home/fullzer4/Documents/GitHub/ToDoList/todolist/node_modules/@firebase/installations/src/index.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { version } from '../../package.json';\n\nexport const PENDING_TIMEOUT_MS = 10000;\n\nexport const PACKAGE_VERSION = `w:${version}`;\nexport const INTERNAL_AUTH_VERSION = 'FIS_v2';\n\nexport const INSTALLATIONS_API_URL =\n  'https://firebaseinstallations.googleapis.com/v1';\n\nexport const TOKEN_EXPIRATION_BUFFER = 60 * 60 * 1000; // One hour\n\nexport const SERVICE = 'installations';\nexport const SERVICE_NAME = 'Installations';\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ErrorFactory, FirebaseError } from '@firebase/util';\nimport { SERVICE, SERVICE_NAME } from './constants';\n\nexport const enum ErrorCode {\n  MISSING_APP_CONFIG_VALUES = 'missing-app-config-values',\n  NOT_REGISTERED = 'not-registered',\n  INSTALLATION_NOT_FOUND = 'installation-not-found',\n  REQUEST_FAILED = 'request-failed',\n  APP_OFFLINE = 'app-offline',\n  DELETE_PENDING_REGISTRATION = 'delete-pending-registration'\n}\n\nconst ERROR_DESCRIPTION_MAP: { readonly [key in ErrorCode]: string } = {\n  [ErrorCode.MISSING_APP_CONFIG_VALUES]:\n    'Missing App configuration value: \"{$valueName}\"',\n  [ErrorCode.NOT_REGISTERED]: 'Firebase Installation is not registered.',\n  [ErrorCode.INSTALLATION_NOT_FOUND]: 'Firebase Installation not found.',\n  [ErrorCode.REQUEST_FAILED]:\n    '{$requestName} request failed with error \"{$serverCode} {$serverStatus}: {$serverMessage}\"',\n  [ErrorCode.APP_OFFLINE]: 'Could not process request. Application offline.',\n  [ErrorCode.DELETE_PENDING_REGISTRATION]:\n    \"Can't delete installation while there is a pending registration request.\"\n};\n\ninterface ErrorParams {\n  [ErrorCode.MISSING_APP_CONFIG_VALUES]: {\n    valueName: string;\n  };\n  [ErrorCode.REQUEST_FAILED]: {\n    requestName: string;\n    [index: string]: string | number; // to make Typescript 3.8 happy\n  } & ServerErrorData;\n}\n\nexport const ERROR_FACTORY = new ErrorFactory<ErrorCode, ErrorParams>(\n  SERVICE,\n  SERVICE_NAME,\n  ERROR_DESCRIPTION_MAP\n);\n\nexport interface ServerErrorData {\n  serverCode: number;\n  serverMessage: string;\n  serverStatus: string;\n}\n\nexport type ServerError = FirebaseError & { customData: ServerErrorData };\n\n/** Returns true if error is a FirebaseError that is based on an error from the server. */\nexport function isServerError(error: unknown): error is ServerError {\n  return (\n    error instanceof FirebaseError &&\n    error.code.includes(ErrorCode.REQUEST_FAILED)\n  );\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseError } from '@firebase/util';\nimport { GenerateAuthTokenResponse } from '../interfaces/api-response';\nimport {\n  CompletedAuthToken,\n  RegisteredInstallationEntry,\n  RequestStatus\n} from '../interfaces/installation-entry';\nimport {\n  INSTALLATIONS_API_URL,\n  INTERNAL_AUTH_VERSION\n} from '../util/constants';\nimport { ERROR_FACTORY, ErrorCode } from '../util/errors';\nimport { AppConfig } from '../interfaces/installation-impl';\n\nexport function getInstallationsEndpoint({ projectId }: AppConfig): string {\n  return `${INSTALLATIONS_API_URL}/projects/${projectId}/installations`;\n}\n\nexport function extractAuthTokenInfoFromResponse(\n  response: GenerateAuthTokenResponse\n): CompletedAuthToken {\n  return {\n    token: response.token,\n    requestStatus: RequestStatus.COMPLETED,\n    expiresIn: getExpiresInFromResponseExpiresIn(response.expiresIn),\n    creationTime: Date.now()\n  };\n}\n\nexport async function getErrorFromResponse(\n  requestName: string,\n  response: Response\n): Promise<FirebaseError> {\n  const responseJson: ErrorResponse = await response.json();\n  const errorData = responseJson.error;\n  return ERROR_FACTORY.create(ErrorCode.REQUEST_FAILED, {\n    requestName,\n    serverCode: errorData.code,\n    serverMessage: errorData.message,\n    serverStatus: errorData.status\n  });\n}\n\nexport function getHeaders({ apiKey }: AppConfig): Headers {\n  return new Headers({\n    'Content-Type': 'application/json',\n    Accept: 'application/json',\n    'x-goog-api-key': apiKey\n  });\n}\n\nexport function getHeadersWithAuth(\n  appConfig: AppConfig,\n  { refreshToken }: RegisteredInstallationEntry\n): Headers {\n  const headers = getHeaders(appConfig);\n  headers.append('Authorization', getAuthorizationHeader(refreshToken));\n  return headers;\n}\n\nexport interface ErrorResponse {\n  error: {\n    code: number;\n    message: string;\n    status: string;\n  };\n}\n\n/**\n * Calls the passed in fetch wrapper and returns the response.\n * If the returned response has a status of 5xx, re-runs the function once and\n * returns the response.\n */\nexport async function retryIfServerError(\n  fn: () => Promise<Response>\n): Promise<Response> {\n  const result = await fn();\n\n  if (result.status >= 500 && result.status < 600) {\n    // Internal Server Error. Retry request.\n    return fn();\n  }\n\n  return result;\n}\n\nfunction getExpiresInFromResponseExpiresIn(responseExpiresIn: string): number {\n  // This works because the server will never respond with fractions of a second.\n  return Number(responseExpiresIn.replace('s', '000'));\n}\n\nfunction getAuthorizationHeader(refreshToken: string): string {\n  return `${INTERNAL_AUTH_VERSION} ${refreshToken}`;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CreateInstallationResponse } from '../interfaces/api-response';\nimport {\n  InProgressInstallationEntry,\n  RegisteredInstallationEntry,\n  RequestStatus\n} from '../interfaces/installation-entry';\nimport { INTERNAL_AUTH_VERSION, PACKAGE_VERSION } from '../util/constants';\nimport {\n  extractAuthTokenInfoFromResponse,\n  getErrorFromResponse,\n  getHeaders,\n  getInstallationsEndpoint,\n  retryIfServerError\n} from './common';\nimport { FirebaseInstallationsImpl } from '../interfaces/installation-impl';\n\nexport async function createInstallationRequest(\n  { appConfig, heartbeatServiceProvider }: FirebaseInstallationsImpl,\n  { fid }: InProgressInstallationEntry\n): Promise<RegisteredInstallationEntry> {\n  const endpoint = getInstallationsEndpoint(appConfig);\n\n  const headers = getHeaders(appConfig);\n\n  // If heartbeat service exists, add the heartbeat string to the header.\n  const heartbeatService = heartbeatServiceProvider.getImmediate({\n    optional: true\n  });\n  if (heartbeatService) {\n    const heartbeatsHeader = await heartbeatService.getHeartbeatsHeader();\n    if (heartbeatsHeader) {\n      headers.append('x-firebase-client', heartbeatsHeader);\n    }\n  }\n\n  const body = {\n    fid,\n    authVersion: INTERNAL_AUTH_VERSION,\n    appId: appConfig.appId,\n    sdkVersion: PACKAGE_VERSION\n  };\n\n  const request: RequestInit = {\n    method: 'POST',\n    headers,\n    body: JSON.stringify(body)\n  };\n\n  const response = await retryIfServerError(() => fetch(endpoint, request));\n  if (response.ok) {\n    const responseValue: CreateInstallationResponse = await response.json();\n    const registeredInstallationEntry: RegisteredInstallationEntry = {\n      fid: responseValue.fid || fid,\n      registrationStatus: RequestStatus.COMPLETED,\n      refreshToken: responseValue.refreshToken,\n      authToken: extractAuthTokenInfoFromResponse(responseValue.authToken)\n    };\n    return registeredInstallationEntry;\n  } else {\n    throw await getErrorFromResponse('Create Installation', response);\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** Returns a promise that resolves after given time passes. */\nexport function sleep(ms: number): Promise<void> {\n  return new Promise<void>(resolve => {\n    setTimeout(resolve, ms);\n  });\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport function bufferToBase64UrlSafe(array: Uint8Array): string {\n  const b64 = btoa(String.fromCharCode(...array));\n  return b64.replace(/\\+/g, '-').replace(/\\//g, '_');\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { bufferToBase64UrlSafe } from './buffer-to-base64-url-safe';\n\nexport const VALID_FID_PATTERN = /^[cdef][\\w-]{21}$/;\nexport const INVALID_FID = '';\n\n/**\n * Generates a new FID using random values from Web Crypto API.\n * Returns an empty string if FID generation fails for any reason.\n */\nexport function generateFid(): string {\n  try {\n    // A valid FID has exactly 22 base64 characters, which is 132 bits, or 16.5\n    // bytes. our implementation generates a 17 byte array instead.\n    const fidByteArray = new Uint8Array(17);\n    const crypto =\n      self.crypto || (self as unknown as { msCrypto: Crypto }).msCrypto;\n    crypto.getRandomValues(fidByteArray);\n\n    // Replace the first 4 random bits with the constant FID header of 0b0111.\n    fidByteArray[0] = 0b01110000 + (fidByteArray[0] % 0b00010000);\n\n    const fid = encode(fidByteArray);\n\n    return VALID_FID_PATTERN.test(fid) ? fid : INVALID_FID;\n  } catch {\n    // FID generation errored\n    return INVALID_FID;\n  }\n}\n\n/** Converts a FID Uint8Array to a base64 string representation. */\nfunction encode(fidByteArray: Uint8Array): string {\n  const b64String = bufferToBase64UrlSafe(fidByteArray);\n\n  // Remove the 23rd character that was added because of the extra 4 bits at the\n  // end of our 17 byte array, and the '=' padding.\n  return b64String.substr(0, 22);\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { AppConfig } from '../interfaces/installation-impl';\n\n/** Returns a string key that can be used to identify the app. */\nexport function getKey(appConfig: AppConfig): string {\n  return `${appConfig.appName}!${appConfig.appId}`;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { getKey } from '../util/get-key';\nimport { AppConfig } from '../interfaces/installation-impl';\nimport { IdChangeCallbackFn } from '../api';\n\nconst fidChangeCallbacks: Map<string, Set<IdChangeCallbackFn>> = new Map();\n\n/**\n * Calls the onIdChange callbacks with the new FID value, and broadcasts the\n * change to other tabs.\n */\nexport function fidChanged(appConfig: AppConfig, fid: string): void {\n  const key = getKey(appConfig);\n\n  callFidChangeCallbacks(key, fid);\n  broadcastFidChange(key, fid);\n}\n\nexport function addCallback(\n  appConfig: AppConfig,\n  callback: IdChangeCallbackFn\n): void {\n  // Open the broadcast channel if it's not already open,\n  // to be able to listen to change events from other tabs.\n  getBroadcastChannel();\n\n  const key = getKey(appConfig);\n\n  let callbackSet = fidChangeCallbacks.get(key);\n  if (!callbackSet) {\n    callbackSet = new Set();\n    fidChangeCallbacks.set(key, callbackSet);\n  }\n  callbackSet.add(callback);\n}\n\nexport function removeCallback(\n  appConfig: AppConfig,\n  callback: IdChangeCallbackFn\n): void {\n  const key = getKey(appConfig);\n\n  const callbackSet = fidChangeCallbacks.get(key);\n\n  if (!callbackSet) {\n    return;\n  }\n\n  callbackSet.delete(callback);\n  if (callbackSet.size === 0) {\n    fidChangeCallbacks.delete(key);\n  }\n\n  // Close broadcast channel if there are no more callbacks.\n  closeBroadcastChannel();\n}\n\nfunction callFidChangeCallbacks(key: string, fid: string): void {\n  const callbacks = fidChangeCallbacks.get(key);\n  if (!callbacks) {\n    return;\n  }\n\n  for (const callback of callbacks) {\n    callback(fid);\n  }\n}\n\nfunction broadcastFidChange(key: string, fid: string): void {\n  const channel = getBroadcastChannel();\n  if (channel) {\n    channel.postMessage({ key, fid });\n  }\n  closeBroadcastChannel();\n}\n\nlet broadcastChannel: BroadcastChannel | null = null;\n/** Opens and returns a BroadcastChannel if it is supported by the browser. */\nfunction getBroadcastChannel(): BroadcastChannel | null {\n  if (!broadcastChannel && 'BroadcastChannel' in self) {\n    broadcastChannel = new BroadcastChannel('[Firebase] FID Change');\n    broadcastChannel.onmessage = e => {\n      callFidChangeCallbacks(e.data.key, e.data.fid);\n    };\n  }\n  return broadcastChannel;\n}\n\nfunction closeBroadcastChannel(): void {\n  if (fidChangeCallbacks.size === 0 && broadcastChannel) {\n    broadcastChannel.close();\n    broadcastChannel = null;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DBSchema, IDBPDatabase, openDB } from 'idb';\nimport { AppConfig } from '../interfaces/installation-impl';\nimport { InstallationEntry } from '../interfaces/installation-entry';\nimport { getKey } from '../util/get-key';\nimport { fidChanged } from './fid-changed';\n\nconst DATABASE_NAME = 'firebase-installations-database';\nconst DATABASE_VERSION = 1;\nconst OBJECT_STORE_NAME = 'firebase-installations-store';\n\ninterface InstallationsDB extends DBSchema {\n  'firebase-installations-store': {\n    key: string;\n    value: InstallationEntry | undefined;\n  };\n}\n\nlet dbPromise: Promise<IDBPDatabase<InstallationsDB>> | null = null;\nfunction getDbPromise(): Promise<IDBPDatabase<InstallationsDB>> {\n  if (!dbPromise) {\n    dbPromise = openDB(DATABASE_NAME, DATABASE_VERSION, {\n      upgrade: (db, oldVersion) => {\n        // We don't use 'break' in this switch statement, the fall-through\n        // behavior is what we want, because if there are multiple versions between\n        // the old version and the current version, we want ALL the migrations\n        // that correspond to those versions to run, not only the last one.\n        // eslint-disable-next-line default-case\n        switch (oldVersion) {\n          case 0:\n            db.createObjectStore(OBJECT_STORE_NAME);\n        }\n      }\n    });\n  }\n  return dbPromise;\n}\n\n/** Gets record(s) from the objectStore that match the given key. */\nexport async function get(\n  appConfig: AppConfig\n): Promise<InstallationEntry | undefined> {\n  const key = getKey(appConfig);\n  const db = await getDbPromise();\n  return db\n    .transaction(OBJECT_STORE_NAME)\n    .objectStore(OBJECT_STORE_NAME)\n    .get(key) as Promise<InstallationEntry>;\n}\n\n/** Assigns or overwrites the record for the given key with the given value. */\nexport async function set<ValueType extends InstallationEntry>(\n  appConfig: AppConfig,\n  value: ValueType\n): Promise<ValueType> {\n  const key = getKey(appConfig);\n  const db = await getDbPromise();\n  const tx = db.transaction(OBJECT_STORE_NAME, 'readwrite');\n  const objectStore = tx.objectStore(OBJECT_STORE_NAME);\n  const oldValue = (await objectStore.get(key)) as InstallationEntry;\n  await objectStore.put(value, key);\n  await tx.done;\n\n  if (!oldValue || oldValue.fid !== value.fid) {\n    fidChanged(appConfig, value.fid);\n  }\n\n  return value;\n}\n\n/** Removes record(s) from the objectStore that match the given key. */\nexport async function remove(appConfig: AppConfig): Promise<void> {\n  const key = getKey(appConfig);\n  const db = await getDbPromise();\n  const tx = db.transaction(OBJECT_STORE_NAME, 'readwrite');\n  await tx.objectStore(OBJECT_STORE_NAME).delete(key);\n  await tx.done;\n}\n\n/**\n * Atomically updates a record with the result of updateFn, which gets\n * called with the current value. If newValue is undefined, the record is\n * deleted instead.\n * @return Updated value\n */\nexport async function update<ValueType extends InstallationEntry | undefined>(\n  appConfig: AppConfig,\n  updateFn: (previousValue: InstallationEntry | undefined) => ValueType\n): Promise<ValueType> {\n  const key = getKey(appConfig);\n  const db = await getDbPromise();\n  const tx = db.transaction(OBJECT_STORE_NAME, 'readwrite');\n  const store = tx.objectStore(OBJECT_STORE_NAME);\n  const oldValue: InstallationEntry | undefined = (await store.get(\n    key\n  )) as InstallationEntry;\n  const newValue = updateFn(oldValue);\n\n  if (newValue === undefined) {\n    await store.delete(key);\n  } else {\n    await store.put(newValue, key);\n  }\n  await tx.done;\n\n  if (newValue && (!oldValue || oldValue.fid !== newValue.fid)) {\n    fidChanged(appConfig, newValue.fid);\n  }\n\n  return newValue;\n}\n\nexport async function clear(): Promise<void> {\n  const db = await getDbPromise();\n  const tx = db.transaction(OBJECT_STORE_NAME, 'readwrite');\n  await tx.objectStore(OBJECT_STORE_NAME).clear();\n  await tx.done;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { createInstallationRequest } from '../functions/create-installation-request';\nimport {\n  AppConfig,\n  FirebaseInstallationsImpl\n} from '../interfaces/installation-impl';\nimport {\n  InProgressInstallationEntry,\n  InstallationEntry,\n  RegisteredInstallationEntry,\n  RequestStatus\n} from '../interfaces/installation-entry';\nimport { PENDING_TIMEOUT_MS } from '../util/constants';\nimport { ERROR_FACTORY, ErrorCode, isServerError } from '../util/errors';\nimport { sleep } from '../util/sleep';\nimport { generateFid, INVALID_FID } from './generate-fid';\nimport { remove, set, update } from './idb-manager';\n\nexport interface InstallationEntryWithRegistrationPromise {\n  installationEntry: InstallationEntry;\n  /** Exist iff the installationEntry is not registered. */\n  registrationPromise?: Promise<RegisteredInstallationEntry>;\n}\n\n/**\n * Updates and returns the InstallationEntry from the database.\n * Also triggers a registration request if it is necessary and possible.\n */\nexport async function getInstallationEntry(\n  installations: FirebaseInstallationsImpl\n): Promise<InstallationEntryWithRegistrationPromise> {\n  let registrationPromise: Promise<RegisteredInstallationEntry> | undefined;\n\n  const installationEntry = await update(installations.appConfig, oldEntry => {\n    const installationEntry = updateOrCreateInstallationEntry(oldEntry);\n    const entryWithPromise = triggerRegistrationIfNecessary(\n      installations,\n      installationEntry\n    );\n    registrationPromise = entryWithPromise.registrationPromise;\n    return entryWithPromise.installationEntry;\n  });\n\n  if (installationEntry.fid === INVALID_FID) {\n    // FID generation failed. Waiting for the FID from the server.\n    return { installationEntry: await registrationPromise! };\n  }\n\n  return {\n    installationEntry,\n    registrationPromise\n  };\n}\n\n/**\n * Creates a new Installation Entry if one does not exist.\n * Also clears timed out pending requests.\n */\nfunction updateOrCreateInstallationEntry(\n  oldEntry: InstallationEntry | undefined\n): InstallationEntry {\n  const entry: InstallationEntry = oldEntry || {\n    fid: generateFid(),\n    registrationStatus: RequestStatus.NOT_STARTED\n  };\n\n  return clearTimedOutRequest(entry);\n}\n\n/**\n * If the Firebase Installation is not registered yet, this will trigger the\n * registration and return an InProgressInstallationEntry.\n *\n * If registrationPromise does not exist, the installationEntry is guaranteed\n * to be registered.\n */\nfunction triggerRegistrationIfNecessary(\n  installations: FirebaseInstallationsImpl,\n  installationEntry: InstallationEntry\n): InstallationEntryWithRegistrationPromise {\n  if (installationEntry.registrationStatus === RequestStatus.NOT_STARTED) {\n    if (!navigator.onLine) {\n      // Registration required but app is offline.\n      const registrationPromiseWithError = Promise.reject(\n        ERROR_FACTORY.create(ErrorCode.APP_OFFLINE)\n      );\n      return {\n        installationEntry,\n        registrationPromise: registrationPromiseWithError\n      };\n    }\n\n    // Try registering. Change status to IN_PROGRESS.\n    const inProgressEntry: InProgressInstallationEntry = {\n      fid: installationEntry.fid,\n      registrationStatus: RequestStatus.IN_PROGRESS,\n      registrationTime: Date.now()\n    };\n    const registrationPromise = registerInstallation(\n      installations,\n      inProgressEntry\n    );\n    return { installationEntry: inProgressEntry, registrationPromise };\n  } else if (\n    installationEntry.registrationStatus === RequestStatus.IN_PROGRESS\n  ) {\n    return {\n      installationEntry,\n      registrationPromise: waitUntilFidRegistration(installations)\n    };\n  } else {\n    return { installationEntry };\n  }\n}\n\n/** This will be executed only once for each new Firebase Installation. */\nasync function registerInstallation(\n  installations: FirebaseInstallationsImpl,\n  installationEntry: InProgressInstallationEntry\n): Promise<RegisteredInstallationEntry> {\n  try {\n    const registeredInstallationEntry = await createInstallationRequest(\n      installations,\n      installationEntry\n    );\n    return set(installations.appConfig, registeredInstallationEntry);\n  } catch (e) {\n    if (isServerError(e) && e.customData.serverCode === 409) {\n      // Server returned a \"FID can not be used\" error.\n      // Generate a new ID next time.\n      await remove(installations.appConfig);\n    } else {\n      // Registration failed. Set FID as not registered.\n      await set(installations.appConfig, {\n        fid: installationEntry.fid,\n        registrationStatus: RequestStatus.NOT_STARTED\n      });\n    }\n    throw e;\n  }\n}\n\n/** Call if FID registration is pending in another request. */\nasync function waitUntilFidRegistration(\n  installations: FirebaseInstallationsImpl\n): Promise<RegisteredInstallationEntry> {\n  // Unfortunately, there is no way of reliably observing when a value in\n  // IndexedDB changes (yet, see https://github.com/WICG/indexed-db-observers),\n  // so we need to poll.\n\n  let entry: InstallationEntry = await updateInstallationRequest(\n    installations.appConfig\n  );\n  while (entry.registrationStatus === RequestStatus.IN_PROGRESS) {\n    // createInstallation request still in progress.\n    await sleep(100);\n\n    entry = await updateInstallationRequest(installations.appConfig);\n  }\n\n  if (entry.registrationStatus === RequestStatus.NOT_STARTED) {\n    // The request timed out or failed in a different call. Try again.\n    const { installationEntry, registrationPromise } =\n      await getInstallationEntry(installations);\n\n    if (registrationPromise) {\n      return registrationPromise;\n    } else {\n      // if there is no registrationPromise, entry is registered.\n      return installationEntry as RegisteredInstallationEntry;\n    }\n  }\n\n  return entry;\n}\n\n/**\n * Called only if there is a CreateInstallation request in progress.\n *\n * Updates the InstallationEntry in the DB based on the status of the\n * CreateInstallation request.\n *\n * Returns the updated InstallationEntry.\n */\nfunction updateInstallationRequest(\n  appConfig: AppConfig\n): Promise<InstallationEntry> {\n  return update(appConfig, oldEntry => {\n    if (!oldEntry) {\n      throw ERROR_FACTORY.create(ErrorCode.INSTALLATION_NOT_FOUND);\n    }\n    return clearTimedOutRequest(oldEntry);\n  });\n}\n\nfunction clearTimedOutRequest(entry: InstallationEntry): InstallationEntry {\n  if (hasInstallationRequestTimedOut(entry)) {\n    return {\n      fid: entry.fid,\n      registrationStatus: RequestStatus.NOT_STARTED\n    };\n  }\n\n  return entry;\n}\n\nfunction hasInstallationRequestTimedOut(\n  installationEntry: InstallationEntry\n): boolean {\n  return (\n    installationEntry.registrationStatus === RequestStatus.IN_PROGRESS &&\n    installationEntry.registrationTime + PENDING_TIMEOUT_MS < Date.now()\n  );\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { GenerateAuthTokenResponse } from '../interfaces/api-response';\nimport {\n  CompletedAuthToken,\n  RegisteredInstallationEntry\n} from '../interfaces/installation-entry';\nimport { PACKAGE_VERSION } from '../util/constants';\nimport {\n  extractAuthTokenInfoFromResponse,\n  getErrorFromResponse,\n  getHeadersWithAuth,\n  getInstallationsEndpoint,\n  retryIfServerError\n} from './common';\nimport {\n  FirebaseInstallationsImpl,\n  AppConfig\n} from '../interfaces/installation-impl';\n\nexport async function generateAuthTokenRequest(\n  { appConfig, heartbeatServiceProvider }: FirebaseInstallationsImpl,\n  installationEntry: RegisteredInstallationEntry\n): Promise<CompletedAuthToken> {\n  const endpoint = getGenerateAuthTokenEndpoint(appConfig, installationEntry);\n\n  const headers = getHeadersWithAuth(appConfig, installationEntry);\n\n  // If heartbeat service exists, add the heartbeat string to the header.\n  const heartbeatService = heartbeatServiceProvider.getImmediate({\n    optional: true\n  });\n  if (heartbeatService) {\n    const heartbeatsHeader = await heartbeatService.getHeartbeatsHeader();\n    if (heartbeatsHeader) {\n      headers.append('x-firebase-client', heartbeatsHeader);\n    }\n  }\n\n  const body = {\n    installation: {\n      sdkVersion: PACKAGE_VERSION,\n      appId: appConfig.appId\n    }\n  };\n\n  const request: RequestInit = {\n    method: 'POST',\n    headers,\n    body: JSON.stringify(body)\n  };\n\n  const response = await retryIfServerError(() => fetch(endpoint, request));\n  if (response.ok) {\n    const responseValue: GenerateAuthTokenResponse = await response.json();\n    const completedAuthToken: CompletedAuthToken =\n      extractAuthTokenInfoFromResponse(responseValue);\n    return completedAuthToken;\n  } else {\n    throw await getErrorFromResponse('Generate Auth Token', response);\n  }\n}\n\nfunction getGenerateAuthTokenEndpoint(\n  appConfig: AppConfig,\n  { fid }: RegisteredInstallationEntry\n): string {\n  return `${getInstallationsEndpoint(appConfig)}/${fid}/authTokens:generate`;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { generateAuthTokenRequest } from '../functions/generate-auth-token-request';\nimport {\n  AppConfig,\n  FirebaseInstallationsImpl\n} from '../interfaces/installation-impl';\nimport {\n  AuthToken,\n  CompletedAuthToken,\n  InProgressAuthToken,\n  InstallationEntry,\n  RegisteredInstallationEntry,\n  RequestStatus\n} from '../interfaces/installation-entry';\nimport { PENDING_TIMEOUT_MS, TOKEN_EXPIRATION_BUFFER } from '../util/constants';\nimport { ERROR_FACTORY, ErrorCode, isServerError } from '../util/errors';\nimport { sleep } from '../util/sleep';\nimport { remove, set, update } from './idb-manager';\n\n/**\n * Returns a valid authentication token for the installation. Generates a new\n * token if one doesn't exist, is expired or about to expire.\n *\n * Should only be called if the Firebase Installation is registered.\n */\nexport async function refreshAuthToken(\n  installations: FirebaseInstallationsImpl,\n  forceRefresh = false\n): Promise<CompletedAuthToken> {\n  let tokenPromise: Promise<CompletedAuthToken> | undefined;\n  const entry = await update(installations.appConfig, oldEntry => {\n    if (!isEntryRegistered(oldEntry)) {\n      throw ERROR_FACTORY.create(ErrorCode.NOT_REGISTERED);\n    }\n\n    const oldAuthToken = oldEntry.authToken;\n    if (!forceRefresh && isAuthTokenValid(oldAuthToken)) {\n      // There is a valid token in the DB.\n      return oldEntry;\n    } else if (oldAuthToken.requestStatus === RequestStatus.IN_PROGRESS) {\n      // There already is a token request in progress.\n      tokenPromise = waitUntilAuthTokenRequest(installations, forceRefresh);\n      return oldEntry;\n    } else {\n      // No token or token expired.\n      if (!navigator.onLine) {\n        throw ERROR_FACTORY.create(ErrorCode.APP_OFFLINE);\n      }\n\n      const inProgressEntry = makeAuthTokenRequestInProgressEntry(oldEntry);\n      tokenPromise = fetchAuthTokenFromServer(installations, inProgressEntry);\n      return inProgressEntry;\n    }\n  });\n\n  const authToken = tokenPromise\n    ? await tokenPromise\n    : (entry.authToken as CompletedAuthToken);\n  return authToken;\n}\n\n/**\n * Call only if FID is registered and Auth Token request is in progress.\n *\n * Waits until the current pending request finishes. If the request times out,\n * tries once in this thread as well.\n */\nasync function waitUntilAuthTokenRequest(\n  installations: FirebaseInstallationsImpl,\n  forceRefresh: boolean\n): Promise<CompletedAuthToken> {\n  // Unfortunately, there is no way of reliably observing when a value in\n  // IndexedDB changes (yet, see https://github.com/WICG/indexed-db-observers),\n  // so we need to poll.\n\n  let entry = await updateAuthTokenRequest(installations.appConfig);\n  while (entry.authToken.requestStatus === RequestStatus.IN_PROGRESS) {\n    // generateAuthToken still in progress.\n    await sleep(100);\n\n    entry = await updateAuthTokenRequest(installations.appConfig);\n  }\n\n  const authToken = entry.authToken;\n  if (authToken.requestStatus === RequestStatus.NOT_STARTED) {\n    // The request timed out or failed in a different call. Try again.\n    return refreshAuthToken(installations, forceRefresh);\n  } else {\n    return authToken;\n  }\n}\n\n/**\n * Called only if there is a GenerateAuthToken request in progress.\n *\n * Updates the InstallationEntry in the DB based on the status of the\n * GenerateAuthToken request.\n *\n * Returns the updated InstallationEntry.\n */\nfunction updateAuthTokenRequest(\n  appConfig: AppConfig\n): Promise<RegisteredInstallationEntry> {\n  return update(appConfig, oldEntry => {\n    if (!isEntryRegistered(oldEntry)) {\n      throw ERROR_FACTORY.create(ErrorCode.NOT_REGISTERED);\n    }\n\n    const oldAuthToken = oldEntry.authToken;\n    if (hasAuthTokenRequestTimedOut(oldAuthToken)) {\n      return {\n        ...oldEntry,\n        authToken: { requestStatus: RequestStatus.NOT_STARTED }\n      };\n    }\n\n    return oldEntry;\n  });\n}\n\nasync function fetchAuthTokenFromServer(\n  installations: FirebaseInstallationsImpl,\n  installationEntry: RegisteredInstallationEntry\n): Promise<CompletedAuthToken> {\n  try {\n    const authToken = await generateAuthTokenRequest(\n      installations,\n      installationEntry\n    );\n    const updatedInstallationEntry: RegisteredInstallationEntry = {\n      ...installationEntry,\n      authToken\n    };\n    await set(installations.appConfig, updatedInstallationEntry);\n    return authToken;\n  } catch (e) {\n    if (\n      isServerError(e) &&\n      (e.customData.serverCode === 401 || e.customData.serverCode === 404)\n    ) {\n      // Server returned a \"FID not found\" or a \"Invalid authentication\" error.\n      // Generate a new ID next time.\n      await remove(installations.appConfig);\n    } else {\n      const updatedInstallationEntry: RegisteredInstallationEntry = {\n        ...installationEntry,\n        authToken: { requestStatus: RequestStatus.NOT_STARTED }\n      };\n      await set(installations.appConfig, updatedInstallationEntry);\n    }\n    throw e;\n  }\n}\n\nfunction isEntryRegistered(\n  installationEntry: InstallationEntry | undefined\n): installationEntry is RegisteredInstallationEntry {\n  return (\n    installationEntry !== undefined &&\n    installationEntry.registrationStatus === RequestStatus.COMPLETED\n  );\n}\n\nfunction isAuthTokenValid(authToken: AuthToken): boolean {\n  return (\n    authToken.requestStatus === RequestStatus.COMPLETED &&\n    !isAuthTokenExpired(authToken)\n  );\n}\n\nfunction isAuthTokenExpired(authToken: CompletedAuthToken): boolean {\n  const now = Date.now();\n  return (\n    now < authToken.creationTime ||\n    authToken.creationTime + authToken.expiresIn < now + TOKEN_EXPIRATION_BUFFER\n  );\n}\n\n/** Returns an updated InstallationEntry with an InProgressAuthToken. */\nfunction makeAuthTokenRequestInProgressEntry(\n  oldEntry: RegisteredInstallationEntry\n): RegisteredInstallationEntry {\n  const inProgressAuthToken: InProgressAuthToken = {\n    requestStatus: RequestStatus.IN_PROGRESS,\n    requestTime: Date.now()\n  };\n  return {\n    ...oldEntry,\n    authToken: inProgressAuthToken\n  };\n}\n\nfunction hasAuthTokenRequestTimedOut(authToken: AuthToken): boolean {\n  return (\n    authToken.requestStatus === RequestStatus.IN_PROGRESS &&\n    authToken.requestTime + PENDING_TIMEOUT_MS < Date.now()\n  );\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { getInstallationEntry } from '../helpers/get-installation-entry';\nimport { refreshAuthToken } from '../helpers/refresh-auth-token';\nimport { FirebaseInstallationsImpl } from '../interfaces/installation-impl';\nimport { Installations } from '../interfaces/public-types';\n\n/**\n * Creates a Firebase Installation if there isn't one for the app and\n * returns the Installation ID.\n * @param installations - The `Installations` instance.\n *\n * @public\n */\nexport async function getId(installations: Installations): Promise<string> {\n  const installationsImpl = installations as FirebaseInstallationsImpl;\n  const { installationEntry, registrationPromise } = await getInstallationEntry(\n    installationsImpl\n  );\n\n  if (registrationPromise) {\n    registrationPromise.catch(console.error);\n  } else {\n    // If the installation is already registered, update the authentication\n    // token if needed.\n    refreshAuthToken(installationsImpl).catch(console.error);\n  }\n\n  return installationEntry.fid;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { getInstallationEntry } from '../helpers/get-installation-entry';\nimport { refreshAuthToken } from '../helpers/refresh-auth-token';\nimport { FirebaseInstallationsImpl } from '../interfaces/installation-impl';\nimport { Installations } from '../interfaces/public-types';\n\n/**\n * Returns a Firebase Installations auth token, identifying the current\n * Firebase Installation.\n * @param installations - The `Installations` instance.\n * @param forceRefresh - Force refresh regardless of token expiration.\n *\n * @public\n */\nexport async function getToken(\n  installations: Installations,\n  forceRefresh = false\n): Promise<string> {\n  const installationsImpl = installations as FirebaseInstallationsImpl;\n  await completeInstallationRegistration(installationsImpl);\n\n  // At this point we either have a Registered Installation in the DB, or we've\n  // already thrown an error.\n  const authToken = await refreshAuthToken(installationsImpl, forceRefresh);\n  return authToken.token;\n}\n\nasync function completeInstallationRegistration(\n  installations: FirebaseInstallationsImpl\n): Promise<void> {\n  const { registrationPromise } = await getInstallationEntry(installations);\n\n  if (registrationPromise) {\n    // A createInstallation request is in progress. Wait until it finishes.\n    await registrationPromise;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { AppConfig } from '../interfaces/installation-impl';\nimport { RegisteredInstallationEntry } from '../interfaces/installation-entry';\nimport {\n  getErrorFromResponse,\n  getHeadersWithAuth,\n  getInstallationsEndpoint,\n  retryIfServerError\n} from './common';\n\nexport async function deleteInstallationRequest(\n  appConfig: AppConfig,\n  installationEntry: RegisteredInstallationEntry\n): Promise<void> {\n  const endpoint = getDeleteEndpoint(appConfig, installationEntry);\n\n  const headers = getHeadersWithAuth(appConfig, installationEntry);\n  const request: RequestInit = {\n    method: 'DELETE',\n    headers\n  };\n\n  const response = await retryIfServerError(() => fetch(endpoint, request));\n  if (!response.ok) {\n    throw await getErrorFromResponse('Delete Installation', response);\n  }\n}\n\nfunction getDeleteEndpoint(\n  appConfig: AppConfig,\n  { fid }: RegisteredInstallationEntry\n): string {\n  return `${getInstallationsEndpoint(appConfig)}/${fid}`;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { deleteInstallationRequest } from '../functions/delete-installation-request';\nimport { remove, update } from '../helpers/idb-manager';\nimport { RequestStatus } from '../interfaces/installation-entry';\nimport { ERROR_FACTORY, ErrorCode } from '../util/errors';\nimport { FirebaseInstallationsImpl } from '../interfaces/installation-impl';\nimport { Installations } from '../interfaces/public-types';\n\n/**\n * Deletes the Firebase Installation and all associated data.\n * @param installations - The `Installations` instance.\n *\n * @public\n */\nexport async function deleteInstallations(\n  installations: Installations\n): Promise<void> {\n  const { appConfig } = installations as FirebaseInstallationsImpl;\n\n  const entry = await update(appConfig, oldEntry => {\n    if (oldEntry && oldEntry.registrationStatus === RequestStatus.NOT_STARTED) {\n      // Delete the unregistered entry without sending a deleteInstallation request.\n      return undefined;\n    }\n    return oldEntry;\n  });\n\n  if (entry) {\n    if (entry.registrationStatus === RequestStatus.IN_PROGRESS) {\n      // Can't delete while trying to register.\n      throw ERROR_FACTORY.create(ErrorCode.DELETE_PENDING_REGISTRATION);\n    } else if (entry.registrationStatus === RequestStatus.COMPLETED) {\n      if (!navigator.onLine) {\n        throw ERROR_FACTORY.create(ErrorCode.APP_OFFLINE);\n      } else {\n        await deleteInstallationRequest(appConfig, entry);\n        await remove(appConfig);\n      }\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { addCallback, removeCallback } from '../helpers/fid-changed';\nimport { FirebaseInstallationsImpl } from '../interfaces/installation-impl';\nimport { Installations } from '../interfaces/public-types';\n\n/**\n * An user defined callback function that gets called when Installations ID changes.\n *\n * @public\n */\nexport type IdChangeCallbackFn = (installationId: string) => void;\n/**\n * Unsubscribe a callback function previously added via {@link IdChangeCallbackFn}.\n *\n * @public\n */\nexport type IdChangeUnsubscribeFn = () => void;\n\n/**\n * Sets a new callback that will get called when Installation ID changes.\n * Returns an unsubscribe function that will remove the callback when called.\n * @param installations - The `Installations` instance.\n * @param callback - The callback function that is invoked when FID changes.\n * @returns A function that can be called to unsubscribe.\n *\n * @public\n */\nexport function onIdChange(\n  installations: Installations,\n  callback: IdChangeCallbackFn\n): IdChangeUnsubscribeFn {\n  const { appConfig } = installations as FirebaseInstallationsImpl;\n\n  addCallback(appConfig, callback);\n  return () => {\n    removeCallback(appConfig, callback);\n  };\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseApp, getApp, _getProvider } from '@firebase/app';\nimport { Installations } from '../interfaces/public-types';\n\n/**\n * Returns an instance of {@link Installations} associated with the given\n * {@link @firebase/app#FirebaseApp} instance.\n * @param app - The {@link @firebase/app#FirebaseApp} instance.\n *\n * @public\n */\nexport function getInstallations(app: FirebaseApp = getApp()): Installations {\n  const installationsImpl = _getProvider(app, 'installations').getImmediate();\n  return installationsImpl;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseApp, FirebaseOptions } from '@firebase/app';\nimport { FirebaseError } from '@firebase/util';\nimport { AppConfig } from '../interfaces/installation-impl';\nimport { ERROR_FACTORY, ErrorCode } from '../util/errors';\n\nexport function extractAppConfig(app: FirebaseApp): AppConfig {\n  if (!app || !app.options) {\n    throw getMissingValueError('App Configuration');\n  }\n\n  if (!app.name) {\n    throw getMissingValueError('App Name');\n  }\n\n  // Required app config keys\n  const configKeys: Array<keyof FirebaseOptions> = [\n    'projectId',\n    'apiKey',\n    'appId'\n  ];\n\n  for (const keyName of configKeys) {\n    if (!app.options[keyName]) {\n      throw getMissingValueError(keyName);\n    }\n  }\n\n  return {\n    appName: app.name,\n    projectId: app.options.projectId!,\n    apiKey: app.options.apiKey!,\n    appId: app.options.appId!\n  };\n}\n\nfunction getMissingValueError(valueName: string): FirebaseError {\n  return ERROR_FACTORY.create(ErrorCode.MISSING_APP_CONFIG_VALUES, {\n    valueName\n  });\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { _registerComponent, _getProvider } from '@firebase/app';\nimport {\n  Component,\n  ComponentType,\n  InstanceFactory,\n  ComponentContainer\n} from '@firebase/component';\nimport { getId, getToken } from '../api/index';\nimport { _FirebaseInstallationsInternal } from '../interfaces/public-types';\nimport { FirebaseInstallationsImpl } from '../interfaces/installation-impl';\nimport { extractAppConfig } from '../helpers/extract-app-config';\n\nconst INSTALLATIONS_NAME = 'installations';\nconst INSTALLATIONS_NAME_INTERNAL = 'installations-internal';\n\nconst publicFactory: InstanceFactory<'installations'> = (\n  container: ComponentContainer\n) => {\n  const app = container.getProvider('app').getImmediate();\n  // Throws if app isn't configured properly.\n  const appConfig = extractAppConfig(app);\n  const heartbeatServiceProvider = _getProvider(app, 'heartbeat');\n\n  const installationsImpl: FirebaseInstallationsImpl = {\n    app,\n    appConfig,\n    heartbeatServiceProvider,\n    _delete: () => Promise.resolve()\n  };\n  return installationsImpl;\n};\n\nconst internalFactory: InstanceFactory<'installations-internal'> = (\n  container: ComponentContainer\n) => {\n  const app = container.getProvider('app').getImmediate();\n  // Internal FIS instance relies on public FIS instance.\n  const installations = _getProvider(app, INSTALLATIONS_NAME).getImmediate();\n\n  const installationsInternal: _FirebaseInstallationsInternal = {\n    getId: () => getId(installations),\n    getToken: (forceRefresh?: boolean) => getToken(installations, forceRefresh)\n  };\n  return installationsInternal;\n};\n\nexport function registerInstallations(): void {\n  _registerComponent(\n    new Component(INSTALLATIONS_NAME, publicFactory, ComponentType.PUBLIC)\n  );\n  _registerComponent(\n    new Component(\n      INSTALLATIONS_NAME_INTERNAL,\n      internalFactory,\n      ComponentType.PRIVATE\n    )\n  );\n}\n","/**\n * Firebase Installations\n *\n * @packageDocumentation\n */\n\n/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { registerInstallations } from './functions/config';\nimport { registerVersion } from '@firebase/app';\nimport { name, version } from '../package.json';\n\nexport * from './api';\nexport * from './interfaces/public-types';\n\nregisterInstallations();\nregisterVersion(name, version);\n// BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation\nregisterVersion(name, version, '__BUILD_TARGET__');\n"]},"metadata":{},"sourceType":"module"}