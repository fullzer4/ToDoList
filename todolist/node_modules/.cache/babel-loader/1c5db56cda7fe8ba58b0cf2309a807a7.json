{"ast":null,"code":"import _createForOfIteratorHelper from \"/home/fullzer4/Documents/GitHub/ToDoList/todolist/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _classCallCheck from \"/home/fullzer4/Documents/GitHub/ToDoList/todolist/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/fullzer4/Documents/GitHub/ToDoList/todolist/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _defineProperty from \"/home/fullzer4/Documents/GitHub/ToDoList/todolist/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\n\nvar _ConsoleMethod;\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * A container for all of the Logger instances\r\n */\nvar instances = [];\n/**\r\n * The JS SDK supports 5 log levels and also allows a user the ability to\r\n * silence the logs altogether.\r\n *\r\n * The order is a follows:\r\n * DEBUG < VERBOSE < INFO < WARN < ERROR\r\n *\r\n * All of the log types above the current log level will be captured (i.e. if\r\n * you set the log level to `INFO`, errors will still be logged, but `DEBUG` and\r\n * `VERBOSE` logs will not)\r\n */\n\nvar LogLevel;\n\n(function (LogLevel) {\n  LogLevel[LogLevel[\"DEBUG\"] = 0] = \"DEBUG\";\n  LogLevel[LogLevel[\"VERBOSE\"] = 1] = \"VERBOSE\";\n  LogLevel[LogLevel[\"INFO\"] = 2] = \"INFO\";\n  LogLevel[LogLevel[\"WARN\"] = 3] = \"WARN\";\n  LogLevel[LogLevel[\"ERROR\"] = 4] = \"ERROR\";\n  LogLevel[LogLevel[\"SILENT\"] = 5] = \"SILENT\";\n})(LogLevel || (LogLevel = {}));\n\nvar levelStringToEnum = {\n  'debug': LogLevel.DEBUG,\n  'verbose': LogLevel.VERBOSE,\n  'info': LogLevel.INFO,\n  'warn': LogLevel.WARN,\n  'error': LogLevel.ERROR,\n  'silent': LogLevel.SILENT\n};\n/**\r\n * The default log level\r\n */\n\nvar defaultLogLevel = LogLevel.INFO;\n/**\r\n * By default, `console.debug` is not displayed in the developer console (in\r\n * chrome). To avoid forcing users to have to opt-in to these logs twice\r\n * (i.e. once for firebase, and once in the console), we are sending `DEBUG`\r\n * logs to the `console.log` function.\r\n */\n\nvar ConsoleMethod = (_ConsoleMethod = {}, _defineProperty(_ConsoleMethod, LogLevel.DEBUG, 'log'), _defineProperty(_ConsoleMethod, LogLevel.VERBOSE, 'log'), _defineProperty(_ConsoleMethod, LogLevel.INFO, 'info'), _defineProperty(_ConsoleMethod, LogLevel.WARN, 'warn'), _defineProperty(_ConsoleMethod, LogLevel.ERROR, 'error'), _ConsoleMethod);\n/**\r\n * The default log handler will forward DEBUG, VERBOSE, INFO, WARN, and ERROR\r\n * messages on to their corresponding console counterparts (if the log method\r\n * is supported by the current log level)\r\n */\n\nvar defaultLogHandler = function defaultLogHandler(instance, logType) {\n  if (logType < instance.logLevel) {\n    return;\n  }\n\n  var now = new Date().toISOString();\n  var method = ConsoleMethod[logType];\n\n  if (method) {\n    var _console;\n\n    for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n      args[_key - 2] = arguments[_key];\n    }\n\n    (_console = console)[method].apply(_console, [\"[\".concat(now, \"]  \").concat(instance.name, \":\")].concat(args));\n  } else {\n    throw new Error(\"Attempted to log a message with an invalid logType (value: \".concat(logType, \")\"));\n  }\n};\n\nvar Logger = /*#__PURE__*/function () {\n  /**\r\n   * Gives you an instance of a Logger to capture messages according to\r\n   * Firebase's logging scheme.\r\n   *\r\n   * @param name The name that the logs will be associated with\r\n   */\n  function Logger(name) {\n    _classCallCheck(this, Logger);\n\n    this.name = name;\n    /**\r\n     * The log level of the given Logger instance.\r\n     */\n\n    this._logLevel = defaultLogLevel;\n    /**\r\n     * The main (internal) log handler for the Logger instance.\r\n     * Can be set to a new function in internal package code but not by user.\r\n     */\n\n    this._logHandler = defaultLogHandler;\n    /**\r\n     * The optional, additional, user-defined log handler for the Logger instance.\r\n     */\n\n    this._userLogHandler = null;\n    /**\r\n     * Capture the current instance for later use\r\n     */\n\n    instances.push(this);\n  }\n\n  _createClass(Logger, [{\n    key: \"logLevel\",\n    get: function get() {\n      return this._logLevel;\n    },\n    set: function set(val) {\n      if (!(val in LogLevel)) {\n        throw new TypeError(\"Invalid value \\\"\".concat(val, \"\\\" assigned to `logLevel`\"));\n      }\n\n      this._logLevel = val;\n    } // Workaround for setter/getter having to be the same type.\n\n  }, {\n    key: \"setLogLevel\",\n    value: function setLogLevel(val) {\n      this._logLevel = typeof val === 'string' ? levelStringToEnum[val] : val;\n    }\n  }, {\n    key: \"logHandler\",\n    get: function get() {\n      return this._logHandler;\n    },\n    set: function set(val) {\n      if (typeof val !== 'function') {\n        throw new TypeError('Value assigned to `logHandler` must be a function');\n      }\n\n      this._logHandler = val;\n    }\n  }, {\n    key: \"userLogHandler\",\n    get: function get() {\n      return this._userLogHandler;\n    },\n    set: function set(val) {\n      this._userLogHandler = val;\n    }\n    /**\r\n     * The functions below are all based on the `console` interface\r\n     */\n\n  }, {\n    key: \"debug\",\n    value: function debug() {\n      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        args[_key2] = arguments[_key2];\n      }\n\n      this._userLogHandler && this._userLogHandler.apply(this, [this, LogLevel.DEBUG].concat(args));\n\n      this._logHandler.apply(this, [this, LogLevel.DEBUG].concat(args));\n    }\n  }, {\n    key: \"log\",\n    value: function log() {\n      for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n        args[_key3] = arguments[_key3];\n      }\n\n      this._userLogHandler && this._userLogHandler.apply(this, [this, LogLevel.VERBOSE].concat(args));\n\n      this._logHandler.apply(this, [this, LogLevel.VERBOSE].concat(args));\n    }\n  }, {\n    key: \"info\",\n    value: function info() {\n      for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n        args[_key4] = arguments[_key4];\n      }\n\n      this._userLogHandler && this._userLogHandler.apply(this, [this, LogLevel.INFO].concat(args));\n\n      this._logHandler.apply(this, [this, LogLevel.INFO].concat(args));\n    }\n  }, {\n    key: \"warn\",\n    value: function warn() {\n      for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {\n        args[_key5] = arguments[_key5];\n      }\n\n      this._userLogHandler && this._userLogHandler.apply(this, [this, LogLevel.WARN].concat(args));\n\n      this._logHandler.apply(this, [this, LogLevel.WARN].concat(args));\n    }\n  }, {\n    key: \"error\",\n    value: function error() {\n      for (var _len6 = arguments.length, args = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {\n        args[_key6] = arguments[_key6];\n      }\n\n      this._userLogHandler && this._userLogHandler.apply(this, [this, LogLevel.ERROR].concat(args));\n\n      this._logHandler.apply(this, [this, LogLevel.ERROR].concat(args));\n    }\n  }]);\n\n  return Logger;\n}();\n\nfunction setLogLevel(level) {\n  instances.forEach(function (inst) {\n    inst.setLogLevel(level);\n  });\n}\n\nfunction setUserLogHandler(logCallback, options) {\n  var _iterator = _createForOfIteratorHelper(instances),\n      _step;\n\n  try {\n    var _loop = function _loop() {\n      var instance = _step.value;\n      var customLogLevel = null;\n\n      if (options && options.level) {\n        customLogLevel = levelStringToEnum[options.level];\n      }\n\n      if (logCallback === null) {\n        instance.userLogHandler = null;\n      } else {\n        instance.userLogHandler = function (instance, level) {\n          for (var _len7 = arguments.length, args = new Array(_len7 > 2 ? _len7 - 2 : 0), _key7 = 2; _key7 < _len7; _key7++) {\n            args[_key7 - 2] = arguments[_key7];\n          }\n\n          var message = args.map(function (arg) {\n            if (arg == null) {\n              return null;\n            } else if (typeof arg === 'string') {\n              return arg;\n            } else if (typeof arg === 'number' || typeof arg === 'boolean') {\n              return arg.toString();\n            } else if (arg instanceof Error) {\n              return arg.message;\n            } else {\n              try {\n                return JSON.stringify(arg);\n              } catch (ignored) {\n                return null;\n              }\n            }\n          }).filter(function (arg) {\n            return arg;\n          }).join(' ');\n\n          if (level >= (customLogLevel !== null && customLogLevel !== void 0 ? customLogLevel : instance.logLevel)) {\n            logCallback({\n              level: LogLevel[level].toLowerCase(),\n              message: message,\n              args: args,\n              type: instance.name\n            });\n          }\n        };\n      }\n    };\n\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      _loop();\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n}\n\nexport { LogLevel, Logger, setLogLevel, setUserLogHandler };","map":{"version":3,"mappings":"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","names":["instances","LogLevel","levelStringToEnum","DEBUG","VERBOSE","INFO","WARN","ERROR","SILENT","defaultLogLevel","ConsoleMethod","defaultLogHandler","instance","logType","logLevel","now","Date","toISOString","method","args","name","Error","Logger","push","_logLevel","val","TypeError","_logHandler","_userLogHandler","setLogLevel","level","forEach","inst","setUserLogHandler","logCallback","options","customLogLevel","userLogHandler","message","map","arg","toString","JSON","stringify","ignored","filter","join","toLowerCase","type"],"sources":["/home/fullzer4/Documents/GitHub/ToDoList/todolist/node_modules/@firebase/logger/src/logger.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport type LogLevelString =\n  | 'debug'\n  | 'verbose'\n  | 'info'\n  | 'warn'\n  | 'error'\n  | 'silent';\n\nexport interface LogOptions {\n  level: LogLevelString;\n}\n\nexport type LogCallback = (callbackParams: LogCallbackParams) => void;\n\nexport interface LogCallbackParams {\n  level: LogLevelString;\n  message: string;\n  args: unknown[];\n  type: string;\n}\n\n/**\n * A container for all of the Logger instances\n */\nexport const instances: Logger[] = [];\n\n/**\n * The JS SDK supports 5 log levels and also allows a user the ability to\n * silence the logs altogether.\n *\n * The order is a follows:\n * DEBUG < VERBOSE < INFO < WARN < ERROR\n *\n * All of the log types above the current log level will be captured (i.e. if\n * you set the log level to `INFO`, errors will still be logged, but `DEBUG` and\n * `VERBOSE` logs will not)\n */\nexport enum LogLevel {\n  DEBUG,\n  VERBOSE,\n  INFO,\n  WARN,\n  ERROR,\n  SILENT\n}\n\nconst levelStringToEnum: { [key in LogLevelString]: LogLevel } = {\n  'debug': LogLevel.DEBUG,\n  'verbose': LogLevel.VERBOSE,\n  'info': LogLevel.INFO,\n  'warn': LogLevel.WARN,\n  'error': LogLevel.ERROR,\n  'silent': LogLevel.SILENT\n};\n\n/**\n * The default log level\n */\nconst defaultLogLevel: LogLevel = LogLevel.INFO;\n\n/**\n * We allow users the ability to pass their own log handler. We will pass the\n * type of log, the current log level, and any other arguments passed (i.e. the\n * messages that the user wants to log) to this function.\n */\nexport type LogHandler = (\n  loggerInstance: Logger,\n  logType: LogLevel,\n  ...args: unknown[]\n) => void;\n\n/**\n * By default, `console.debug` is not displayed in the developer console (in\n * chrome). To avoid forcing users to have to opt-in to these logs twice\n * (i.e. once for firebase, and once in the console), we are sending `DEBUG`\n * logs to the `console.log` function.\n */\nconst ConsoleMethod = {\n  [LogLevel.DEBUG]: 'log',\n  [LogLevel.VERBOSE]: 'log',\n  [LogLevel.INFO]: 'info',\n  [LogLevel.WARN]: 'warn',\n  [LogLevel.ERROR]: 'error'\n};\n\n/**\n * The default log handler will forward DEBUG, VERBOSE, INFO, WARN, and ERROR\n * messages on to their corresponding console counterparts (if the log method\n * is supported by the current log level)\n */\nconst defaultLogHandler: LogHandler = (instance, logType, ...args): void => {\n  if (logType < instance.logLevel) {\n    return;\n  }\n  const now = new Date().toISOString();\n  const method = ConsoleMethod[logType as keyof typeof ConsoleMethod];\n  if (method) {\n    console[method as 'log' | 'info' | 'warn' | 'error'](\n      `[${now}]  ${instance.name}:`,\n      ...args\n    );\n  } else {\n    throw new Error(\n      `Attempted to log a message with an invalid logType (value: ${logType})`\n    );\n  }\n};\n\nexport class Logger {\n  /**\n   * Gives you an instance of a Logger to capture messages according to\n   * Firebase's logging scheme.\n   *\n   * @param name The name that the logs will be associated with\n   */\n  constructor(public name: string) {\n    /**\n     * Capture the current instance for later use\n     */\n    instances.push(this);\n  }\n\n  /**\n   * The log level of the given Logger instance.\n   */\n  private _logLevel = defaultLogLevel;\n\n  get logLevel(): LogLevel {\n    return this._logLevel;\n  }\n\n  set logLevel(val: LogLevel) {\n    if (!(val in LogLevel)) {\n      throw new TypeError(`Invalid value \"${val}\" assigned to \\`logLevel\\``);\n    }\n    this._logLevel = val;\n  }\n\n  // Workaround for setter/getter having to be the same type.\n  setLogLevel(val: LogLevel | LogLevelString): void {\n    this._logLevel = typeof val === 'string' ? levelStringToEnum[val] : val;\n  }\n\n  /**\n   * The main (internal) log handler for the Logger instance.\n   * Can be set to a new function in internal package code but not by user.\n   */\n  private _logHandler: LogHandler = defaultLogHandler;\n  get logHandler(): LogHandler {\n    return this._logHandler;\n  }\n  set logHandler(val: LogHandler) {\n    if (typeof val !== 'function') {\n      throw new TypeError('Value assigned to `logHandler` must be a function');\n    }\n    this._logHandler = val;\n  }\n\n  /**\n   * The optional, additional, user-defined log handler for the Logger instance.\n   */\n  private _userLogHandler: LogHandler | null = null;\n  get userLogHandler(): LogHandler | null {\n    return this._userLogHandler;\n  }\n  set userLogHandler(val: LogHandler | null) {\n    this._userLogHandler = val;\n  }\n\n  /**\n   * The functions below are all based on the `console` interface\n   */\n\n  debug(...args: unknown[]): void {\n    this._userLogHandler && this._userLogHandler(this, LogLevel.DEBUG, ...args);\n    this._logHandler(this, LogLevel.DEBUG, ...args);\n  }\n  log(...args: unknown[]): void {\n    this._userLogHandler &&\n      this._userLogHandler(this, LogLevel.VERBOSE, ...args);\n    this._logHandler(this, LogLevel.VERBOSE, ...args);\n  }\n  info(...args: unknown[]): void {\n    this._userLogHandler && this._userLogHandler(this, LogLevel.INFO, ...args);\n    this._logHandler(this, LogLevel.INFO, ...args);\n  }\n  warn(...args: unknown[]): void {\n    this._userLogHandler && this._userLogHandler(this, LogLevel.WARN, ...args);\n    this._logHandler(this, LogLevel.WARN, ...args);\n  }\n  error(...args: unknown[]): void {\n    this._userLogHandler && this._userLogHandler(this, LogLevel.ERROR, ...args);\n    this._logHandler(this, LogLevel.ERROR, ...args);\n  }\n}\n\nexport function setLogLevel(level: LogLevelString | LogLevel): void {\n  instances.forEach(inst => {\n    inst.setLogLevel(level);\n  });\n}\n\nexport function setUserLogHandler(\n  logCallback: LogCallback | null,\n  options?: LogOptions\n): void {\n  for (const instance of instances) {\n    let customLogLevel: LogLevel | null = null;\n    if (options && options.level) {\n      customLogLevel = levelStringToEnum[options.level];\n    }\n    if (logCallback === null) {\n      instance.userLogHandler = null;\n    } else {\n      instance.userLogHandler = (\n        instance: Logger,\n        level: LogLevel,\n        ...args: unknown[]\n      ) => {\n        const message = args\n          .map(arg => {\n            if (arg == null) {\n              return null;\n            } else if (typeof arg === 'string') {\n              return arg;\n            } else if (typeof arg === 'number' || typeof arg === 'boolean') {\n              return arg.toString();\n            } else if (arg instanceof Error) {\n              return arg.message;\n            } else {\n              try {\n                return JSON.stringify(arg);\n              } catch (ignored) {\n                return null;\n              }\n            }\n          })\n          .filter(arg => arg)\n          .join(' ');\n        if (level >= (customLogLevel ?? instance.logLevel)) {\n          logCallback({\n            level: LogLevel[level].toLowerCase() as LogLevelString,\n            message,\n            args,\n            type: instance.name\n          });\n        }\n      };\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}