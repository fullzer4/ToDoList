{"ast":null,"code":"import { getApp, _getProvider, _registerComponent, registerVersion } from '@firebase/app';\nimport { Logger } from '@firebase/logger';\nimport { ErrorFactory, calculateBackoffMillis, FirebaseError, isIndexedDBAvailable, validateIndexedDBOpenable, isBrowserExtension, areCookiesEnabled, getModularInstance, deepEqual } from '@firebase/util';\nimport { Component } from '@firebase/component';\nimport '@firebase/installations';\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Type constant for Firebase Analytics.\r\n */\n\nconst ANALYTICS_TYPE = 'analytics'; // Key to attach FID to in gtag params.\n\nconst GA_FID_KEY = 'firebase_id';\nconst ORIGIN_KEY = 'origin';\nconst FETCH_TIMEOUT_MILLIS = 60 * 1000;\nconst DYNAMIC_CONFIG_URL = 'https://firebase.googleapis.com/v1alpha/projects/-/apps/{app-id}/webConfig';\nconst GTAG_URL = 'https://www.googletagmanager.com/gtag/js';\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nconst logger = new Logger('@firebase/analytics');\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Makeshift polyfill for Promise.allSettled(). Resolves when all promises\r\n * have either resolved or rejected.\r\n *\r\n * @param promises Array of promises to wait for.\r\n */\n\nfunction promiseAllSettled(promises) {\n  return Promise.all(promises.map(promise => promise.catch(e => e)));\n}\n/**\r\n * Inserts gtag script tag into the page to asynchronously download gtag.\r\n * @param dataLayerName Name of datalayer (most often the default, \"_dataLayer\").\r\n */\n\n\nfunction insertScriptTag(dataLayerName, measurementId) {\n  const script = document.createElement('script'); // We are not providing an analyticsId in the URL because it would trigger a `page_view`\n  // without fid. We will initialize ga-id using gtag (config) command together with fid.\n\n  script.src = `${GTAG_URL}?l=${dataLayerName}&id=${measurementId}`;\n  script.async = true;\n  document.head.appendChild(script);\n}\n/**\r\n * Get reference to, or create, global datalayer.\r\n * @param dataLayerName Name of datalayer (most often the default, \"_dataLayer\").\r\n */\n\n\nfunction getOrCreateDataLayer(dataLayerName) {\n  // Check for existing dataLayer and create if needed.\n  let dataLayer = [];\n\n  if (Array.isArray(window[dataLayerName])) {\n    dataLayer = window[dataLayerName];\n  } else {\n    window[dataLayerName] = dataLayer;\n  }\n\n  return dataLayer;\n}\n/**\r\n * Wrapped gtag logic when gtag is called with 'config' command.\r\n *\r\n * @param gtagCore Basic gtag function that just appends to dataLayer.\r\n * @param initializationPromisesMap Map of appIds to their initialization promises.\r\n * @param dynamicConfigPromisesList Array of dynamic config fetch promises.\r\n * @param measurementIdToAppId Map of GA measurementIDs to corresponding Firebase appId.\r\n * @param measurementId GA Measurement ID to set config for.\r\n * @param gtagParams Gtag config params to set.\r\n */\n\n\nasync function gtagOnConfig(gtagCore, initializationPromisesMap, dynamicConfigPromisesList, measurementIdToAppId, measurementId, gtagParams) {\n  // If config is already fetched, we know the appId and can use it to look up what FID promise we\n  /// are waiting for, and wait only on that one.\n  const correspondingAppId = measurementIdToAppId[measurementId];\n\n  try {\n    if (correspondingAppId) {\n      await initializationPromisesMap[correspondingAppId];\n    } else {\n      // If config is not fetched yet, wait for all configs (we don't know which one we need) and\n      // find the appId (if any) corresponding to this measurementId. If there is one, wait on\n      // that appId's initialization promise. If there is none, promise resolves and gtag\n      // call goes through.\n      const dynamicConfigResults = await promiseAllSettled(dynamicConfigPromisesList);\n      const foundConfig = dynamicConfigResults.find(config => config.measurementId === measurementId);\n\n      if (foundConfig) {\n        await initializationPromisesMap[foundConfig.appId];\n      }\n    }\n  } catch (e) {\n    logger.error(e);\n  }\n\n  gtagCore(\"config\"\n  /* CONFIG */\n  , measurementId, gtagParams);\n}\n/**\r\n * Wrapped gtag logic when gtag is called with 'event' command.\r\n *\r\n * @param gtagCore Basic gtag function that just appends to dataLayer.\r\n * @param initializationPromisesMap Map of appIds to their initialization promises.\r\n * @param dynamicConfigPromisesList Array of dynamic config fetch promises.\r\n * @param measurementId GA Measurement ID to log event to.\r\n * @param gtagParams Params to log with this event.\r\n */\n\n\nasync function gtagOnEvent(gtagCore, initializationPromisesMap, dynamicConfigPromisesList, measurementId, gtagParams) {\n  try {\n    let initializationPromisesToWaitFor = []; // If there's a 'send_to' param, check if any ID specified matches\n    // an initializeIds() promise we are waiting for.\n\n    if (gtagParams && gtagParams['send_to']) {\n      let gaSendToList = gtagParams['send_to']; // Make it an array if is isn't, so it can be dealt with the same way.\n\n      if (!Array.isArray(gaSendToList)) {\n        gaSendToList = [gaSendToList];\n      } // Checking 'send_to' fields requires having all measurement ID results back from\n      // the dynamic config fetch.\n\n\n      const dynamicConfigResults = await promiseAllSettled(dynamicConfigPromisesList);\n\n      for (const sendToId of gaSendToList) {\n        // Any fetched dynamic measurement ID that matches this 'send_to' ID\n        const foundConfig = dynamicConfigResults.find(config => config.measurementId === sendToId);\n        const initializationPromise = foundConfig && initializationPromisesMap[foundConfig.appId];\n\n        if (initializationPromise) {\n          initializationPromisesToWaitFor.push(initializationPromise);\n        } else {\n          // Found an item in 'send_to' that is not associated\n          // directly with an FID, possibly a group.  Empty this array,\n          // exit the loop early, and let it get populated below.\n          initializationPromisesToWaitFor = [];\n          break;\n        }\n      }\n    } // This will be unpopulated if there was no 'send_to' field , or\n    // if not all entries in the 'send_to' field could be mapped to\n    // a FID. In these cases, wait on all pending initialization promises.\n\n\n    if (initializationPromisesToWaitFor.length === 0) {\n      initializationPromisesToWaitFor = Object.values(initializationPromisesMap);\n    } // Run core gtag function with args after all relevant initialization\n    // promises have been resolved.\n\n\n    await Promise.all(initializationPromisesToWaitFor); // Workaround for http://b/141370449 - third argument cannot be undefined.\n\n    gtagCore(\"event\"\n    /* EVENT */\n    , measurementId, gtagParams || {});\n  } catch (e) {\n    logger.error(e);\n  }\n}\n/**\r\n * Wraps a standard gtag function with extra code to wait for completion of\r\n * relevant initialization promises before sending requests.\r\n *\r\n * @param gtagCore Basic gtag function that just appends to dataLayer.\r\n * @param initializationPromisesMap Map of appIds to their initialization promises.\r\n * @param dynamicConfigPromisesList Array of dynamic config fetch promises.\r\n * @param measurementIdToAppId Map of GA measurementIDs to corresponding Firebase appId.\r\n */\n\n\nfunction wrapGtag(gtagCore,\n/**\r\n * Allows wrapped gtag calls to wait on whichever intialization promises are required,\r\n * depending on the contents of the gtag params' `send_to` field, if any.\r\n */\ninitializationPromisesMap,\n/**\r\n * Wrapped gtag calls sometimes require all dynamic config fetches to have returned\r\n * before determining what initialization promises (which include FIDs) to wait for.\r\n */\ndynamicConfigPromisesList,\n/**\r\n * Wrapped gtag config calls can narrow down which initialization promise (with FID)\r\n * to wait for if the measurementId is already fetched, by getting the corresponding appId,\r\n * which is the key for the initialization promises map.\r\n */\nmeasurementIdToAppId) {\n  /**\r\n   * Wrapper around gtag that ensures FID is sent with gtag calls.\r\n   * @param command Gtag command type.\r\n   * @param idOrNameOrParams Measurement ID if command is EVENT/CONFIG, params if command is SET.\r\n   * @param gtagParams Params if event is EVENT/CONFIG.\r\n   */\n  async function gtagWrapper(command, idOrNameOrParams, gtagParams) {\n    try {\n      // If event, check that relevant initialization promises have completed.\n      if (command === \"event\"\n      /* EVENT */\n      ) {\n        // If EVENT, second arg must be measurementId.\n        await gtagOnEvent(gtagCore, initializationPromisesMap, dynamicConfigPromisesList, idOrNameOrParams, gtagParams);\n      } else if (command === \"config\"\n      /* CONFIG */\n      ) {\n        // If CONFIG, second arg must be measurementId.\n        await gtagOnConfig(gtagCore, initializationPromisesMap, dynamicConfigPromisesList, measurementIdToAppId, idOrNameOrParams, gtagParams);\n      } else {\n        // If SET, second arg must be params.\n        gtagCore(\"set\"\n        /* SET */\n        , idOrNameOrParams);\n      }\n    } catch (e) {\n      logger.error(e);\n    }\n  }\n\n  return gtagWrapper;\n}\n/**\r\n * Creates global gtag function or wraps existing one if found.\r\n * This wrapped function attaches Firebase instance ID (FID) to gtag 'config' and\r\n * 'event' calls that belong to the GAID associated with this Firebase instance.\r\n *\r\n * @param initializationPromisesMap Map of appIds to their initialization promises.\r\n * @param dynamicConfigPromisesList Array of dynamic config fetch promises.\r\n * @param measurementIdToAppId Map of GA measurementIDs to corresponding Firebase appId.\r\n * @param dataLayerName Name of global GA datalayer array.\r\n * @param gtagFunctionName Name of global gtag function (\"gtag\" if not user-specified).\r\n */\n\n\nfunction wrapOrCreateGtag(initializationPromisesMap, dynamicConfigPromisesList, measurementIdToAppId, dataLayerName, gtagFunctionName) {\n  // Create a basic core gtag function\n  let gtagCore = function () {\n    for (var _len = arguments.length, _args = new Array(_len), _key = 0; _key < _len; _key++) {\n      _args[_key] = arguments[_key];\n    }\n\n    // Must push IArguments object, not an array.\n    window[dataLayerName].push(arguments);\n  }; // Replace it with existing one if found\n\n\n  if (window[gtagFunctionName] && typeof window[gtagFunctionName] === 'function') {\n    // @ts-ignore\n    gtagCore = window[gtagFunctionName];\n  }\n\n  window[gtagFunctionName] = wrapGtag(gtagCore, initializationPromisesMap, dynamicConfigPromisesList, measurementIdToAppId);\n  return {\n    gtagCore,\n    wrappedGtag: window[gtagFunctionName]\n  };\n}\n/**\r\n * Returns first script tag in DOM matching our gtag url pattern.\r\n */\n\n\nfunction findGtagScriptOnPage() {\n  const scriptTags = window.document.getElementsByTagName('script');\n\n  for (const tag of Object.values(scriptTags)) {\n    if (tag.src && tag.src.includes(GTAG_URL)) {\n      return tag;\n    }\n  }\n\n  return null;\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nconst ERRORS = {\n  [\"already-exists\"\n  /* ALREADY_EXISTS */\n  ]: 'A Firebase Analytics instance with the appId {$id} ' + ' already exists. ' + 'Only one Firebase Analytics instance can be created for each appId.',\n  [\"already-initialized\"\n  /* ALREADY_INITIALIZED */\n  ]: 'initializeAnalytics() cannot be called again with different options than those ' + 'it was initially called with. It can be called again with the same options to ' + 'return the existing instance, or getAnalytics() can be used ' + 'to get a reference to the already-intialized instance.',\n  [\"already-initialized-settings\"\n  /* ALREADY_INITIALIZED_SETTINGS */\n  ]: 'Firebase Analytics has already been initialized.' + 'settings() must be called before initializing any Analytics instance' + 'or it will have no effect.',\n  [\"interop-component-reg-failed\"\n  /* INTEROP_COMPONENT_REG_FAILED */\n  ]: 'Firebase Analytics Interop Component failed to instantiate: {$reason}',\n  [\"invalid-analytics-context\"\n  /* INVALID_ANALYTICS_CONTEXT */\n  ]: 'Firebase Analytics is not supported in this environment. ' + 'Wrap initialization of analytics in analytics.isSupported() ' + 'to prevent initialization in unsupported environments. Details: {$errorInfo}',\n  [\"indexeddb-unavailable\"\n  /* INDEXEDDB_UNAVAILABLE */\n  ]: 'IndexedDB unavailable or restricted in this environment. ' + 'Wrap initialization of analytics in analytics.isSupported() ' + 'to prevent initialization in unsupported environments. Details: {$errorInfo}',\n  [\"fetch-throttle\"\n  /* FETCH_THROTTLE */\n  ]: 'The config fetch request timed out while in an exponential backoff state.' + ' Unix timestamp in milliseconds when fetch request throttling ends: {$throttleEndTimeMillis}.',\n  [\"config-fetch-failed\"\n  /* CONFIG_FETCH_FAILED */\n  ]: 'Dynamic config fetch failed: [{$httpStatus}] {$responseMessage}',\n  [\"no-api-key\"\n  /* NO_API_KEY */\n  ]: 'The \"apiKey\" field is empty in the local Firebase config. Firebase Analytics requires this field to' + 'contain a valid API key.',\n  [\"no-app-id\"\n  /* NO_APP_ID */\n  ]: 'The \"appId\" field is empty in the local Firebase config. Firebase Analytics requires this field to' + 'contain a valid app ID.'\n};\nconst ERROR_FACTORY = new ErrorFactory('analytics', 'Analytics', ERRORS);\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Backoff factor for 503 errors, which we want to be conservative about\r\n * to avoid overloading servers. Each retry interval will be\r\n * BASE_INTERVAL_MILLIS * LONG_RETRY_FACTOR ^ retryCount, so the second one\r\n * will be ~30 seconds (with fuzzing).\r\n */\n\nconst LONG_RETRY_FACTOR = 30;\n/**\r\n * Base wait interval to multiplied by backoffFactor^backoffCount.\r\n */\n\nconst BASE_INTERVAL_MILLIS = 1000;\n/**\r\n * Stubbable retry data storage class.\r\n */\n\nclass RetryData {\n  constructor() {\n    let throttleMetadata = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    let intervalMillis = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : BASE_INTERVAL_MILLIS;\n    this.throttleMetadata = throttleMetadata;\n    this.intervalMillis = intervalMillis;\n  }\n\n  getThrottleMetadata(appId) {\n    return this.throttleMetadata[appId];\n  }\n\n  setThrottleMetadata(appId, metadata) {\n    this.throttleMetadata[appId] = metadata;\n  }\n\n  deleteThrottleMetadata(appId) {\n    delete this.throttleMetadata[appId];\n  }\n\n}\n\nconst defaultRetryData = new RetryData();\n/**\r\n * Set GET request headers.\r\n * @param apiKey App API key.\r\n */\n\nfunction getHeaders(apiKey) {\n  return new Headers({\n    Accept: 'application/json',\n    'x-goog-api-key': apiKey\n  });\n}\n/**\r\n * Fetches dynamic config from backend.\r\n * @param app Firebase app to fetch config for.\r\n */\n\n\nasync function fetchDynamicConfig(appFields) {\n  var _a;\n\n  const {\n    appId,\n    apiKey\n  } = appFields;\n  const request = {\n    method: 'GET',\n    headers: getHeaders(apiKey)\n  };\n  const appUrl = DYNAMIC_CONFIG_URL.replace('{app-id}', appId);\n  const response = await fetch(appUrl, request);\n\n  if (response.status !== 200 && response.status !== 304) {\n    let errorMessage = '';\n\n    try {\n      // Try to get any error message text from server response.\n      const jsonResponse = await response.json();\n\n      if ((_a = jsonResponse.error) === null || _a === void 0 ? void 0 : _a.message) {\n        errorMessage = jsonResponse.error.message;\n      }\n    } catch (_ignored) {}\n\n    throw ERROR_FACTORY.create(\"config-fetch-failed\"\n    /* CONFIG_FETCH_FAILED */\n    , {\n      httpStatus: response.status,\n      responseMessage: errorMessage\n    });\n  }\n\n  return response.json();\n}\n/**\r\n * Fetches dynamic config from backend, retrying if failed.\r\n * @param app Firebase app to fetch config for.\r\n */\n\n\nasync function fetchDynamicConfigWithRetry(app) {\n  let retryData = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultRetryData;\n  let timeoutMillis = arguments.length > 2 ? arguments[2] : undefined;\n  const {\n    appId,\n    apiKey,\n    measurementId\n  } = app.options;\n\n  if (!appId) {\n    throw ERROR_FACTORY.create(\"no-app-id\"\n    /* NO_APP_ID */\n    );\n  }\n\n  if (!apiKey) {\n    if (measurementId) {\n      return {\n        measurementId,\n        appId\n      };\n    }\n\n    throw ERROR_FACTORY.create(\"no-api-key\"\n    /* NO_API_KEY */\n    );\n  }\n\n  const throttleMetadata = retryData.getThrottleMetadata(appId) || {\n    backoffCount: 0,\n    throttleEndTimeMillis: Date.now()\n  };\n  const signal = new AnalyticsAbortSignal();\n  setTimeout(async () => {\n    // Note a very low delay, eg < 10ms, can elapse before listeners are initialized.\n    signal.abort();\n  }, timeoutMillis !== undefined ? timeoutMillis : FETCH_TIMEOUT_MILLIS);\n  return attemptFetchDynamicConfigWithRetry({\n    appId,\n    apiKey,\n    measurementId\n  }, throttleMetadata, signal, retryData);\n}\n/**\r\n * Runs one retry attempt.\r\n * @param appFields Necessary app config fields.\r\n * @param throttleMetadata Ongoing metadata to determine throttling times.\r\n * @param signal Abort signal.\r\n */\n\n\nasync function attemptFetchDynamicConfigWithRetry(appFields, _ref, signal) {\n  let {\n    throttleEndTimeMillis,\n    backoffCount\n  } = _ref;\n  let retryData = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : defaultRetryData;\n  const {\n    appId,\n    measurementId\n  } = appFields; // Starts with a (potentially zero) timeout to support resumption from stored state.\n  // Ensures the throttle end time is honored if the last attempt timed out.\n  // Note the SDK will never make a request if the fetch timeout expires at this point.\n\n  try {\n    await setAbortableTimeout(signal, throttleEndTimeMillis);\n  } catch (e) {\n    if (measurementId) {\n      logger.warn(`Timed out fetching this Firebase app's measurement ID from the server.` + ` Falling back to the measurement ID ${measurementId}` + ` provided in the \"measurementId\" field in the local Firebase config. [${e.message}]`);\n      return {\n        appId,\n        measurementId\n      };\n    }\n\n    throw e;\n  }\n\n  try {\n    const response = await fetchDynamicConfig(appFields); // Note the SDK only clears throttle state if response is success or non-retriable.\n\n    retryData.deleteThrottleMetadata(appId);\n    return response;\n  } catch (e) {\n    if (!isRetriableError(e)) {\n      retryData.deleteThrottleMetadata(appId);\n\n      if (measurementId) {\n        logger.warn(`Failed to fetch this Firebase app's measurement ID from the server.` + ` Falling back to the measurement ID ${measurementId}` + ` provided in the \"measurementId\" field in the local Firebase config. [${e.message}]`);\n        return {\n          appId,\n          measurementId\n        };\n      } else {\n        throw e;\n      }\n    }\n\n    const backoffMillis = Number(e.customData.httpStatus) === 503 ? calculateBackoffMillis(backoffCount, retryData.intervalMillis, LONG_RETRY_FACTOR) : calculateBackoffMillis(backoffCount, retryData.intervalMillis); // Increments backoff state.\n\n    const throttleMetadata = {\n      throttleEndTimeMillis: Date.now() + backoffMillis,\n      backoffCount: backoffCount + 1\n    }; // Persists state.\n\n    retryData.setThrottleMetadata(appId, throttleMetadata);\n    logger.debug(`Calling attemptFetch again in ${backoffMillis} millis`);\n    return attemptFetchDynamicConfigWithRetry(appFields, throttleMetadata, signal, retryData);\n  }\n}\n/**\r\n * Supports waiting on a backoff by:\r\n *\r\n * <ul>\r\n *   <li>Promisifying setTimeout, so we can set a timeout in our Promise chain</li>\r\n *   <li>Listening on a signal bus for abort events, just like the Fetch API</li>\r\n *   <li>Failing in the same way the Fetch API fails, so timing out a live request and a throttled\r\n *       request appear the same.</li>\r\n * </ul>\r\n *\r\n * <p>Visible for testing.\r\n */\n\n\nfunction setAbortableTimeout(signal, throttleEndTimeMillis) {\n  return new Promise((resolve, reject) => {\n    // Derives backoff from given end time, normalizing negative numbers to zero.\n    const backoffMillis = Math.max(throttleEndTimeMillis - Date.now(), 0);\n    const timeout = setTimeout(resolve, backoffMillis); // Adds listener, rather than sets onabort, because signal is a shared object.\n\n    signal.addEventListener(() => {\n      clearTimeout(timeout); // If the request completes before this timeout, the rejection has no effect.\n\n      reject(ERROR_FACTORY.create(\"fetch-throttle\"\n      /* FETCH_THROTTLE */\n      , {\n        throttleEndTimeMillis\n      }));\n    });\n  });\n}\n/**\r\n * Returns true if the {@link Error} indicates a fetch request may succeed later.\r\n */\n\n\nfunction isRetriableError(e) {\n  if (!(e instanceof FirebaseError) || !e.customData) {\n    return false;\n  } // Uses string index defined by ErrorData, which FirebaseError implements.\n\n\n  const httpStatus = Number(e.customData['httpStatus']);\n  return httpStatus === 429 || httpStatus === 500 || httpStatus === 503 || httpStatus === 504;\n}\n/**\r\n * Shims a minimal AbortSignal (copied from Remote Config).\r\n *\r\n * <p>AbortController's AbortSignal conveniently decouples fetch timeout logic from other aspects\r\n * of networking, such as retries. Firebase doesn't use AbortController enough to justify a\r\n * polyfill recommendation, like we do with the Fetch API, but this minimal shim can easily be\r\n * swapped out if/when we do.\r\n */\n\n\nclass AnalyticsAbortSignal {\n  constructor() {\n    this.listeners = [];\n  }\n\n  addEventListener(listener) {\n    this.listeners.push(listener);\n  }\n\n  abort() {\n    this.listeners.forEach(listener => listener());\n  }\n\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nasync function validateIndexedDB() {\n  if (!isIndexedDBAvailable()) {\n    logger.warn(ERROR_FACTORY.create(\"indexeddb-unavailable\"\n    /* INDEXEDDB_UNAVAILABLE */\n    , {\n      errorInfo: 'IndexedDB is not available in this environment.'\n    }).message);\n    return false;\n  } else {\n    try {\n      await validateIndexedDBOpenable();\n    } catch (e) {\n      logger.warn(ERROR_FACTORY.create(\"indexeddb-unavailable\"\n      /* INDEXEDDB_UNAVAILABLE */\n      , {\n        errorInfo: e\n      }).message);\n      return false;\n    }\n  }\n\n  return true;\n}\n/**\r\n * Initialize the analytics instance in gtag.js by calling config command with fid.\r\n *\r\n * NOTE: We combine analytics initialization and setting fid together because we want fid to be\r\n * part of the `page_view` event that's sent during the initialization\r\n * @param app Firebase app\r\n * @param gtagCore The gtag function that's not wrapped.\r\n * @param dynamicConfigPromisesList Array of all dynamic config promises.\r\n * @param measurementIdToAppId Maps measurementID to appID.\r\n * @param installations _FirebaseInstallationsInternal instance.\r\n *\r\n * @returns Measurement ID.\r\n */\n\n\nasync function _initializeAnalytics(app, dynamicConfigPromisesList, measurementIdToAppId, installations, gtagCore, dataLayerName, options) {\n  var _a;\n\n  const dynamicConfigPromise = fetchDynamicConfigWithRetry(app); // Once fetched, map measurementIds to appId, for ease of lookup in wrapped gtag function.\n\n  dynamicConfigPromise.then(config => {\n    measurementIdToAppId[config.measurementId] = config.appId;\n\n    if (app.options.measurementId && config.measurementId !== app.options.measurementId) {\n      logger.warn(`The measurement ID in the local Firebase config (${app.options.measurementId})` + ` does not match the measurement ID fetched from the server (${config.measurementId}).` + ` To ensure analytics events are always sent to the correct Analytics property,` + ` update the` + ` measurement ID field in the local config or remove it from the local config.`);\n    }\n  }).catch(e => logger.error(e)); // Add to list to track state of all dynamic config promises.\n\n  dynamicConfigPromisesList.push(dynamicConfigPromise);\n  const fidPromise = validateIndexedDB().then(envIsValid => {\n    if (envIsValid) {\n      return installations.getId();\n    } else {\n      return undefined;\n    }\n  });\n  const [dynamicConfig, fid] = await Promise.all([dynamicConfigPromise, fidPromise]); // Detect if user has already put the gtag <script> tag on this page.\n\n  if (!findGtagScriptOnPage()) {\n    insertScriptTag(dataLayerName, dynamicConfig.measurementId);\n  } // This command initializes gtag.js and only needs to be called once for the entire web app,\n  // but since it is idempotent, we can call it multiple times.\n  // We keep it together with other initialization logic for better code structure.\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\n  gtagCore('js', new Date()); // User config added first. We don't want users to accidentally overwrite\n  // base Firebase config properties.\n\n  const configProperties = (_a = options === null || options === void 0 ? void 0 : options.config) !== null && _a !== void 0 ? _a : {}; // guard against developers accidentally setting properties with prefix `firebase_`\n\n  configProperties[ORIGIN_KEY] = 'firebase';\n  configProperties.update = true;\n\n  if (fid != null) {\n    configProperties[GA_FID_KEY] = fid;\n  } // It should be the first config command called on this GA-ID\n  // Initialize this GA-ID and set FID on it using the gtag config API.\n  // Note: This will trigger a page_view event unless 'send_page_view' is set to false in\n  // `configProperties`.\n\n\n  gtagCore(\"config\"\n  /* CONFIG */\n  , dynamicConfig.measurementId, configProperties);\n  return dynamicConfig.measurementId;\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Analytics Service class.\r\n */\n\n\nclass AnalyticsService {\n  constructor(app) {\n    this.app = app;\n  }\n\n  _delete() {\n    delete initializationPromisesMap[this.app.options.appId];\n    return Promise.resolve();\n  }\n\n}\n/**\r\n * Maps appId to full initialization promise. Wrapped gtag calls must wait on\r\n * all or some of these, depending on the call's `send_to` param and the status\r\n * of the dynamic config fetches (see below).\r\n */\n\n\nlet initializationPromisesMap = {};\n/**\r\n * List of dynamic config fetch promises. In certain cases, wrapped gtag calls\r\n * wait on all these to be complete in order to determine if it can selectively\r\n * wait for only certain initialization (FID) promises or if it must wait for all.\r\n */\n\nlet dynamicConfigPromisesList = [];\n/**\r\n * Maps fetched measurementIds to appId. Populated when the app's dynamic config\r\n * fetch completes. If already populated, gtag config calls can use this to\r\n * selectively wait for only this app's initialization promise (FID) instead of all\r\n * initialization promises.\r\n */\n\nconst measurementIdToAppId = {};\n/**\r\n * Name for window global data layer array used by GA: defaults to 'dataLayer'.\r\n */\n\nlet dataLayerName = 'dataLayer';\n/**\r\n * Name for window global gtag function used by GA: defaults to 'gtag'.\r\n */\n\nlet gtagName = 'gtag';\n/**\r\n * Reproduction of standard gtag function or reference to existing\r\n * gtag function on window object.\r\n */\n\nlet gtagCoreFunction;\n/**\r\n * Wrapper around gtag function that ensures FID is sent with all\r\n * relevant event and config calls.\r\n */\n\nlet wrappedGtagFunction;\n/**\r\n * Flag to ensure page initialization steps (creation or wrapping of\r\n * dataLayer and gtag script) are only run once per page load.\r\n */\n\nlet globalInitDone = false;\n/**\r\n * Configures Firebase Analytics to use custom `gtag` or `dataLayer` names.\r\n * Intended to be used if `gtag.js` script has been installed on\r\n * this page independently of Firebase Analytics, and is using non-default\r\n * names for either the `gtag` function or for `dataLayer`.\r\n * Must be called before calling `getAnalytics()` or it won't\r\n * have any effect.\r\n *\r\n * @public\r\n *\r\n * @param options - Custom gtag and dataLayer names.\r\n */\n\nfunction settings(options) {\n  if (globalInitDone) {\n    throw ERROR_FACTORY.create(\"already-initialized\"\n    /* ALREADY_INITIALIZED */\n    );\n  }\n\n  if (options.dataLayerName) {\n    dataLayerName = options.dataLayerName;\n  }\n\n  if (options.gtagName) {\n    gtagName = options.gtagName;\n  }\n}\n/**\r\n * Returns true if no environment mismatch is found.\r\n * If environment mismatches are found, throws an INVALID_ANALYTICS_CONTEXT\r\n * error that also lists details for each mismatch found.\r\n */\n\n\nfunction warnOnBrowserContextMismatch() {\n  const mismatchedEnvMessages = [];\n\n  if (isBrowserExtension()) {\n    mismatchedEnvMessages.push('This is a browser extension environment.');\n  }\n\n  if (!areCookiesEnabled()) {\n    mismatchedEnvMessages.push('Cookies are not available.');\n  }\n\n  if (mismatchedEnvMessages.length > 0) {\n    const details = mismatchedEnvMessages.map((message, index) => `(${index + 1}) ${message}`).join(' ');\n    const err = ERROR_FACTORY.create(\"invalid-analytics-context\"\n    /* INVALID_ANALYTICS_CONTEXT */\n    , {\n      errorInfo: details\n    });\n    logger.warn(err.message);\n  }\n}\n/**\r\n * Analytics instance factory.\r\n * @internal\r\n */\n\n\nfunction factory(app, installations, options) {\n  warnOnBrowserContextMismatch();\n  const appId = app.options.appId;\n\n  if (!appId) {\n    throw ERROR_FACTORY.create(\"no-app-id\"\n    /* NO_APP_ID */\n    );\n  }\n\n  if (!app.options.apiKey) {\n    if (app.options.measurementId) {\n      logger.warn(`The \"apiKey\" field is empty in the local Firebase config. This is needed to fetch the latest` + ` measurement ID for this Firebase app. Falling back to the measurement ID ${app.options.measurementId}` + ` provided in the \"measurementId\" field in the local Firebase config.`);\n    } else {\n      throw ERROR_FACTORY.create(\"no-api-key\"\n      /* NO_API_KEY */\n      );\n    }\n  }\n\n  if (initializationPromisesMap[appId] != null) {\n    throw ERROR_FACTORY.create(\"already-exists\"\n    /* ALREADY_EXISTS */\n    , {\n      id: appId\n    });\n  }\n\n  if (!globalInitDone) {\n    // Steps here should only be done once per page: creation or wrapping\n    // of dataLayer and global gtag function.\n    getOrCreateDataLayer(dataLayerName);\n    const {\n      wrappedGtag,\n      gtagCore\n    } = wrapOrCreateGtag(initializationPromisesMap, dynamicConfigPromisesList, measurementIdToAppId, dataLayerName, gtagName);\n    wrappedGtagFunction = wrappedGtag;\n    gtagCoreFunction = gtagCore;\n    globalInitDone = true;\n  } // Async but non-blocking.\n  // This map reflects the completion state of all promises for each appId.\n\n\n  initializationPromisesMap[appId] = _initializeAnalytics(app, dynamicConfigPromisesList, measurementIdToAppId, installations, gtagCoreFunction, dataLayerName, options);\n  const analyticsInstance = new AnalyticsService(app);\n  return analyticsInstance;\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Logs an analytics event through the Firebase SDK.\r\n *\r\n * @param gtagFunction Wrapped gtag function that waits for fid to be set before sending an event\r\n * @param eventName Google Analytics event name, choose from standard list or use a custom string.\r\n * @param eventParams Analytics event parameters.\r\n */\n\n\nasync function logEvent$1(gtagFunction, initializationPromise, eventName, eventParams, options) {\n  if (options && options.global) {\n    gtagFunction(\"event\"\n    /* EVENT */\n    , eventName, eventParams);\n    return;\n  } else {\n    const measurementId = await initializationPromise;\n    const params = Object.assign(Object.assign({}, eventParams), {\n      'send_to': measurementId\n    });\n    gtagFunction(\"event\"\n    /* EVENT */\n    , eventName, params);\n  }\n}\n/**\r\n * Set screen_name parameter for this Google Analytics ID.\r\n *\r\n * @param gtagFunction Wrapped gtag function that waits for fid to be set before sending an event\r\n * @param screenName Screen name string to set.\r\n */\n\n\nasync function setCurrentScreen$1(gtagFunction, initializationPromise, screenName, options) {\n  if (options && options.global) {\n    gtagFunction(\"set\"\n    /* SET */\n    , {\n      'screen_name': screenName\n    });\n    return Promise.resolve();\n  } else {\n    const measurementId = await initializationPromise;\n    gtagFunction(\"config\"\n    /* CONFIG */\n    , measurementId, {\n      update: true,\n      'screen_name': screenName\n    });\n  }\n}\n/**\r\n * Set user_id parameter for this Google Analytics ID.\r\n *\r\n * @param gtagFunction Wrapped gtag function that waits for fid to be set before sending an event\r\n * @param id User ID string to set\r\n */\n\n\nasync function setUserId$1(gtagFunction, initializationPromise, id, options) {\n  if (options && options.global) {\n    gtagFunction(\"set\"\n    /* SET */\n    , {\n      'user_id': id\n    });\n    return Promise.resolve();\n  } else {\n    const measurementId = await initializationPromise;\n    gtagFunction(\"config\"\n    /* CONFIG */\n    , measurementId, {\n      update: true,\n      'user_id': id\n    });\n  }\n}\n/**\r\n * Set all other user properties other than user_id and screen_name.\r\n *\r\n * @param gtagFunction Wrapped gtag function that waits for fid to be set before sending an event\r\n * @param properties Map of user properties to set\r\n */\n\n\nasync function setUserProperties$1(gtagFunction, initializationPromise, properties, options) {\n  if (options && options.global) {\n    const flatProperties = {};\n\n    for (const key of Object.keys(properties)) {\n      // use dot notation for merge behavior in gtag.js\n      flatProperties[`user_properties.${key}`] = properties[key];\n    }\n\n    gtagFunction(\"set\"\n    /* SET */\n    , flatProperties);\n    return Promise.resolve();\n  } else {\n    const measurementId = await initializationPromise;\n    gtagFunction(\"config\"\n    /* CONFIG */\n    , measurementId, {\n      update: true,\n      'user_properties': properties\n    });\n  }\n}\n/**\r\n * Set whether collection is enabled for this ID.\r\n *\r\n * @param enabled If true, collection is enabled for this ID.\r\n */\n\n\nasync function setAnalyticsCollectionEnabled$1(initializationPromise, enabled) {\n  const measurementId = await initializationPromise;\n  window[`ga-disable-${measurementId}`] = !enabled;\n}\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\n/**\r\n * Returns an {@link Analytics} instance for the given app.\r\n *\r\n * @public\r\n *\r\n * @param app - The {@link @firebase/app#FirebaseApp} to use.\r\n */\n\n\nfunction getAnalytics() {\n  let app = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : getApp();\n  app = getModularInstance(app); // Dependencies\n\n  const analyticsProvider = _getProvider(app, ANALYTICS_TYPE);\n\n  if (analyticsProvider.isInitialized()) {\n    return analyticsProvider.getImmediate();\n  }\n\n  return initializeAnalytics(app);\n}\n/**\r\n * Returns an {@link Analytics} instance for the given app.\r\n *\r\n * @public\r\n *\r\n * @param app - The {@link @firebase/app#FirebaseApp} to use.\r\n */\n\n\nfunction initializeAnalytics(app) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  // Dependencies\n  const analyticsProvider = _getProvider(app, ANALYTICS_TYPE);\n\n  if (analyticsProvider.isInitialized()) {\n    const existingInstance = analyticsProvider.getImmediate();\n\n    if (deepEqual(options, analyticsProvider.getOptions())) {\n      return existingInstance;\n    } else {\n      throw ERROR_FACTORY.create(\"already-initialized\"\n      /* ALREADY_INITIALIZED */\n      );\n    }\n  }\n\n  const analyticsInstance = analyticsProvider.initialize({\n    options\n  });\n  return analyticsInstance;\n}\n/**\r\n * This is a public static method provided to users that wraps four different checks:\r\n *\r\n * 1. Check if it's not a browser extension environment.\r\n * 2. Check if cookies are enabled in current browser.\r\n * 3. Check if IndexedDB is supported by the browser environment.\r\n * 4. Check if the current browser context is valid for using `IndexedDB.open()`.\r\n *\r\n * @public\r\n *\r\n */\n\n\nasync function isSupported() {\n  if (isBrowserExtension()) {\n    return false;\n  }\n\n  if (!areCookiesEnabled()) {\n    return false;\n  }\n\n  if (!isIndexedDBAvailable()) {\n    return false;\n  }\n\n  try {\n    const isDBOpenable = await validateIndexedDBOpenable();\n    return isDBOpenable;\n  } catch (error) {\n    return false;\n  }\n}\n/**\r\n * Use gtag `config` command to set `screen_name`.\r\n *\r\n * @public\r\n *\r\n * @param analyticsInstance - The {@link Analytics} instance.\r\n * @param screenName - Screen name to set.\r\n */\n\n\nfunction setCurrentScreen(analyticsInstance, screenName, options) {\n  analyticsInstance = getModularInstance(analyticsInstance);\n  setCurrentScreen$1(wrappedGtagFunction, initializationPromisesMap[analyticsInstance.app.options.appId], screenName, options).catch(e => logger.error(e));\n}\n/**\r\n * Use gtag `config` command to set `user_id`.\r\n *\r\n * @public\r\n *\r\n * @param analyticsInstance - The {@link Analytics} instance.\r\n * @param id - User ID to set.\r\n */\n\n\nfunction setUserId(analyticsInstance, id, options) {\n  analyticsInstance = getModularInstance(analyticsInstance);\n  setUserId$1(wrappedGtagFunction, initializationPromisesMap[analyticsInstance.app.options.appId], id, options).catch(e => logger.error(e));\n}\n/**\r\n * Use gtag `config` command to set all params specified.\r\n *\r\n * @public\r\n */\n\n\nfunction setUserProperties(analyticsInstance, properties, options) {\n  analyticsInstance = getModularInstance(analyticsInstance);\n  setUserProperties$1(wrappedGtagFunction, initializationPromisesMap[analyticsInstance.app.options.appId], properties, options).catch(e => logger.error(e));\n}\n/**\r\n * Sets whether Google Analytics collection is enabled for this app on this device.\r\n * Sets global `window['ga-disable-analyticsId'] = true;`\r\n *\r\n * @public\r\n *\r\n * @param analyticsInstance - The {@link Analytics} instance.\r\n * @param enabled - If true, enables collection, if false, disables it.\r\n */\n\n\nfunction setAnalyticsCollectionEnabled(analyticsInstance, enabled) {\n  analyticsInstance = getModularInstance(analyticsInstance);\n  setAnalyticsCollectionEnabled$1(initializationPromisesMap[analyticsInstance.app.options.appId], enabled).catch(e => logger.error(e));\n}\n/**\r\n * Sends a Google Analytics event with given `eventParams`. This method\r\n * automatically associates this logged event with this Firebase web\r\n * app instance on this device.\r\n * List of official event parameters can be found in the gtag.js\r\n * reference documentation:\r\n * {@link https://developers.google.com/gtagjs/reference/ga4-events\r\n * | the GA4 reference documentation}.\r\n *\r\n * @public\r\n */\n\n\nfunction logEvent(analyticsInstance, eventName, eventParams, options) {\n  analyticsInstance = getModularInstance(analyticsInstance);\n  logEvent$1(wrappedGtagFunction, initializationPromisesMap[analyticsInstance.app.options.appId], eventName, eventParams, options).catch(e => logger.error(e));\n}\n\nconst name = \"@firebase/analytics\";\nconst version = \"0.7.9\";\n/**\r\n * Firebase Analytics\r\n *\r\n * @packageDocumentation\r\n */\n\nfunction registerAnalytics() {\n  _registerComponent(new Component(ANALYTICS_TYPE, (container, _ref2) => {\n    let {\n      options: analyticsOptions\n    } = _ref2;\n    // getImmediate for FirebaseApp will always succeed\n    const app = container.getProvider('app').getImmediate();\n    const installations = container.getProvider('installations-internal').getImmediate();\n    return factory(app, installations, analyticsOptions);\n  }, \"PUBLIC\"\n  /* PUBLIC */\n  ));\n\n  _registerComponent(new Component('analytics-internal', internalFactory, \"PRIVATE\"\n  /* PRIVATE */\n  ));\n\n  registerVersion(name, version); // BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation\n\n  registerVersion(name, version, 'esm2017');\n\n  function internalFactory(container) {\n    try {\n      const analytics = container.getProvider(ANALYTICS_TYPE).getImmediate();\n      return {\n        logEvent: (eventName, eventParams, options) => logEvent(analytics, eventName, eventParams, options)\n      };\n    } catch (e) {\n      throw ERROR_FACTORY.create(\"interop-component-reg-failed\"\n      /* INTEROP_COMPONENT_REG_FAILED */\n      , {\n        reason: e\n      });\n    }\n  }\n}\n\nregisterAnalytics();\nexport { getAnalytics, initializeAnalytics, isSupported, logEvent, setAnalyticsCollectionEnabled, setCurrentScreen, setUserId, setUserProperties, settings };","map":{"version":3,"mappings":"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","names":["ANALYTICS_TYPE","GA_FID_KEY","ORIGIN_KEY","FETCH_TIMEOUT_MILLIS","DYNAMIC_CONFIG_URL","GTAG_URL","logger","Logger","promiseAllSettled","promises","Promise","all","map","promise","catch","e","insertScriptTag","dataLayerName","measurementId","script","document","createElement","src","async","head","appendChild","getOrCreateDataLayer","dataLayer","Array","isArray","window","gtagOnConfig","gtagCore","initializationPromisesMap","dynamicConfigPromisesList","measurementIdToAppId","gtagParams","correspondingAppId","dynamicConfigResults","foundConfig","find","config","appId","error","gtagOnEvent","initializationPromisesToWaitFor","gaSendToList","sendToId","initializationPromise","push","length","Object","values","wrapGtag","gtagWrapper","command","idOrNameOrParams","wrapOrCreateGtag","gtagFunctionName","_args","arguments","wrappedGtag","findGtagScriptOnPage","scriptTags","getElementsByTagName","tag","includes","ERRORS","ERROR_FACTORY","ErrorFactory","LONG_RETRY_FACTOR","BASE_INTERVAL_MILLIS","RetryData","constructor","throttleMetadata","intervalMillis","getThrottleMetadata","setThrottleMetadata","metadata","deleteThrottleMetadata","defaultRetryData","getHeaders","apiKey","Headers","Accept","fetchDynamicConfig","appFields","request","method","headers","appUrl","replace","response","fetch","status","errorMessage","jsonResponse","json","_a","message","_ignored","create","httpStatus","responseMessage","fetchDynamicConfigWithRetry","app","retryData","timeoutMillis","options","backoffCount","throttleEndTimeMillis","Date","now","signal","AnalyticsAbortSignal","setTimeout","abort","undefined","attemptFetchDynamicConfigWithRetry","setAbortableTimeout","warn","isRetriableError","backoffMillis","Number","customData","calculateBackoffMillis","debug","resolve","reject","Math","max","timeout","addEventListener","clearTimeout","FirebaseError","listener","listeners","forEach","validateIndexedDB","isIndexedDBAvailable","errorInfo","validateIndexedDBOpenable","_initializeAnalytics","installations","dynamicConfigPromise","then","fidPromise","envIsValid","getId","dynamicConfig","fid","configProperties","update","AnalyticsService","_delete","gtagName","gtagCoreFunction","wrappedGtagFunction","globalInitDone","settings","warnOnBrowserContextMismatch","mismatchedEnvMessages","isBrowserExtension","areCookiesEnabled","details","index","join","err","factory","id","analyticsInstance","logEvent","gtagFunction","eventName","eventParams","global","params","setCurrentScreen","screenName","setUserId","setUserProperties","properties","flatProperties","key","keys","setAnalyticsCollectionEnabled","enabled","getAnalytics","getApp","getModularInstance","analyticsProvider","_getProvider","isInitialized","getImmediate","initializeAnalytics","existingInstance","deepEqual","getOptions","initialize","isSupported","isDBOpenable","internalSetCurrentScreen","internalSetUserId","internalSetUserProperties","internalSetAnalyticsCollectionEnabled","internalLogEvent","registerAnalytics","_registerComponent","Component","container","analyticsOptions","getProvider","internalFactory","registerVersion","name","version","analytics","reason"],"sources":["/home/fullzer4/Documents/GitHub/ToDoList/todolist/node_modules/@firebase/analytics/src/constants.ts","/home/fullzer4/Documents/GitHub/ToDoList/todolist/node_modules/@firebase/analytics/src/logger.ts","/home/fullzer4/Documents/GitHub/ToDoList/todolist/node_modules/@firebase/analytics/src/helpers.ts","/home/fullzer4/Documents/GitHub/ToDoList/todolist/node_modules/@firebase/analytics/src/errors.ts","/home/fullzer4/Documents/GitHub/ToDoList/todolist/node_modules/@firebase/analytics/src/get-config.ts","/home/fullzer4/Documents/GitHub/ToDoList/todolist/node_modules/@firebase/analytics/src/initialize-analytics.ts","/home/fullzer4/Documents/GitHub/ToDoList/todolist/node_modules/@firebase/analytics/src/factory.ts","/home/fullzer4/Documents/GitHub/ToDoList/todolist/node_modules/@firebase/analytics/src/functions.ts","/home/fullzer4/Documents/GitHub/ToDoList/todolist/node_modules/@firebase/analytics/src/api.ts","/home/fullzer4/Documents/GitHub/ToDoList/todolist/node_modules/@firebase/analytics/src/index.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Type constant for Firebase Analytics.\n */\nexport const ANALYTICS_TYPE = 'analytics';\n\n// Key to attach FID to in gtag params.\nexport const GA_FID_KEY = 'firebase_id';\nexport const ORIGIN_KEY = 'origin';\n\nexport const FETCH_TIMEOUT_MILLIS = 60 * 1000;\n\nexport const DYNAMIC_CONFIG_URL =\n  'https://firebase.googleapis.com/v1alpha/projects/-/apps/{app-id}/webConfig';\n\nexport const GTAG_URL = 'https://www.googletagmanager.com/gtag/js';\n\nexport const enum GtagCommand {\n  EVENT = 'event',\n  SET = 'set',\n  CONFIG = 'config'\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Logger } from '@firebase/logger';\n\nexport const logger = new Logger('@firebase/analytics');\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CustomParams, ControlParams, EventParams } from './public-types';\nimport { DynamicConfig, DataLayer, Gtag, MinimalDynamicConfig } from './types';\nimport { GtagCommand, GTAG_URL } from './constants';\nimport { logger } from './logger';\n\n/**\n * Makeshift polyfill for Promise.allSettled(). Resolves when all promises\n * have either resolved or rejected.\n *\n * @param promises Array of promises to wait for.\n */\nexport function promiseAllSettled<T>(\n  promises: Array<Promise<T>>\n): Promise<T[]> {\n  return Promise.all(promises.map(promise => promise.catch(e => e)));\n}\n\n/**\n * Inserts gtag script tag into the page to asynchronously download gtag.\n * @param dataLayerName Name of datalayer (most often the default, \"_dataLayer\").\n */\nexport function insertScriptTag(\n  dataLayerName: string,\n  measurementId: string\n): void {\n  const script = document.createElement('script');\n  // We are not providing an analyticsId in the URL because it would trigger a `page_view`\n  // without fid. We will initialize ga-id using gtag (config) command together with fid.\n  script.src = `${GTAG_URL}?l=${dataLayerName}&id=${measurementId}`;\n  script.async = true;\n  document.head.appendChild(script);\n}\n\n/**\n * Get reference to, or create, global datalayer.\n * @param dataLayerName Name of datalayer (most often the default, \"_dataLayer\").\n */\nexport function getOrCreateDataLayer(dataLayerName: string): DataLayer {\n  // Check for existing dataLayer and create if needed.\n  let dataLayer: DataLayer = [];\n  if (Array.isArray(window[dataLayerName])) {\n    dataLayer = window[dataLayerName] as DataLayer;\n  } else {\n    window[dataLayerName] = dataLayer;\n  }\n  return dataLayer;\n}\n\n/**\n * Wrapped gtag logic when gtag is called with 'config' command.\n *\n * @param gtagCore Basic gtag function that just appends to dataLayer.\n * @param initializationPromisesMap Map of appIds to their initialization promises.\n * @param dynamicConfigPromisesList Array of dynamic config fetch promises.\n * @param measurementIdToAppId Map of GA measurementIDs to corresponding Firebase appId.\n * @param measurementId GA Measurement ID to set config for.\n * @param gtagParams Gtag config params to set.\n */\nasync function gtagOnConfig(\n  gtagCore: Gtag,\n  initializationPromisesMap: { [appId: string]: Promise<string> },\n  dynamicConfigPromisesList: Array<\n    Promise<DynamicConfig | MinimalDynamicConfig>\n  >,\n  measurementIdToAppId: { [measurementId: string]: string },\n  measurementId: string,\n  gtagParams?: ControlParams & EventParams & CustomParams\n): Promise<void> {\n  // If config is already fetched, we know the appId and can use it to look up what FID promise we\n  /// are waiting for, and wait only on that one.\n  const correspondingAppId = measurementIdToAppId[measurementId as string];\n  try {\n    if (correspondingAppId) {\n      await initializationPromisesMap[correspondingAppId];\n    } else {\n      // If config is not fetched yet, wait for all configs (we don't know which one we need) and\n      // find the appId (if any) corresponding to this measurementId. If there is one, wait on\n      // that appId's initialization promise. If there is none, promise resolves and gtag\n      // call goes through.\n      const dynamicConfigResults = await promiseAllSettled(\n        dynamicConfigPromisesList\n      );\n      const foundConfig = dynamicConfigResults.find(\n        config => config.measurementId === measurementId\n      );\n      if (foundConfig) {\n        await initializationPromisesMap[foundConfig.appId];\n      }\n    }\n  } catch (e) {\n    logger.error(e);\n  }\n  gtagCore(GtagCommand.CONFIG, measurementId, gtagParams);\n}\n\n/**\n * Wrapped gtag logic when gtag is called with 'event' command.\n *\n * @param gtagCore Basic gtag function that just appends to dataLayer.\n * @param initializationPromisesMap Map of appIds to their initialization promises.\n * @param dynamicConfigPromisesList Array of dynamic config fetch promises.\n * @param measurementId GA Measurement ID to log event to.\n * @param gtagParams Params to log with this event.\n */\nasync function gtagOnEvent(\n  gtagCore: Gtag,\n  initializationPromisesMap: { [appId: string]: Promise<string> },\n  dynamicConfigPromisesList: Array<\n    Promise<DynamicConfig | MinimalDynamicConfig>\n  >,\n  measurementId: string,\n  gtagParams?: ControlParams & EventParams & CustomParams\n): Promise<void> {\n  try {\n    let initializationPromisesToWaitFor: Array<Promise<string>> = [];\n\n    // If there's a 'send_to' param, check if any ID specified matches\n    // an initializeIds() promise we are waiting for.\n    if (gtagParams && gtagParams['send_to']) {\n      let gaSendToList: string | string[] = gtagParams['send_to'];\n      // Make it an array if is isn't, so it can be dealt with the same way.\n      if (!Array.isArray(gaSendToList)) {\n        gaSendToList = [gaSendToList];\n      }\n      // Checking 'send_to' fields requires having all measurement ID results back from\n      // the dynamic config fetch.\n      const dynamicConfigResults = await promiseAllSettled(\n        dynamicConfigPromisesList\n      );\n      for (const sendToId of gaSendToList) {\n        // Any fetched dynamic measurement ID that matches this 'send_to' ID\n        const foundConfig = dynamicConfigResults.find(\n          config => config.measurementId === sendToId\n        );\n        const initializationPromise =\n          foundConfig && initializationPromisesMap[foundConfig.appId];\n        if (initializationPromise) {\n          initializationPromisesToWaitFor.push(initializationPromise);\n        } else {\n          // Found an item in 'send_to' that is not associated\n          // directly with an FID, possibly a group.  Empty this array,\n          // exit the loop early, and let it get populated below.\n          initializationPromisesToWaitFor = [];\n          break;\n        }\n      }\n    }\n\n    // This will be unpopulated if there was no 'send_to' field , or\n    // if not all entries in the 'send_to' field could be mapped to\n    // a FID. In these cases, wait on all pending initialization promises.\n    if (initializationPromisesToWaitFor.length === 0) {\n      initializationPromisesToWaitFor = Object.values(\n        initializationPromisesMap\n      );\n    }\n\n    // Run core gtag function with args after all relevant initialization\n    // promises have been resolved.\n    await Promise.all(initializationPromisesToWaitFor);\n    // Workaround for http://b/141370449 - third argument cannot be undefined.\n    gtagCore(GtagCommand.EVENT, measurementId, gtagParams || {});\n  } catch (e) {\n    logger.error(e);\n  }\n}\n\n/**\n * Wraps a standard gtag function with extra code to wait for completion of\n * relevant initialization promises before sending requests.\n *\n * @param gtagCore Basic gtag function that just appends to dataLayer.\n * @param initializationPromisesMap Map of appIds to their initialization promises.\n * @param dynamicConfigPromisesList Array of dynamic config fetch promises.\n * @param measurementIdToAppId Map of GA measurementIDs to corresponding Firebase appId.\n */\nfunction wrapGtag(\n  gtagCore: Gtag,\n  /**\n   * Allows wrapped gtag calls to wait on whichever intialization promises are required,\n   * depending on the contents of the gtag params' `send_to` field, if any.\n   */\n  initializationPromisesMap: { [appId: string]: Promise<string> },\n  /**\n   * Wrapped gtag calls sometimes require all dynamic config fetches to have returned\n   * before determining what initialization promises (which include FIDs) to wait for.\n   */\n  dynamicConfigPromisesList: Array<\n    Promise<DynamicConfig | MinimalDynamicConfig>\n  >,\n  /**\n   * Wrapped gtag config calls can narrow down which initialization promise (with FID)\n   * to wait for if the measurementId is already fetched, by getting the corresponding appId,\n   * which is the key for the initialization promises map.\n   */\n  measurementIdToAppId: { [measurementId: string]: string }\n): Gtag {\n  /**\n   * Wrapper around gtag that ensures FID is sent with gtag calls.\n   * @param command Gtag command type.\n   * @param idOrNameOrParams Measurement ID if command is EVENT/CONFIG, params if command is SET.\n   * @param gtagParams Params if event is EVENT/CONFIG.\n   */\n  async function gtagWrapper(\n    command: 'config' | 'set' | 'event',\n    idOrNameOrParams: string | ControlParams,\n    gtagParams?: ControlParams & EventParams & CustomParams\n  ): Promise<void> {\n    try {\n      // If event, check that relevant initialization promises have completed.\n      if (command === GtagCommand.EVENT) {\n        // If EVENT, second arg must be measurementId.\n        await gtagOnEvent(\n          gtagCore,\n          initializationPromisesMap,\n          dynamicConfigPromisesList,\n          idOrNameOrParams as string,\n          gtagParams\n        );\n      } else if (command === GtagCommand.CONFIG) {\n        // If CONFIG, second arg must be measurementId.\n        await gtagOnConfig(\n          gtagCore,\n          initializationPromisesMap,\n          dynamicConfigPromisesList,\n          measurementIdToAppId,\n          idOrNameOrParams as string,\n          gtagParams\n        );\n      } else {\n        // If SET, second arg must be params.\n        gtagCore(GtagCommand.SET, idOrNameOrParams as CustomParams);\n      }\n    } catch (e) {\n      logger.error(e);\n    }\n  }\n  return gtagWrapper as Gtag;\n}\n\n/**\n * Creates global gtag function or wraps existing one if found.\n * This wrapped function attaches Firebase instance ID (FID) to gtag 'config' and\n * 'event' calls that belong to the GAID associated with this Firebase instance.\n *\n * @param initializationPromisesMap Map of appIds to their initialization promises.\n * @param dynamicConfigPromisesList Array of dynamic config fetch promises.\n * @param measurementIdToAppId Map of GA measurementIDs to corresponding Firebase appId.\n * @param dataLayerName Name of global GA datalayer array.\n * @param gtagFunctionName Name of global gtag function (\"gtag\" if not user-specified).\n */\nexport function wrapOrCreateGtag(\n  initializationPromisesMap: { [appId: string]: Promise<string> },\n  dynamicConfigPromisesList: Array<\n    Promise<DynamicConfig | MinimalDynamicConfig>\n  >,\n  measurementIdToAppId: { [measurementId: string]: string },\n  dataLayerName: string,\n  gtagFunctionName: string\n): {\n  gtagCore: Gtag;\n  wrappedGtag: Gtag;\n} {\n  // Create a basic core gtag function\n  let gtagCore: Gtag = function (..._args: unknown[]) {\n    // Must push IArguments object, not an array.\n    (window[dataLayerName] as DataLayer).push(arguments);\n  };\n\n  // Replace it with existing one if found\n  if (\n    window[gtagFunctionName] &&\n    typeof window[gtagFunctionName] === 'function'\n  ) {\n    // @ts-ignore\n    gtagCore = window[gtagFunctionName];\n  }\n\n  window[gtagFunctionName] = wrapGtag(\n    gtagCore,\n    initializationPromisesMap,\n    dynamicConfigPromisesList,\n    measurementIdToAppId\n  );\n\n  return {\n    gtagCore,\n    wrappedGtag: window[gtagFunctionName] as Gtag\n  };\n}\n\n/**\n * Returns first script tag in DOM matching our gtag url pattern.\n */\nexport function findGtagScriptOnPage(): HTMLScriptElement | null {\n  const scriptTags = window.document.getElementsByTagName('script');\n  for (const tag of Object.values(scriptTags)) {\n    if (tag.src && tag.src.includes(GTAG_URL)) {\n      return tag;\n    }\n  }\n  return null;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ErrorFactory, ErrorMap } from '@firebase/util';\n\nexport const enum AnalyticsError {\n  ALREADY_EXISTS = 'already-exists',\n  ALREADY_INITIALIZED = 'already-initialized',\n  ALREADY_INITIALIZED_SETTINGS = 'already-initialized-settings',\n  INTEROP_COMPONENT_REG_FAILED = 'interop-component-reg-failed',\n  INVALID_ANALYTICS_CONTEXT = 'invalid-analytics-context',\n  INDEXEDDB_UNAVAILABLE = 'indexeddb-unavailable',\n  FETCH_THROTTLE = 'fetch-throttle',\n  CONFIG_FETCH_FAILED = 'config-fetch-failed',\n  NO_API_KEY = 'no-api-key',\n  NO_APP_ID = 'no-app-id'\n}\n\nconst ERRORS: ErrorMap<AnalyticsError> = {\n  [AnalyticsError.ALREADY_EXISTS]:\n    'A Firebase Analytics instance with the appId {$id} ' +\n    ' already exists. ' +\n    'Only one Firebase Analytics instance can be created for each appId.',\n  [AnalyticsError.ALREADY_INITIALIZED]:\n    'initializeAnalytics() cannot be called again with different options than those ' +\n    'it was initially called with. It can be called again with the same options to ' +\n    'return the existing instance, or getAnalytics() can be used ' +\n    'to get a reference to the already-intialized instance.',\n  [AnalyticsError.ALREADY_INITIALIZED_SETTINGS]:\n    'Firebase Analytics has already been initialized.' +\n    'settings() must be called before initializing any Analytics instance' +\n    'or it will have no effect.',\n  [AnalyticsError.INTEROP_COMPONENT_REG_FAILED]:\n    'Firebase Analytics Interop Component failed to instantiate: {$reason}',\n  [AnalyticsError.INVALID_ANALYTICS_CONTEXT]:\n    'Firebase Analytics is not supported in this environment. ' +\n    'Wrap initialization of analytics in analytics.isSupported() ' +\n    'to prevent initialization in unsupported environments. Details: {$errorInfo}',\n  [AnalyticsError.INDEXEDDB_UNAVAILABLE]:\n    'IndexedDB unavailable or restricted in this environment. ' +\n    'Wrap initialization of analytics in analytics.isSupported() ' +\n    'to prevent initialization in unsupported environments. Details: {$errorInfo}',\n  [AnalyticsError.FETCH_THROTTLE]:\n    'The config fetch request timed out while in an exponential backoff state.' +\n    ' Unix timestamp in milliseconds when fetch request throttling ends: {$throttleEndTimeMillis}.',\n  [AnalyticsError.CONFIG_FETCH_FAILED]:\n    'Dynamic config fetch failed: [{$httpStatus}] {$responseMessage}',\n  [AnalyticsError.NO_API_KEY]:\n    'The \"apiKey\" field is empty in the local Firebase config. Firebase Analytics requires this field to' +\n    'contain a valid API key.',\n  [AnalyticsError.NO_APP_ID]:\n    'The \"appId\" field is empty in the local Firebase config. Firebase Analytics requires this field to' +\n    'contain a valid app ID.'\n};\n\ninterface ErrorParams {\n  [AnalyticsError.ALREADY_EXISTS]: { id: string };\n  [AnalyticsError.INTEROP_COMPONENT_REG_FAILED]: { reason: Error };\n  [AnalyticsError.FETCH_THROTTLE]: { throttleEndTimeMillis: number };\n  [AnalyticsError.CONFIG_FETCH_FAILED]: {\n    httpStatus: number;\n    responseMessage: string;\n  };\n  [AnalyticsError.INVALID_ANALYTICS_CONTEXT]: { errorInfo: string };\n  [AnalyticsError.INDEXEDDB_UNAVAILABLE]: { errorInfo: string };\n}\n\nexport const ERROR_FACTORY = new ErrorFactory<AnalyticsError, ErrorParams>(\n  'analytics',\n  'Analytics',\n  ERRORS\n);\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Most logic is copied from packages/remote-config/src/client/retrying_client.ts\n */\n\nimport { FirebaseApp } from '@firebase/app';\nimport { DynamicConfig, ThrottleMetadata, MinimalDynamicConfig } from './types';\nimport { FirebaseError, calculateBackoffMillis } from '@firebase/util';\nimport { AnalyticsError, ERROR_FACTORY } from './errors';\nimport { DYNAMIC_CONFIG_URL, FETCH_TIMEOUT_MILLIS } from './constants';\nimport { logger } from './logger';\n\n// App config fields needed by analytics.\nexport interface AppFields {\n  appId: string;\n  apiKey: string;\n  measurementId?: string;\n}\n\n/**\n * Backoff factor for 503 errors, which we want to be conservative about\n * to avoid overloading servers. Each retry interval will be\n * BASE_INTERVAL_MILLIS * LONG_RETRY_FACTOR ^ retryCount, so the second one\n * will be ~30 seconds (with fuzzing).\n */\nexport const LONG_RETRY_FACTOR = 30;\n\n/**\n * Base wait interval to multiplied by backoffFactor^backoffCount.\n */\nconst BASE_INTERVAL_MILLIS = 1000;\n\n/**\n * Stubbable retry data storage class.\n */\nclass RetryData {\n  constructor(\n    public throttleMetadata: { [appId: string]: ThrottleMetadata } = {},\n    public intervalMillis: number = BASE_INTERVAL_MILLIS\n  ) {}\n\n  getThrottleMetadata(appId: string): ThrottleMetadata {\n    return this.throttleMetadata[appId];\n  }\n\n  setThrottleMetadata(appId: string, metadata: ThrottleMetadata): void {\n    this.throttleMetadata[appId] = metadata;\n  }\n\n  deleteThrottleMetadata(appId: string): void {\n    delete this.throttleMetadata[appId];\n  }\n}\n\nconst defaultRetryData = new RetryData();\n\n/**\n * Set GET request headers.\n * @param apiKey App API key.\n */\nfunction getHeaders(apiKey: string): Headers {\n  return new Headers({\n    Accept: 'application/json',\n    'x-goog-api-key': apiKey\n  });\n}\n\n/**\n * Fetches dynamic config from backend.\n * @param app Firebase app to fetch config for.\n */\nexport async function fetchDynamicConfig(\n  appFields: AppFields\n): Promise<DynamicConfig> {\n  const { appId, apiKey } = appFields;\n  const request: RequestInit = {\n    method: 'GET',\n    headers: getHeaders(apiKey)\n  };\n  const appUrl = DYNAMIC_CONFIG_URL.replace('{app-id}', appId);\n  const response = await fetch(appUrl, request);\n  if (response.status !== 200 && response.status !== 304) {\n    let errorMessage = '';\n    try {\n      // Try to get any error message text from server response.\n      const jsonResponse = (await response.json()) as {\n        error?: { message?: string };\n      };\n      if (jsonResponse.error?.message) {\n        errorMessage = jsonResponse.error.message;\n      }\n    } catch (_ignored) {}\n    throw ERROR_FACTORY.create(AnalyticsError.CONFIG_FETCH_FAILED, {\n      httpStatus: response.status,\n      responseMessage: errorMessage\n    });\n  }\n  return response.json();\n}\n\n/**\n * Fetches dynamic config from backend, retrying if failed.\n * @param app Firebase app to fetch config for.\n */\nexport async function fetchDynamicConfigWithRetry(\n  app: FirebaseApp,\n  // retryData and timeoutMillis are parameterized to allow passing a different value for testing.\n  retryData: RetryData = defaultRetryData,\n  timeoutMillis?: number\n): Promise<DynamicConfig | MinimalDynamicConfig> {\n  const { appId, apiKey, measurementId } = app.options;\n\n  if (!appId) {\n    throw ERROR_FACTORY.create(AnalyticsError.NO_APP_ID);\n  }\n\n  if (!apiKey) {\n    if (measurementId) {\n      return {\n        measurementId,\n        appId\n      };\n    }\n    throw ERROR_FACTORY.create(AnalyticsError.NO_API_KEY);\n  }\n\n  const throttleMetadata: ThrottleMetadata = retryData.getThrottleMetadata(\n    appId\n  ) || {\n    backoffCount: 0,\n    throttleEndTimeMillis: Date.now()\n  };\n\n  const signal = new AnalyticsAbortSignal();\n\n  setTimeout(\n    async () => {\n      // Note a very low delay, eg < 10ms, can elapse before listeners are initialized.\n      signal.abort();\n    },\n    timeoutMillis !== undefined ? timeoutMillis : FETCH_TIMEOUT_MILLIS\n  );\n\n  return attemptFetchDynamicConfigWithRetry(\n    { appId, apiKey, measurementId },\n    throttleMetadata,\n    signal,\n    retryData\n  );\n}\n\n/**\n * Runs one retry attempt.\n * @param appFields Necessary app config fields.\n * @param throttleMetadata Ongoing metadata to determine throttling times.\n * @param signal Abort signal.\n */\nasync function attemptFetchDynamicConfigWithRetry(\n  appFields: AppFields,\n  { throttleEndTimeMillis, backoffCount }: ThrottleMetadata,\n  signal: AnalyticsAbortSignal,\n  retryData: RetryData = defaultRetryData // for testing\n): Promise<DynamicConfig | MinimalDynamicConfig> {\n  const { appId, measurementId } = appFields;\n  // Starts with a (potentially zero) timeout to support resumption from stored state.\n  // Ensures the throttle end time is honored if the last attempt timed out.\n  // Note the SDK will never make a request if the fetch timeout expires at this point.\n  try {\n    await setAbortableTimeout(signal, throttleEndTimeMillis);\n  } catch (e) {\n    if (measurementId) {\n      logger.warn(\n        `Timed out fetching this Firebase app's measurement ID from the server.` +\n          ` Falling back to the measurement ID ${measurementId}` +\n          ` provided in the \"measurementId\" field in the local Firebase config. [${e.message}]`\n      );\n      return { appId, measurementId };\n    }\n    throw e;\n  }\n\n  try {\n    const response = await fetchDynamicConfig(appFields);\n\n    // Note the SDK only clears throttle state if response is success or non-retriable.\n    retryData.deleteThrottleMetadata(appId);\n\n    return response;\n  } catch (e) {\n    if (!isRetriableError(e)) {\n      retryData.deleteThrottleMetadata(appId);\n      if (measurementId) {\n        logger.warn(\n          `Failed to fetch this Firebase app's measurement ID from the server.` +\n            ` Falling back to the measurement ID ${measurementId}` +\n            ` provided in the \"measurementId\" field in the local Firebase config. [${e.message}]`\n        );\n        return { appId, measurementId };\n      } else {\n        throw e;\n      }\n    }\n\n    const backoffMillis =\n      Number(e.customData.httpStatus) === 503\n        ? calculateBackoffMillis(\n            backoffCount,\n            retryData.intervalMillis,\n            LONG_RETRY_FACTOR\n          )\n        : calculateBackoffMillis(backoffCount, retryData.intervalMillis);\n\n    // Increments backoff state.\n    const throttleMetadata = {\n      throttleEndTimeMillis: Date.now() + backoffMillis,\n      backoffCount: backoffCount + 1\n    };\n\n    // Persists state.\n    retryData.setThrottleMetadata(appId, throttleMetadata);\n    logger.debug(`Calling attemptFetch again in ${backoffMillis} millis`);\n\n    return attemptFetchDynamicConfigWithRetry(\n      appFields,\n      throttleMetadata,\n      signal,\n      retryData\n    );\n  }\n}\n\n/**\n * Supports waiting on a backoff by:\n *\n * <ul>\n *   <li>Promisifying setTimeout, so we can set a timeout in our Promise chain</li>\n *   <li>Listening on a signal bus for abort events, just like the Fetch API</li>\n *   <li>Failing in the same way the Fetch API fails, so timing out a live request and a throttled\n *       request appear the same.</li>\n * </ul>\n *\n * <p>Visible for testing.\n */\nfunction setAbortableTimeout(\n  signal: AnalyticsAbortSignal,\n  throttleEndTimeMillis: number\n): Promise<void> {\n  return new Promise((resolve, reject) => {\n    // Derives backoff from given end time, normalizing negative numbers to zero.\n    const backoffMillis = Math.max(throttleEndTimeMillis - Date.now(), 0);\n\n    const timeout = setTimeout(resolve, backoffMillis);\n\n    // Adds listener, rather than sets onabort, because signal is a shared object.\n    signal.addEventListener(() => {\n      clearTimeout(timeout);\n      // If the request completes before this timeout, the rejection has no effect.\n      reject(\n        ERROR_FACTORY.create(AnalyticsError.FETCH_THROTTLE, {\n          throttleEndTimeMillis\n        })\n      );\n    });\n  });\n}\n\ntype RetriableError = FirebaseError & { customData: { httpStatus: string } };\n\n/**\n * Returns true if the {@link Error} indicates a fetch request may succeed later.\n */\nfunction isRetriableError(e: Error): e is RetriableError {\n  if (!(e instanceof FirebaseError) || !e.customData) {\n    return false;\n  }\n\n  // Uses string index defined by ErrorData, which FirebaseError implements.\n  const httpStatus = Number(e.customData['httpStatus']);\n\n  return (\n    httpStatus === 429 ||\n    httpStatus === 500 ||\n    httpStatus === 503 ||\n    httpStatus === 504\n  );\n}\n\n/**\n * Shims a minimal AbortSignal (copied from Remote Config).\n *\n * <p>AbortController's AbortSignal conveniently decouples fetch timeout logic from other aspects\n * of networking, such as retries. Firebase doesn't use AbortController enough to justify a\n * polyfill recommendation, like we do with the Fetch API, but this minimal shim can easily be\n * swapped out if/when we do.\n */\nexport class AnalyticsAbortSignal {\n  listeners: Array<() => void> = [];\n  addEventListener(listener: () => void): void {\n    this.listeners.push(listener);\n  }\n  abort(): void {\n    this.listeners.forEach(listener => listener());\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DynamicConfig, Gtag, MinimalDynamicConfig } from './types';\nimport { GtagCommand, GA_FID_KEY, ORIGIN_KEY } from './constants';\nimport { _FirebaseInstallationsInternal } from '@firebase/installations';\nimport { fetchDynamicConfigWithRetry } from './get-config';\nimport { logger } from './logger';\nimport { FirebaseApp } from '@firebase/app';\nimport {\n  isIndexedDBAvailable,\n  validateIndexedDBOpenable\n} from '@firebase/util';\nimport { ERROR_FACTORY, AnalyticsError } from './errors';\nimport { findGtagScriptOnPage, insertScriptTag } from './helpers';\nimport { AnalyticsSettings } from './public-types';\n\nasync function validateIndexedDB(): Promise<boolean> {\n  if (!isIndexedDBAvailable()) {\n    logger.warn(\n      ERROR_FACTORY.create(AnalyticsError.INDEXEDDB_UNAVAILABLE, {\n        errorInfo: 'IndexedDB is not available in this environment.'\n      }).message\n    );\n    return false;\n  } else {\n    try {\n      await validateIndexedDBOpenable();\n    } catch (e) {\n      logger.warn(\n        ERROR_FACTORY.create(AnalyticsError.INDEXEDDB_UNAVAILABLE, {\n          errorInfo: e\n        }).message\n      );\n      return false;\n    }\n  }\n  return true;\n}\n\n/**\n * Initialize the analytics instance in gtag.js by calling config command with fid.\n *\n * NOTE: We combine analytics initialization and setting fid together because we want fid to be\n * part of the `page_view` event that's sent during the initialization\n * @param app Firebase app\n * @param gtagCore The gtag function that's not wrapped.\n * @param dynamicConfigPromisesList Array of all dynamic config promises.\n * @param measurementIdToAppId Maps measurementID to appID.\n * @param installations _FirebaseInstallationsInternal instance.\n *\n * @returns Measurement ID.\n */\nexport async function _initializeAnalytics(\n  app: FirebaseApp,\n  dynamicConfigPromisesList: Array<\n    Promise<DynamicConfig | MinimalDynamicConfig>\n  >,\n  measurementIdToAppId: { [key: string]: string },\n  installations: _FirebaseInstallationsInternal,\n  gtagCore: Gtag,\n  dataLayerName: string,\n  options?: AnalyticsSettings\n): Promise<string> {\n  const dynamicConfigPromise = fetchDynamicConfigWithRetry(app);\n  // Once fetched, map measurementIds to appId, for ease of lookup in wrapped gtag function.\n  dynamicConfigPromise\n    .then(config => {\n      measurementIdToAppId[config.measurementId] = config.appId;\n      if (\n        app.options.measurementId &&\n        config.measurementId !== app.options.measurementId\n      ) {\n        logger.warn(\n          `The measurement ID in the local Firebase config (${app.options.measurementId})` +\n            ` does not match the measurement ID fetched from the server (${config.measurementId}).` +\n            ` To ensure analytics events are always sent to the correct Analytics property,` +\n            ` update the` +\n            ` measurement ID field in the local config or remove it from the local config.`\n        );\n      }\n    })\n    .catch(e => logger.error(e));\n  // Add to list to track state of all dynamic config promises.\n  dynamicConfigPromisesList.push(dynamicConfigPromise);\n\n  const fidPromise: Promise<string | undefined> = validateIndexedDB().then(\n    envIsValid => {\n      if (envIsValid) {\n        return installations.getId();\n      } else {\n        return undefined;\n      }\n    }\n  );\n\n  const [dynamicConfig, fid] = await Promise.all([\n    dynamicConfigPromise,\n    fidPromise\n  ]);\n\n  // Detect if user has already put the gtag <script> tag on this page.\n  if (!findGtagScriptOnPage()) {\n    insertScriptTag(dataLayerName, dynamicConfig.measurementId);\n  }\n\n  // This command initializes gtag.js and only needs to be called once for the entire web app,\n  // but since it is idempotent, we can call it multiple times.\n  // We keep it together with other initialization logic for better code structure.\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  (gtagCore as any)('js', new Date());\n  // User config added first. We don't want users to accidentally overwrite\n  // base Firebase config properties.\n  const configProperties: Record<string, unknown> = options?.config ?? {};\n\n  // guard against developers accidentally setting properties with prefix `firebase_`\n  configProperties[ORIGIN_KEY] = 'firebase';\n  configProperties.update = true;\n\n  if (fid != null) {\n    configProperties[GA_FID_KEY] = fid;\n  }\n\n  // It should be the first config command called on this GA-ID\n  // Initialize this GA-ID and set FID on it using the gtag config API.\n  // Note: This will trigger a page_view event unless 'send_page_view' is set to false in\n  // `configProperties`.\n  gtagCore(GtagCommand.CONFIG, dynamicConfig.measurementId, configProperties);\n  return dynamicConfig.measurementId;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { SettingsOptions, Analytics, AnalyticsSettings } from './public-types';\nimport { Gtag, DynamicConfig, MinimalDynamicConfig } from './types';\nimport { getOrCreateDataLayer, wrapOrCreateGtag } from './helpers';\nimport { AnalyticsError, ERROR_FACTORY } from './errors';\nimport { _FirebaseInstallationsInternal } from '@firebase/installations';\nimport { areCookiesEnabled, isBrowserExtension } from '@firebase/util';\nimport { _initializeAnalytics } from './initialize-analytics';\nimport { logger } from './logger';\nimport { FirebaseApp, _FirebaseService } from '@firebase/app';\n\n/**\n * Analytics Service class.\n */\nexport class AnalyticsService implements Analytics, _FirebaseService {\n  constructor(public app: FirebaseApp) {}\n  _delete(): Promise<void> {\n    delete initializationPromisesMap[this.app.options.appId!];\n    return Promise.resolve();\n  }\n}\n\n/**\n * Maps appId to full initialization promise. Wrapped gtag calls must wait on\n * all or some of these, depending on the call's `send_to` param and the status\n * of the dynamic config fetches (see below).\n */\nexport let initializationPromisesMap: {\n  [appId: string]: Promise<string>; // Promise contains measurement ID string.\n} = {};\n\n/**\n * List of dynamic config fetch promises. In certain cases, wrapped gtag calls\n * wait on all these to be complete in order to determine if it can selectively\n * wait for only certain initialization (FID) promises or if it must wait for all.\n */\nlet dynamicConfigPromisesList: Array<\n  Promise<DynamicConfig | MinimalDynamicConfig>\n> = [];\n\n/**\n * Maps fetched measurementIds to appId. Populated when the app's dynamic config\n * fetch completes. If already populated, gtag config calls can use this to\n * selectively wait for only this app's initialization promise (FID) instead of all\n * initialization promises.\n */\nconst measurementIdToAppId: { [measurementId: string]: string } = {};\n\n/**\n * Name for window global data layer array used by GA: defaults to 'dataLayer'.\n */\nlet dataLayerName: string = 'dataLayer';\n\n/**\n * Name for window global gtag function used by GA: defaults to 'gtag'.\n */\nlet gtagName: string = 'gtag';\n\n/**\n * Reproduction of standard gtag function or reference to existing\n * gtag function on window object.\n */\nlet gtagCoreFunction: Gtag;\n\n/**\n * Wrapper around gtag function that ensures FID is sent with all\n * relevant event and config calls.\n */\nexport let wrappedGtagFunction: Gtag;\n\n/**\n * Flag to ensure page initialization steps (creation or wrapping of\n * dataLayer and gtag script) are only run once per page load.\n */\nlet globalInitDone: boolean = false;\n\n/**\n * For testing\n * @internal\n */\nexport function resetGlobalVars(\n  newGlobalInitDone = false,\n  newInitializationPromisesMap = {},\n  newDynamicPromises = []\n): void {\n  globalInitDone = newGlobalInitDone;\n  initializationPromisesMap = newInitializationPromisesMap;\n  dynamicConfigPromisesList = newDynamicPromises;\n  dataLayerName = 'dataLayer';\n  gtagName = 'gtag';\n}\n\n/**\n * For testing\n * @internal\n */\nexport function getGlobalVars(): {\n  initializationPromisesMap: { [appId: string]: Promise<string> };\n  dynamicConfigPromisesList: Array<\n    Promise<DynamicConfig | MinimalDynamicConfig>\n  >;\n} {\n  return {\n    initializationPromisesMap,\n    dynamicConfigPromisesList\n  };\n}\n\n/**\n * Configures Firebase Analytics to use custom `gtag` or `dataLayer` names.\n * Intended to be used if `gtag.js` script has been installed on\n * this page independently of Firebase Analytics, and is using non-default\n * names for either the `gtag` function or for `dataLayer`.\n * Must be called before calling `getAnalytics()` or it won't\n * have any effect.\n *\n * @public\n *\n * @param options - Custom gtag and dataLayer names.\n */\nexport function settings(options: SettingsOptions): void {\n  if (globalInitDone) {\n    throw ERROR_FACTORY.create(AnalyticsError.ALREADY_INITIALIZED);\n  }\n  if (options.dataLayerName) {\n    dataLayerName = options.dataLayerName;\n  }\n  if (options.gtagName) {\n    gtagName = options.gtagName;\n  }\n}\n\n/**\n * Returns true if no environment mismatch is found.\n * If environment mismatches are found, throws an INVALID_ANALYTICS_CONTEXT\n * error that also lists details for each mismatch found.\n */\nfunction warnOnBrowserContextMismatch(): void {\n  const mismatchedEnvMessages = [];\n  if (isBrowserExtension()) {\n    mismatchedEnvMessages.push('This is a browser extension environment.');\n  }\n  if (!areCookiesEnabled()) {\n    mismatchedEnvMessages.push('Cookies are not available.');\n  }\n  if (mismatchedEnvMessages.length > 0) {\n    const details = mismatchedEnvMessages\n      .map((message, index) => `(${index + 1}) ${message}`)\n      .join(' ');\n    const err = ERROR_FACTORY.create(AnalyticsError.INVALID_ANALYTICS_CONTEXT, {\n      errorInfo: details\n    });\n    logger.warn(err.message);\n  }\n}\n\n/**\n * Analytics instance factory.\n * @internal\n */\nexport function factory(\n  app: FirebaseApp,\n  installations: _FirebaseInstallationsInternal,\n  options?: AnalyticsSettings\n): AnalyticsService {\n  warnOnBrowserContextMismatch();\n  const appId = app.options.appId;\n  if (!appId) {\n    throw ERROR_FACTORY.create(AnalyticsError.NO_APP_ID);\n  }\n  if (!app.options.apiKey) {\n    if (app.options.measurementId) {\n      logger.warn(\n        `The \"apiKey\" field is empty in the local Firebase config. This is needed to fetch the latest` +\n          ` measurement ID for this Firebase app. Falling back to the measurement ID ${app.options.measurementId}` +\n          ` provided in the \"measurementId\" field in the local Firebase config.`\n      );\n    } else {\n      throw ERROR_FACTORY.create(AnalyticsError.NO_API_KEY);\n    }\n  }\n  if (initializationPromisesMap[appId] != null) {\n    throw ERROR_FACTORY.create(AnalyticsError.ALREADY_EXISTS, {\n      id: appId\n    });\n  }\n\n  if (!globalInitDone) {\n    // Steps here should only be done once per page: creation or wrapping\n    // of dataLayer and global gtag function.\n\n    getOrCreateDataLayer(dataLayerName);\n\n    const { wrappedGtag, gtagCore } = wrapOrCreateGtag(\n      initializationPromisesMap,\n      dynamicConfigPromisesList,\n      measurementIdToAppId,\n      dataLayerName,\n      gtagName\n    );\n    wrappedGtagFunction = wrappedGtag;\n    gtagCoreFunction = gtagCore;\n\n    globalInitDone = true;\n  }\n  // Async but non-blocking.\n  // This map reflects the completion state of all promises for each appId.\n  initializationPromisesMap[appId] = _initializeAnalytics(\n    app,\n    dynamicConfigPromisesList,\n    measurementIdToAppId,\n    installations,\n    gtagCoreFunction,\n    dataLayerName,\n    options\n  );\n\n  const analyticsInstance: AnalyticsService = new AnalyticsService(app);\n\n  return analyticsInstance;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  AnalyticsCallOptions,\n  CustomParams,\n  ControlParams,\n  EventParams\n} from './public-types';\nimport { Gtag } from './types';\nimport { GtagCommand } from './constants';\n/**\n * Logs an analytics event through the Firebase SDK.\n *\n * @param gtagFunction Wrapped gtag function that waits for fid to be set before sending an event\n * @param eventName Google Analytics event name, choose from standard list or use a custom string.\n * @param eventParams Analytics event parameters.\n */\nexport async function logEvent(\n  gtagFunction: Gtag,\n  initializationPromise: Promise<string>,\n  eventName: string,\n  eventParams?: EventParams,\n  options?: AnalyticsCallOptions\n): Promise<void> {\n  if (options && options.global) {\n    gtagFunction(GtagCommand.EVENT, eventName, eventParams);\n    return;\n  } else {\n    const measurementId = await initializationPromise;\n    const params: EventParams | ControlParams = {\n      ...eventParams,\n      'send_to': measurementId\n    };\n    gtagFunction(GtagCommand.EVENT, eventName, params);\n  }\n}\n\n/**\n * Set screen_name parameter for this Google Analytics ID.\n *\n * @param gtagFunction Wrapped gtag function that waits for fid to be set before sending an event\n * @param screenName Screen name string to set.\n */\nexport async function setCurrentScreen(\n  gtagFunction: Gtag,\n  initializationPromise: Promise<string>,\n  screenName: string | null,\n  options?: AnalyticsCallOptions\n): Promise<void> {\n  if (options && options.global) {\n    gtagFunction(GtagCommand.SET, { 'screen_name': screenName });\n    return Promise.resolve();\n  } else {\n    const measurementId = await initializationPromise;\n    gtagFunction(GtagCommand.CONFIG, measurementId, {\n      update: true,\n      'screen_name': screenName\n    });\n  }\n}\n\n/**\n * Set user_id parameter for this Google Analytics ID.\n *\n * @param gtagFunction Wrapped gtag function that waits for fid to be set before sending an event\n * @param id User ID string to set\n */\nexport async function setUserId(\n  gtagFunction: Gtag,\n  initializationPromise: Promise<string>,\n  id: string | null,\n  options?: AnalyticsCallOptions\n): Promise<void> {\n  if (options && options.global) {\n    gtagFunction(GtagCommand.SET, { 'user_id': id });\n    return Promise.resolve();\n  } else {\n    const measurementId = await initializationPromise;\n    gtagFunction(GtagCommand.CONFIG, measurementId, {\n      update: true,\n      'user_id': id\n    });\n  }\n}\n\n/**\n * Set all other user properties other than user_id and screen_name.\n *\n * @param gtagFunction Wrapped gtag function that waits for fid to be set before sending an event\n * @param properties Map of user properties to set\n */\nexport async function setUserProperties(\n  gtagFunction: Gtag,\n  initializationPromise: Promise<string>,\n  properties: CustomParams,\n  options?: AnalyticsCallOptions\n): Promise<void> {\n  if (options && options.global) {\n    const flatProperties: { [key: string]: unknown } = {};\n    for (const key of Object.keys(properties)) {\n      // use dot notation for merge behavior in gtag.js\n      flatProperties[`user_properties.${key}`] = properties[key];\n    }\n    gtagFunction(GtagCommand.SET, flatProperties);\n    return Promise.resolve();\n  } else {\n    const measurementId = await initializationPromise;\n    gtagFunction(GtagCommand.CONFIG, measurementId, {\n      update: true,\n      'user_properties': properties\n    });\n  }\n}\n\n/**\n * Set whether collection is enabled for this ID.\n *\n * @param enabled If true, collection is enabled for this ID.\n */\nexport async function setAnalyticsCollectionEnabled(\n  initializationPromise: Promise<string>,\n  enabled: boolean\n): Promise<void> {\n  const measurementId = await initializationPromise;\n  window[`ga-disable-${measurementId}`] = !enabled;\n}\n","/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable camelcase */\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { _getProvider, FirebaseApp, getApp } from '@firebase/app';\nimport {\n  Analytics,\n  AnalyticsCallOptions,\n  AnalyticsSettings,\n  CustomParams,\n  EventNameString,\n  EventParams\n} from './public-types';\nimport { Provider } from '@firebase/component';\nimport {\n  isIndexedDBAvailable,\n  validateIndexedDBOpenable,\n  areCookiesEnabled,\n  isBrowserExtension,\n  getModularInstance,\n  deepEqual\n} from '@firebase/util';\nimport { ANALYTICS_TYPE } from './constants';\nimport {\n  AnalyticsService,\n  initializationPromisesMap,\n  wrappedGtagFunction\n} from './factory';\nimport { logger } from './logger';\nimport {\n  logEvent as internalLogEvent,\n  setCurrentScreen as internalSetCurrentScreen,\n  setUserId as internalSetUserId,\n  setUserProperties as internalSetUserProperties,\n  setAnalyticsCollectionEnabled as internalSetAnalyticsCollectionEnabled\n} from './functions';\nimport { ERROR_FACTORY, AnalyticsError } from './errors';\n\nexport { settings } from './factory';\n\ndeclare module '@firebase/component' {\n  interface NameServiceMapping {\n    [ANALYTICS_TYPE]: AnalyticsService;\n  }\n}\n\n/**\n * Returns an {@link Analytics} instance for the given app.\n *\n * @public\n *\n * @param app - The {@link @firebase/app#FirebaseApp} to use.\n */\nexport function getAnalytics(app: FirebaseApp = getApp()): Analytics {\n  app = getModularInstance(app);\n  // Dependencies\n  const analyticsProvider: Provider<'analytics'> = _getProvider(\n    app,\n    ANALYTICS_TYPE\n  );\n\n  if (analyticsProvider.isInitialized()) {\n    return analyticsProvider.getImmediate();\n  }\n\n  return initializeAnalytics(app);\n}\n\n/**\n * Returns an {@link Analytics} instance for the given app.\n *\n * @public\n *\n * @param app - The {@link @firebase/app#FirebaseApp} to use.\n */\nexport function initializeAnalytics(\n  app: FirebaseApp,\n  options: AnalyticsSettings = {}\n): Analytics {\n  // Dependencies\n  const analyticsProvider: Provider<'analytics'> = _getProvider(\n    app,\n    ANALYTICS_TYPE\n  );\n  if (analyticsProvider.isInitialized()) {\n    const existingInstance = analyticsProvider.getImmediate();\n    if (deepEqual(options, analyticsProvider.getOptions())) {\n      return existingInstance;\n    } else {\n      throw ERROR_FACTORY.create(AnalyticsError.ALREADY_INITIALIZED);\n    }\n  }\n  const analyticsInstance = analyticsProvider.initialize({ options });\n  return analyticsInstance;\n}\n\n/**\n * This is a public static method provided to users that wraps four different checks:\n *\n * 1. Check if it's not a browser extension environment.\n * 2. Check if cookies are enabled in current browser.\n * 3. Check if IndexedDB is supported by the browser environment.\n * 4. Check if the current browser context is valid for using `IndexedDB.open()`.\n *\n * @public\n *\n */\nexport async function isSupported(): Promise<boolean> {\n  if (isBrowserExtension()) {\n    return false;\n  }\n  if (!areCookiesEnabled()) {\n    return false;\n  }\n  if (!isIndexedDBAvailable()) {\n    return false;\n  }\n\n  try {\n    const isDBOpenable: boolean = await validateIndexedDBOpenable();\n    return isDBOpenable;\n  } catch (error) {\n    return false;\n  }\n}\n\n/**\n * Use gtag `config` command to set `screen_name`.\n *\n * @public\n *\n * @param analyticsInstance - The {@link Analytics} instance.\n * @param screenName - Screen name to set.\n */\nexport function setCurrentScreen(\n  analyticsInstance: Analytics,\n  screenName: string,\n  options?: AnalyticsCallOptions\n): void {\n  analyticsInstance = getModularInstance(analyticsInstance);\n  internalSetCurrentScreen(\n    wrappedGtagFunction,\n    initializationPromisesMap[analyticsInstance.app.options.appId!],\n    screenName,\n    options\n  ).catch(e => logger.error(e));\n}\n\n/**\n * Use gtag `config` command to set `user_id`.\n *\n * @public\n *\n * @param analyticsInstance - The {@link Analytics} instance.\n * @param id - User ID to set.\n */\nexport function setUserId(\n  analyticsInstance: Analytics,\n  id: string,\n  options?: AnalyticsCallOptions\n): void {\n  analyticsInstance = getModularInstance(analyticsInstance);\n  internalSetUserId(\n    wrappedGtagFunction,\n    initializationPromisesMap[analyticsInstance.app.options.appId!],\n    id,\n    options\n  ).catch(e => logger.error(e));\n}\n\n/**\n * Use gtag `config` command to set all params specified.\n *\n * @public\n */\nexport function setUserProperties(\n  analyticsInstance: Analytics,\n  properties: CustomParams,\n  options?: AnalyticsCallOptions\n): void {\n  analyticsInstance = getModularInstance(analyticsInstance);\n  internalSetUserProperties(\n    wrappedGtagFunction,\n    initializationPromisesMap[analyticsInstance.app.options.appId!],\n    properties,\n    options\n  ).catch(e => logger.error(e));\n}\n\n/**\n * Sets whether Google Analytics collection is enabled for this app on this device.\n * Sets global `window['ga-disable-analyticsId'] = true;`\n *\n * @public\n *\n * @param analyticsInstance - The {@link Analytics} instance.\n * @param enabled - If true, enables collection, if false, disables it.\n */\nexport function setAnalyticsCollectionEnabled(\n  analyticsInstance: Analytics,\n  enabled: boolean\n): void {\n  analyticsInstance = getModularInstance(analyticsInstance);\n  internalSetAnalyticsCollectionEnabled(\n    initializationPromisesMap[analyticsInstance.app.options.appId!],\n    enabled\n  ).catch(e => logger.error(e));\n}\n/**\n * Sends a Google Analytics event with given `eventParams`. This method\n * automatically associates this logged event with this Firebase web\n * app instance on this device.\n * @public\n * List of recommended event parameters can be found in\n * {@link https://developers.google.com/gtagjs/reference/ga4-events\n * | the GA4 reference documentation}.\n */\nexport function logEvent(\n  analyticsInstance: Analytics,\n  eventName: 'add_payment_info',\n  eventParams?: {\n    coupon?: EventParams['coupon'];\n    currency?: EventParams['currency'];\n    items?: EventParams['items'];\n    payment_type?: EventParams['payment_type'];\n    value?: EventParams['value'];\n    [key: string]: any;\n  },\n  options?: AnalyticsCallOptions\n): void;\n\n/**\n * Sends a Google Analytics event with given `eventParams`. This method\n * automatically associates this logged event with this Firebase web\n * app instance on this device.\n * @public\n * List of recommended event parameters can be found in\n * {@link https://developers.google.com/gtagjs/reference/ga4-events\n * | the GA4 reference documentation}.\n */\nexport function logEvent(\n  analyticsInstance: Analytics,\n  eventName: 'add_shipping_info',\n  eventParams?: {\n    coupon?: EventParams['coupon'];\n    currency?: EventParams['currency'];\n    items?: EventParams['items'];\n    shipping_tier?: EventParams['shipping_tier'];\n    value?: EventParams['value'];\n    [key: string]: any;\n  },\n  options?: AnalyticsCallOptions\n): void;\n\n/**\n * Sends a Google Analytics event with given `eventParams`. This method\n * automatically associates this logged event with this Firebase web\n * app instance on this device.\n * @public\n * List of recommended event parameters can be found in\n * {@link https://developers.google.com/gtagjs/reference/ga4-events\n * | the GA4 reference documentation}.\n */\nexport function logEvent(\n  analyticsInstance: Analytics,\n  eventName: 'add_to_cart' | 'add_to_wishlist' | 'remove_from_cart',\n  eventParams?: {\n    currency?: EventParams['currency'];\n    value?: EventParams['value'];\n    items?: EventParams['items'];\n    [key: string]: any;\n  },\n  options?: AnalyticsCallOptions\n): void;\n\n/**\n * Sends a Google Analytics event with given `eventParams`. This method\n * automatically associates this logged event with this Firebase web\n * app instance on this device.\n * @public\n * List of recommended event parameters can be found in\n * {@link https://developers.google.com/gtagjs/reference/ga4-events\n * | the GA4 reference documentation}.\n */\nexport function logEvent(\n  analyticsInstance: Analytics,\n  eventName: 'begin_checkout',\n  eventParams?: {\n    currency?: EventParams['currency'];\n    coupon?: EventParams['coupon'];\n    value?: EventParams['value'];\n    items?: EventParams['items'];\n    [key: string]: any;\n  },\n  options?: AnalyticsCallOptions\n): void;\n\n/**\n * Sends a Google Analytics event with given `eventParams`. This method\n * automatically associates this logged event with this Firebase web\n * app instance on this device.\n * @public\n * List of recommended event parameters can be found in\n * {@link https://developers.google.com/gtagjs/reference/ga4-events\n * | the GA4 reference documentation}.\n */\nexport function logEvent(\n  analyticsInstance: Analytics,\n  eventName: 'checkout_progress',\n  eventParams?: {\n    currency?: EventParams['currency'];\n    coupon?: EventParams['coupon'];\n    value?: EventParams['value'];\n    items?: EventParams['items'];\n    checkout_step?: EventParams['checkout_step'];\n    checkout_option?: EventParams['checkout_option'];\n    [key: string]: any;\n  },\n  options?: AnalyticsCallOptions\n): void;\n\n/**\n * Sends a Google Analytics event with given `eventParams`. This method\n * automatically associates this logged event with this Firebase web\n * app instance on this device.\n * @public\n * See\n * {@link https://developers.google.com/analytics/devguides/collection/ga4/exceptions\n * | Measure exceptions}.\n */\nexport function logEvent(\n  analyticsInstance: Analytics,\n  eventName: 'exception',\n  eventParams?: {\n    description?: EventParams['description'];\n    fatal?: EventParams['fatal'];\n    [key: string]: any;\n  },\n  options?: AnalyticsCallOptions\n): void;\n\n/**\n * Sends a Google Analytics event with given `eventParams`. This method\n * automatically associates this logged event with this Firebase web\n * app instance on this device.\n * @public\n * List of recommended event parameters can be found in\n * {@link https://developers.google.com/gtagjs/reference/ga4-events\n * | the GA4 reference documentation}.\n */\nexport function logEvent(\n  analyticsInstance: Analytics,\n  eventName: 'generate_lead',\n  eventParams?: {\n    value?: EventParams['value'];\n    currency?: EventParams['currency'];\n    [key: string]: any;\n  },\n  options?: AnalyticsCallOptions\n): void;\n\n/**\n * Sends a Google Analytics event with given `eventParams`. This method\n * automatically associates this logged event with this Firebase web\n * app instance on this device.\n * @public\n * List of recommended event parameters can be found in\n * {@link https://developers.google.com/gtagjs/reference/ga4-events\n * | the GA4 reference documentation}.\n */\nexport function logEvent(\n  analyticsInstance: Analytics,\n  eventName: 'login',\n  eventParams?: {\n    method?: EventParams['method'];\n    [key: string]: any;\n  },\n  options?: AnalyticsCallOptions\n): void;\n\n/**\n * Sends a Google Analytics event with given `eventParams`. This method\n * automatically associates this logged event with this Firebase web\n * app instance on this device.\n * @public\n * See\n * {@link https://developers.google.com/analytics/devguides/collection/ga4/page-view\n * | Page views}.\n */\nexport function logEvent(\n  analyticsInstance: Analytics,\n  eventName: 'page_view',\n  eventParams?: {\n    page_title?: string;\n    page_location?: string;\n    page_path?: string;\n    [key: string]: any;\n  },\n  options?: AnalyticsCallOptions\n): void;\n\n/**\n * Sends a Google Analytics event with given `eventParams`. This method\n * automatically associates this logged event with this Firebase web\n * app instance on this device.\n * @public\n * List of recommended event parameters can be found in\n * {@link https://developers.google.com/gtagjs/reference/ga4-events\n * | the GA4 reference documentation}.\n */\nexport function logEvent(\n  analyticsInstance: Analytics,\n  eventName: 'purchase' | 'refund',\n  eventParams?: {\n    value?: EventParams['value'];\n    currency?: EventParams['currency'];\n    transaction_id: EventParams['transaction_id'];\n    tax?: EventParams['tax'];\n    shipping?: EventParams['shipping'];\n    items?: EventParams['items'];\n    coupon?: EventParams['coupon'];\n    affiliation?: EventParams['affiliation'];\n    [key: string]: any;\n  },\n  options?: AnalyticsCallOptions\n): void;\n\n/**\n * Sends a Google Analytics event with given `eventParams`. This method\n * automatically associates this logged event with this Firebase web\n * app instance on this device.\n * @public\n * See {@link https://firebase.google.com/docs/analytics/screenviews\n * | Track Screenviews}.\n */\nexport function logEvent(\n  analyticsInstance: Analytics,\n  eventName: 'screen_view',\n  eventParams?: {\n    firebase_screen: EventParams['firebase_screen'];\n    firebase_screen_class: EventParams['firebase_screen_class'];\n    [key: string]: any;\n  },\n  options?: AnalyticsCallOptions\n): void;\n\n/**\n * Sends a Google Analytics event with given `eventParams`. This method\n * automatically associates this logged event with this Firebase web\n * app instance on this device.\n * @public\n * List of recommended event parameters can be found in\n * {@link https://developers.google.com/gtagjs/reference/ga4-events\n * | the GA4 reference documentation}.\n */\nexport function logEvent(\n  analyticsInstance: Analytics,\n  eventName: 'search' | 'view_search_results',\n  eventParams?: {\n    search_term?: EventParams['search_term'];\n    [key: string]: any;\n  },\n  options?: AnalyticsCallOptions\n): void;\n\n/**\n * Sends a Google Analytics event with given `eventParams`. This method\n * automatically associates this logged event with this Firebase web\n * app instance on this device.\n * @public\n * List of recommended event parameters can be found in\n * {@link https://developers.google.com/gtagjs/reference/ga4-events\n * | the GA4 reference documentation}.\n */\nexport function logEvent(\n  analyticsInstance: Analytics,\n  eventName: 'select_content',\n  eventParams?: {\n    content_type?: EventParams['content_type'];\n    item_id?: EventParams['item_id'];\n    [key: string]: any;\n  },\n  options?: AnalyticsCallOptions\n): void;\n\n/**\n * Sends a Google Analytics event with given `eventParams`. This method\n * automatically associates this logged event with this Firebase web\n * app instance on this device.\n * @public\n * List of recommended event parameters can be found in\n * {@link https://developers.google.com/gtagjs/reference/ga4-events\n * | the GA4 reference documentation}.\n */\nexport function logEvent(\n  analyticsInstance: Analytics,\n  eventName: 'select_item',\n  eventParams?: {\n    items?: EventParams['items'];\n    item_list_name?: EventParams['item_list_name'];\n    item_list_id?: EventParams['item_list_id'];\n    [key: string]: any;\n  },\n  options?: AnalyticsCallOptions\n): void;\n\n/**\n * Sends a Google Analytics event with given `eventParams`. This method\n * automatically associates this logged event with this Firebase web\n * app instance on this device.\n * @public\n * List of recommended event parameters can be found in\n * {@link https://developers.google.com/gtagjs/reference/ga4-events\n * | the GA4 reference documentation}.\n */\nexport function logEvent(\n  analyticsInstance: Analytics,\n  eventName: 'select_promotion' | 'view_promotion',\n  eventParams?: {\n    items?: EventParams['items'];\n    promotion_id?: EventParams['promotion_id'];\n    promotion_name?: EventParams['promotion_name'];\n    [key: string]: any;\n  },\n  options?: AnalyticsCallOptions\n): void;\n\n/**\n * Sends a Google Analytics event with given `eventParams`. This method\n * automatically associates this logged event with this Firebase web\n * app instance on this device.\n * @public\n * List of recommended event parameters can be found in\n * {@link https://developers.google.com/gtagjs/reference/ga4-events\n * | the GA4 reference documentation}.\n */\nexport function logEvent(\n  analyticsInstance: Analytics,\n  eventName: 'set_checkout_option',\n  eventParams?: {\n    checkout_step?: EventParams['checkout_step'];\n    checkout_option?: EventParams['checkout_option'];\n    [key: string]: any;\n  },\n  options?: AnalyticsCallOptions\n): void;\n\n/**\n * Sends a Google Analytics event with given `eventParams`. This method\n * automatically associates this logged event with this Firebase web\n * app instance on this device.\n * @public\n * List of recommended event parameters can be found in\n * {@link https://developers.google.com/gtagjs/reference/ga4-events\n * | the GA4 reference documentation}.\n */\nexport function logEvent(\n  analyticsInstance: Analytics,\n  eventName: 'share',\n  eventParams?: {\n    method?: EventParams['method'];\n    content_type?: EventParams['content_type'];\n    item_id?: EventParams['item_id'];\n    [key: string]: any;\n  },\n  options?: AnalyticsCallOptions\n): void;\n\n/**\n * Sends a Google Analytics event with given `eventParams`. This method\n * automatically associates this logged event with this Firebase web\n * app instance on this device.\n * @public\n * List of recommended event parameters can be found in\n * {@link https://developers.google.com/gtagjs/reference/ga4-events\n * | the GA4 reference documentation}.\n */\nexport function logEvent(\n  analyticsInstance: Analytics,\n  eventName: 'sign_up',\n  eventParams?: {\n    method?: EventParams['method'];\n    [key: string]: any;\n  },\n  options?: AnalyticsCallOptions\n): void;\n\n/**\n * Sends a Google Analytics event with given `eventParams`. This method\n * automatically associates this logged event with this Firebase web\n * app instance on this device.\n * @public\n * List of recommended event parameters can be found in\n * {@link https://developers.google.com/gtagjs/reference/ga4-events\n * | the GA4 reference documentation}.\n */\nexport function logEvent(\n  analyticsInstance: Analytics,\n  eventName: 'timing_complete',\n  eventParams?: {\n    name: string;\n    value: number;\n    event_category?: string;\n    event_label?: string;\n    [key: string]: any;\n  },\n  options?: AnalyticsCallOptions\n): void;\n\n/**\n * Sends a Google Analytics event with given `eventParams`. This method\n * automatically associates this logged event with this Firebase web\n * app instance on this device.\n * @public\n * List of recommended event parameters can be found in\n * {@link https://developers.google.com/gtagjs/reference/ga4-events\n * | the GA4 reference documentation}.\n */\nexport function logEvent(\n  analyticsInstance: Analytics,\n  eventName: 'view_cart' | 'view_item',\n  eventParams?: {\n    currency?: EventParams['currency'];\n    items?: EventParams['items'];\n    value?: EventParams['value'];\n    [key: string]: any;\n  },\n  options?: AnalyticsCallOptions\n): void;\n\n/**\n * Sends a Google Analytics event with given `eventParams`. This method\n * automatically associates this logged event with this Firebase web\n * app instance on this device.\n * @public\n * List of recommended event parameters can be found in\n * {@link https://developers.google.com/gtagjs/reference/ga4-events\n * | the GA4 reference documentation}.\n */\nexport function logEvent(\n  analyticsInstance: Analytics,\n  eventName: 'view_item_list',\n  eventParams?: {\n    items?: EventParams['items'];\n    item_list_name?: EventParams['item_list_name'];\n    item_list_id?: EventParams['item_list_id'];\n    [key: string]: any;\n  },\n  options?: AnalyticsCallOptions\n): void;\n\n/**\n * Sends a Google Analytics event with given `eventParams`. This method\n * automatically associates this logged event with this Firebase web\n * app instance on this device.\n * @public\n * List of recommended event parameters can be found in\n * {@link https://developers.google.com/gtagjs/reference/ga4-events\n * | the GA4 reference documentation}.\n */\nexport function logEvent<T extends string>(\n  analyticsInstance: Analytics,\n  eventName: CustomEventName<T>,\n  eventParams?: { [key: string]: any },\n  options?: AnalyticsCallOptions\n): void;\n\n/**\n * Sends a Google Analytics event with given `eventParams`. This method\n * automatically associates this logged event with this Firebase web\n * app instance on this device.\n * List of official event parameters can be found in the gtag.js\n * reference documentation:\n * {@link https://developers.google.com/gtagjs/reference/ga4-events\n * | the GA4 reference documentation}.\n *\n * @public\n */\nexport function logEvent(\n  analyticsInstance: Analytics,\n  eventName: string,\n  eventParams?: EventParams,\n  options?: AnalyticsCallOptions\n): void {\n  analyticsInstance = getModularInstance(analyticsInstance);\n  internalLogEvent(\n    wrappedGtagFunction,\n    initializationPromisesMap[analyticsInstance.app.options.appId!],\n    eventName,\n    eventParams,\n    options\n  ).catch(e => logger.error(e));\n}\n\n/**\n * Any custom event name string not in the standard list of recommended\n * event names.\n * @public\n */\nexport type CustomEventName<T> = T extends EventNameString ? never : T;\n","/**\n * Firebase Analytics\n *\n * @packageDocumentation\n */\n\n/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { registerVersion, _registerComponent } from '@firebase/app';\nimport { FirebaseAnalyticsInternal } from '@firebase/analytics-interop-types';\nimport { factory } from './factory';\nimport { ANALYTICS_TYPE } from './constants';\nimport {\n  Component,\n  ComponentType,\n  ComponentContainer,\n  InstanceFactoryOptions\n} from '@firebase/component';\nimport { ERROR_FACTORY, AnalyticsError } from './errors';\nimport { logEvent } from './api';\nimport { name, version } from '../package.json';\nimport { AnalyticsCallOptions } from './public-types';\nimport '@firebase/installations';\n\ndeclare global {\n  interface Window {\n    [key: string]: unknown;\n  }\n}\n\nfunction registerAnalytics(): void {\n  _registerComponent(\n    new Component(\n      ANALYTICS_TYPE,\n      (container, { options: analyticsOptions }: InstanceFactoryOptions) => {\n        // getImmediate for FirebaseApp will always succeed\n        const app = container.getProvider('app').getImmediate();\n        const installations = container\n          .getProvider('installations-internal')\n          .getImmediate();\n\n        return factory(app, installations, analyticsOptions);\n      },\n      ComponentType.PUBLIC\n    )\n  );\n\n  _registerComponent(\n    new Component('analytics-internal', internalFactory, ComponentType.PRIVATE)\n  );\n\n  registerVersion(name, version);\n  // BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation\n  registerVersion(name, version, '__BUILD_TARGET__');\n\n  function internalFactory(\n    container: ComponentContainer\n  ): FirebaseAnalyticsInternal {\n    try {\n      const analytics = container.getProvider(ANALYTICS_TYPE).getImmediate();\n      return {\n        logEvent: (\n          eventName: string,\n          eventParams?: { [key: string]: unknown },\n          options?: AnalyticsCallOptions\n        ) => logEvent(analytics, eventName, eventParams, options)\n      };\n    } catch (e) {\n      throw ERROR_FACTORY.create(AnalyticsError.INTEROP_COMPONENT_REG_FAILED, {\n        reason: e\n      });\n    }\n  }\n}\n\nregisterAnalytics();\n\nexport * from './api';\nexport * from './public-types';\n"]},"metadata":{},"sourceType":"module"}