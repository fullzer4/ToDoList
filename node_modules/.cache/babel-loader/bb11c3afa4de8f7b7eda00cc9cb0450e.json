{"ast":null,"code":"import firebase from '@firebase/app-compat';\nimport * as exp from '@firebase/auth/internal';\nimport { Component } from '@firebase/component';\nimport { isBrowserExtension, isReactNative, isNode, getUA, isIE, isIndexedDBAvailable, FirebaseError } from '@firebase/util';\nvar name = \"@firebase/auth-compat\";\nvar version = \"0.2.15\";\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nconst CORDOVA_ONDEVICEREADY_TIMEOUT_MS = 1000;\n\nfunction _getCurrentScheme() {\n  var _a;\n\n  return ((_a = self === null || self === void 0 ? void 0 : self.location) === null || _a === void 0 ? void 0 : _a.protocol) || null;\n}\n/**\r\n * @return {boolean} Whether the current environment is http or https.\r\n */\n\n\nfunction _isHttpOrHttps() {\n  return _getCurrentScheme() === 'http:' || _getCurrentScheme() === 'https:';\n}\n/**\r\n * @param {?string=} ua The user agent.\r\n * @return {boolean} Whether the app is rendered in a mobile iOS or Android\r\n *     Cordova environment.\r\n */\n\n\nfunction _isAndroidOrIosCordovaScheme() {\n  let ua = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : getUA();\n  return !!((_getCurrentScheme() === 'file:' || _getCurrentScheme() === 'ionic:' || _getCurrentScheme() === 'capacitor:') && ua.toLowerCase().match(/iphone|ipad|ipod|android/));\n}\n/**\r\n * @return {boolean} Whether the environment is a native environment, where\r\n *     CORS checks do not apply.\r\n */\n\n\nfunction _isNativeEnvironment() {\n  return isReactNative() || isNode();\n}\n/**\r\n * Checks whether the user agent is IE11.\r\n * @return {boolean} True if it is IE11.\r\n */\n\n\nfunction _isIe11() {\n  return isIE() && (document === null || document === void 0 ? void 0 : document.documentMode) === 11;\n}\n/**\r\n * Checks whether the user agent is Edge.\r\n * @param {string} userAgent The browser user agent string.\r\n * @return {boolean} True if it is Edge.\r\n */\n\n\nfunction _isEdge() {\n  let ua = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : getUA();\n  return /Edge\\/\\d+/.test(ua);\n}\n/**\r\n * @param {?string=} opt_userAgent The navigator user agent.\r\n * @return {boolean} Whether local storage is not synchronized between an iframe\r\n *     and a popup of the same domain.\r\n */\n\n\nfunction _isLocalStorageNotSynchronized() {\n  let ua = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : getUA();\n  return _isIe11() || _isEdge(ua);\n}\n/** @return {boolean} Whether web storage is supported. */\n\n\nfunction _isWebStorageSupported() {\n  try {\n    const storage = self.localStorage;\n\n    const key = exp._generateEventId();\n\n    if (storage) {\n      // setItem will throw an exception if we cannot access WebStorage (e.g.,\n      // Safari in private mode).\n      storage['setItem'](key, '1');\n      storage['removeItem'](key); // For browsers where iframe web storage does not synchronize with a popup\n      // of the same domain, indexedDB is used for persistent storage. These\n      // browsers include IE11 and Edge.\n      // Make sure it is supported (IE11 and Edge private mode does not support\n      // that).\n\n      if (_isLocalStorageNotSynchronized()) {\n        // In such browsers, if indexedDB is not supported, an iframe cannot be\n        // notified of the popup sign in result.\n        return isIndexedDBAvailable();\n      }\n\n      return true;\n    }\n  } catch (e) {\n    // localStorage is not available from a worker. Test availability of\n    // indexedDB.\n    return _isWorker() && isIndexedDBAvailable();\n  }\n\n  return false;\n}\n/**\r\n * @param {?Object=} global The optional global scope.\r\n * @return {boolean} Whether current environment is a worker.\r\n */\n\n\nfunction _isWorker() {\n  // WorkerGlobalScope only defined in worker environment.\n  return typeof global !== 'undefined' && 'WorkerGlobalScope' in global && 'importScripts' in global;\n}\n\nfunction _isPopupRedirectSupported() {\n  return (_isHttpOrHttps() || isBrowserExtension() || _isAndroidOrIosCordovaScheme()) && // React Native with remote debugging reports its location.protocol as\n  // http.\n  !_isNativeEnvironment() && // Local storage has to be supported for browser popup and redirect\n  // operations to work.\n  _isWebStorageSupported() && // DOM, popups and redirects are not supported within a worker.\n  !_isWorker();\n}\n/** Quick check that indicates the platform *may* be Cordova */\n\n\nfunction _isLikelyCordova() {\n  return _isAndroidOrIosCordovaScheme() && typeof document !== 'undefined';\n}\n\nasync function _isCordova() {\n  if (!_isLikelyCordova()) {\n    return false;\n  }\n\n  return new Promise(resolve => {\n    const timeoutId = setTimeout(() => {\n      // We've waited long enough; the telltale Cordova event didn't happen\n      resolve(false);\n    }, CORDOVA_ONDEVICEREADY_TIMEOUT_MS);\n    document.addEventListener('deviceready', () => {\n      clearTimeout(timeoutId);\n      resolve(true);\n    });\n  });\n}\n\nfunction _getSelfWindow() {\n  return typeof window !== 'undefined' ? window : null;\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nconst Persistence = {\n  LOCAL: 'local',\n  NONE: 'none',\n  SESSION: 'session'\n};\nconst _assert$3 = exp._assert;\nconst PERSISTENCE_KEY = 'persistence';\n/**\r\n * Validates that an argument is a valid persistence value. If an invalid type\r\n * is specified, an error is thrown synchronously.\r\n */\n\nfunction _validatePersistenceArgument(auth, persistence) {\n  _assert$3(Object.values(Persistence).includes(persistence), auth, \"invalid-persistence-type\"\n  /* INVALID_PERSISTENCE */\n  ); // Validate if the specified type is supported in the current environment.\n\n\n  if (isReactNative()) {\n    // This is only supported in a browser.\n    _assert$3(persistence !== Persistence.SESSION, auth, \"unsupported-persistence-type\"\n    /* UNSUPPORTED_PERSISTENCE */\n    );\n\n    return;\n  }\n\n  if (isNode()) {\n    // Only none is supported in Node.js.\n    _assert$3(persistence === Persistence.NONE, auth, \"unsupported-persistence-type\"\n    /* UNSUPPORTED_PERSISTENCE */\n    );\n\n    return;\n  }\n\n  if (_isWorker()) {\n    // In a worker environment, either LOCAL or NONE are supported.\n    // If indexedDB not supported and LOCAL provided, throw an error\n    _assert$3(persistence === Persistence.NONE || persistence === Persistence.LOCAL && isIndexedDBAvailable(), auth, \"unsupported-persistence-type\"\n    /* UNSUPPORTED_PERSISTENCE */\n    );\n\n    return;\n  } // This is restricted by what the browser supports.\n\n\n  _assert$3(persistence === Persistence.NONE || _isWebStorageSupported(), auth, \"unsupported-persistence-type\"\n  /* UNSUPPORTED_PERSISTENCE */\n  );\n}\n\nasync function _savePersistenceForRedirect(auth) {\n  await auth._initializationPromise;\n  const session = getSessionStorageIfAvailable();\n\n  const key = exp._persistenceKeyName(PERSISTENCE_KEY, auth.config.apiKey, auth.name);\n\n  if (session) {\n    session.setItem(key, auth._getPersistence());\n  }\n}\n\nfunction _getPersistencesFromRedirect(apiKey, appName) {\n  const session = getSessionStorageIfAvailable();\n\n  if (!session) {\n    return [];\n  }\n\n  const key = exp._persistenceKeyName(PERSISTENCE_KEY, apiKey, appName);\n\n  const persistence = session.getItem(key);\n\n  switch (persistence) {\n    case Persistence.NONE:\n      return [exp.inMemoryPersistence];\n\n    case Persistence.LOCAL:\n      return [exp.indexedDBLocalPersistence, exp.browserSessionPersistence];\n\n    case Persistence.SESSION:\n      return [exp.browserSessionPersistence];\n\n    default:\n      return [];\n  }\n}\n/** Returns session storage, or null if the property access errors */\n\n\nfunction getSessionStorageIfAvailable() {\n  var _a;\n\n  try {\n    return ((_a = _getSelfWindow()) === null || _a === void 0 ? void 0 : _a.sessionStorage) || null;\n  } catch (e) {\n    return null;\n  }\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nconst _assert$2 = exp._assert;\n/** Platform-agnostic popup-redirect resolver */\n\nclass CompatPopupRedirectResolver {\n  constructor() {\n    // Create both resolvers for dynamic resolution later\n    this.browserResolver = exp._getInstance(exp.browserPopupRedirectResolver);\n    this.cordovaResolver = exp._getInstance(exp.cordovaPopupRedirectResolver); // The actual resolver in use: either browserResolver or cordovaResolver.\n\n    this.underlyingResolver = null;\n    this._redirectPersistence = exp.browserSessionPersistence;\n    this._completeRedirectFn = exp._getRedirectResult;\n    this._overrideRedirectResult = exp._overrideRedirectResult;\n  }\n\n  async _initialize(auth) {\n    await this.selectUnderlyingResolver();\n    return this.assertedUnderlyingResolver._initialize(auth);\n  }\n\n  async _openPopup(auth, provider, authType, eventId) {\n    await this.selectUnderlyingResolver();\n    return this.assertedUnderlyingResolver._openPopup(auth, provider, authType, eventId);\n  }\n\n  async _openRedirect(auth, provider, authType, eventId) {\n    await this.selectUnderlyingResolver();\n    return this.assertedUnderlyingResolver._openRedirect(auth, provider, authType, eventId);\n  }\n\n  _isIframeWebStorageSupported(auth, cb) {\n    this.assertedUnderlyingResolver._isIframeWebStorageSupported(auth, cb);\n  }\n\n  _originValidation(auth) {\n    return this.assertedUnderlyingResolver._originValidation(auth);\n  }\n\n  get _shouldInitProactively() {\n    return _isLikelyCordova() || this.browserResolver._shouldInitProactively;\n  }\n\n  get assertedUnderlyingResolver() {\n    _assert$2(this.underlyingResolver, \"internal-error\"\n    /* INTERNAL_ERROR */\n    );\n\n    return this.underlyingResolver;\n  }\n\n  async selectUnderlyingResolver() {\n    if (this.underlyingResolver) {\n      return;\n    } // We haven't yet determined whether or not we're in Cordova; go ahead\n    // and determine that state now.\n\n\n    const isCordova = await _isCordova();\n    this.underlyingResolver = isCordova ? this.cordovaResolver : this.browserResolver;\n  }\n\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nfunction unwrap(object) {\n  return object.unwrap();\n}\n\nfunction wrapped(object) {\n  return object.wrapped();\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nfunction credentialFromResponse(userCredential) {\n  return credentialFromObject(userCredential);\n}\n\nfunction attachExtraErrorFields(auth, e) {\n  var _a; // The response contains all fields from the server which may or may not\n  // actually match the underlying type\n\n\n  const response = (_a = e.customData) === null || _a === void 0 ? void 0 : _a._tokenResponse;\n\n  if (e.code === 'auth/multi-factor-auth-required') {\n    const mfaErr = e;\n    mfaErr.resolver = new MultiFactorResolver(auth, exp.getMultiFactorResolver(auth, e));\n  } else if (response) {\n    const credential = credentialFromObject(e);\n    const credErr = e;\n\n    if (credential) {\n      credErr.credential = credential;\n      credErr.tenantId = response.tenantId || undefined;\n      credErr.email = response.email || undefined;\n      credErr.phoneNumber = response.phoneNumber || undefined;\n    }\n  }\n}\n\nfunction credentialFromObject(object) {\n  const {\n    _tokenResponse\n  } = object instanceof FirebaseError ? object.customData : object;\n\n  if (!_tokenResponse) {\n    return null;\n  } // Handle phone Auth credential responses, as they have a different format\n  // from other backend responses (i.e. no providerId). This is also only the\n  // case for user credentials (does not work for errors).\n\n\n  if (!(object instanceof FirebaseError)) {\n    if ('temporaryProof' in _tokenResponse && 'phoneNumber' in _tokenResponse) {\n      return exp.PhoneAuthProvider.credentialFromResult(object);\n    }\n  }\n\n  const providerId = _tokenResponse.providerId; // Email and password is not supported as there is no situation where the\n  // server would return the password to the client.\n\n  if (!providerId || providerId === exp.ProviderId.PASSWORD) {\n    return null;\n  }\n\n  let provider;\n\n  switch (providerId) {\n    case exp.ProviderId.GOOGLE:\n      provider = exp.GoogleAuthProvider;\n      break;\n\n    case exp.ProviderId.FACEBOOK:\n      provider = exp.FacebookAuthProvider;\n      break;\n\n    case exp.ProviderId.GITHUB:\n      provider = exp.GithubAuthProvider;\n      break;\n\n    case exp.ProviderId.TWITTER:\n      provider = exp.TwitterAuthProvider;\n      break;\n\n    default:\n      const {\n        oauthIdToken,\n        oauthAccessToken,\n        oauthTokenSecret,\n        pendingToken,\n        nonce\n      } = _tokenResponse;\n\n      if (!oauthAccessToken && !oauthTokenSecret && !oauthIdToken && !pendingToken) {\n        return null;\n      } // TODO(avolkovi): uncomment this and get it working with SAML & OIDC\n\n\n      if (pendingToken) {\n        if (providerId.startsWith('saml.')) {\n          return exp.SAMLAuthCredential._create(providerId, pendingToken);\n        } else {\n          // OIDC and non-default providers excluding Twitter.\n          return exp.OAuthCredential._fromParams({\n            providerId,\n            signInMethod: providerId,\n            pendingToken,\n            idToken: oauthIdToken,\n            accessToken: oauthAccessToken\n          });\n        }\n      }\n\n      return new exp.OAuthProvider(providerId).credential({\n        idToken: oauthIdToken,\n        accessToken: oauthAccessToken,\n        rawNonce: nonce\n      });\n  }\n\n  return object instanceof FirebaseError ? provider.credentialFromError(object) : provider.credentialFromResult(object);\n}\n\nfunction convertCredential(auth, credentialPromise) {\n  return credentialPromise.catch(e => {\n    if (e instanceof FirebaseError) {\n      attachExtraErrorFields(auth, e);\n    }\n\n    throw e;\n  }).then(credential => {\n    const operationType = credential.operationType;\n    const user = credential.user;\n    return {\n      operationType,\n      credential: credentialFromResponse(credential),\n      additionalUserInfo: exp.getAdditionalUserInfo(credential),\n      user: User.getOrCreate(user)\n    };\n  });\n}\n\nasync function convertConfirmationResult(auth, confirmationResultPromise) {\n  const confirmationResultExp = await confirmationResultPromise;\n  return {\n    verificationId: confirmationResultExp.verificationId,\n    confirm: verificationCode => convertCredential(auth, confirmationResultExp.confirm(verificationCode))\n  };\n}\n\nclass MultiFactorResolver {\n  constructor(auth, resolver) {\n    this.resolver = resolver;\n    this.auth = wrapped(auth);\n  }\n\n  get session() {\n    return this.resolver.session;\n  }\n\n  get hints() {\n    return this.resolver.hints;\n  }\n\n  resolveSignIn(assertion) {\n    return convertCredential(unwrap(this.auth), this.resolver.resolveSignIn(assertion));\n  }\n\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nclass User {\n  constructor(_delegate) {\n    this._delegate = _delegate;\n    this.multiFactor = exp.multiFactor(_delegate);\n  }\n\n  static getOrCreate(user) {\n    if (!User.USER_MAP.has(user)) {\n      User.USER_MAP.set(user, new User(user));\n    }\n\n    return User.USER_MAP.get(user);\n  }\n\n  delete() {\n    return this._delegate.delete();\n  }\n\n  reload() {\n    return this._delegate.reload();\n  }\n\n  toJSON() {\n    return this._delegate.toJSON();\n  }\n\n  getIdTokenResult(forceRefresh) {\n    return this._delegate.getIdTokenResult(forceRefresh);\n  }\n\n  getIdToken(forceRefresh) {\n    return this._delegate.getIdToken(forceRefresh);\n  }\n\n  linkAndRetrieveDataWithCredential(credential) {\n    return this.linkWithCredential(credential);\n  }\n\n  async linkWithCredential(credential) {\n    return convertCredential(this.auth, exp.linkWithCredential(this._delegate, credential));\n  }\n\n  async linkWithPhoneNumber(phoneNumber, applicationVerifier) {\n    return convertConfirmationResult(this.auth, exp.linkWithPhoneNumber(this._delegate, phoneNumber, applicationVerifier));\n  }\n\n  async linkWithPopup(provider) {\n    return convertCredential(this.auth, exp.linkWithPopup(this._delegate, provider, CompatPopupRedirectResolver));\n  }\n\n  async linkWithRedirect(provider) {\n    await _savePersistenceForRedirect(exp._castAuth(this.auth));\n    return exp.linkWithRedirect(this._delegate, provider, CompatPopupRedirectResolver);\n  }\n\n  reauthenticateAndRetrieveDataWithCredential(credential) {\n    return this.reauthenticateWithCredential(credential);\n  }\n\n  async reauthenticateWithCredential(credential) {\n    return convertCredential(this.auth, exp.reauthenticateWithCredential(this._delegate, credential));\n  }\n\n  reauthenticateWithPhoneNumber(phoneNumber, applicationVerifier) {\n    return convertConfirmationResult(this.auth, exp.reauthenticateWithPhoneNumber(this._delegate, phoneNumber, applicationVerifier));\n  }\n\n  reauthenticateWithPopup(provider) {\n    return convertCredential(this.auth, exp.reauthenticateWithPopup(this._delegate, provider, CompatPopupRedirectResolver));\n  }\n\n  async reauthenticateWithRedirect(provider) {\n    await _savePersistenceForRedirect(exp._castAuth(this.auth));\n    return exp.reauthenticateWithRedirect(this._delegate, provider, CompatPopupRedirectResolver);\n  }\n\n  sendEmailVerification(actionCodeSettings) {\n    return exp.sendEmailVerification(this._delegate, actionCodeSettings);\n  }\n\n  async unlink(providerId) {\n    await exp.unlink(this._delegate, providerId);\n    return this;\n  }\n\n  updateEmail(newEmail) {\n    return exp.updateEmail(this._delegate, newEmail);\n  }\n\n  updatePassword(newPassword) {\n    return exp.updatePassword(this._delegate, newPassword);\n  }\n\n  updatePhoneNumber(phoneCredential) {\n    return exp.updatePhoneNumber(this._delegate, phoneCredential);\n  }\n\n  updateProfile(profile) {\n    return exp.updateProfile(this._delegate, profile);\n  }\n\n  verifyBeforeUpdateEmail(newEmail, actionCodeSettings) {\n    return exp.verifyBeforeUpdateEmail(this._delegate, newEmail, actionCodeSettings);\n  }\n\n  get emailVerified() {\n    return this._delegate.emailVerified;\n  }\n\n  get isAnonymous() {\n    return this._delegate.isAnonymous;\n  }\n\n  get metadata() {\n    return this._delegate.metadata;\n  }\n\n  get phoneNumber() {\n    return this._delegate.phoneNumber;\n  }\n\n  get providerData() {\n    return this._delegate.providerData;\n  }\n\n  get refreshToken() {\n    return this._delegate.refreshToken;\n  }\n\n  get tenantId() {\n    return this._delegate.tenantId;\n  }\n\n  get displayName() {\n    return this._delegate.displayName;\n  }\n\n  get email() {\n    return this._delegate.email;\n  }\n\n  get photoURL() {\n    return this._delegate.photoURL;\n  }\n\n  get providerId() {\n    return this._delegate.providerId;\n  }\n\n  get uid() {\n    return this._delegate.uid;\n  }\n\n  get auth() {\n    return this._delegate.auth;\n  }\n\n} // Maintain a map so that there's always a 1:1 mapping between new User and\n// legacy compat users\n\n\nUser.USER_MAP = new WeakMap();\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nconst _assert$1 = exp._assert;\n\nclass Auth {\n  constructor(app, provider) {\n    this.app = app;\n\n    if (provider.isInitialized()) {\n      this._delegate = provider.getImmediate();\n      this.linkUnderlyingAuth();\n      return;\n    }\n\n    const {\n      apiKey\n    } = app.options; // TODO: platform needs to be determined using heuristics\n\n    _assert$1(apiKey, \"invalid-api-key\"\n    /* INVALID_API_KEY */\n    , {\n      appName: app.name\n    }); // TODO: platform needs to be determined using heuristics\n\n\n    _assert$1(apiKey, \"invalid-api-key\"\n    /* INVALID_API_KEY */\n    , {\n      appName: app.name\n    }); // Only use a popup/redirect resolver in browser environments\n\n\n    const resolver = typeof window !== 'undefined' ? CompatPopupRedirectResolver : undefined;\n    this._delegate = provider.initialize({\n      options: {\n        persistence: buildPersistenceHierarchy(apiKey, app.name),\n        popupRedirectResolver: resolver\n      }\n    });\n\n    this._delegate._updateErrorMap(exp.debugErrorMap);\n\n    this.linkUnderlyingAuth();\n  }\n\n  get emulatorConfig() {\n    return this._delegate.emulatorConfig;\n  }\n\n  get currentUser() {\n    if (!this._delegate.currentUser) {\n      return null;\n    }\n\n    return User.getOrCreate(this._delegate.currentUser);\n  }\n\n  get languageCode() {\n    return this._delegate.languageCode;\n  }\n\n  set languageCode(languageCode) {\n    this._delegate.languageCode = languageCode;\n  }\n\n  get settings() {\n    return this._delegate.settings;\n  }\n\n  get tenantId() {\n    return this._delegate.tenantId;\n  }\n\n  set tenantId(tid) {\n    this._delegate.tenantId = tid;\n  }\n\n  useDeviceLanguage() {\n    this._delegate.useDeviceLanguage();\n  }\n\n  signOut() {\n    return this._delegate.signOut();\n  }\n\n  useEmulator(url, options) {\n    exp.connectAuthEmulator(this._delegate, url, options);\n  }\n\n  applyActionCode(code) {\n    return exp.applyActionCode(this._delegate, code);\n  }\n\n  checkActionCode(code) {\n    return exp.checkActionCode(this._delegate, code);\n  }\n\n  confirmPasswordReset(code, newPassword) {\n    return exp.confirmPasswordReset(this._delegate, code, newPassword);\n  }\n\n  async createUserWithEmailAndPassword(email, password) {\n    return convertCredential(this._delegate, exp.createUserWithEmailAndPassword(this._delegate, email, password));\n  }\n\n  fetchProvidersForEmail(email) {\n    return this.fetchSignInMethodsForEmail(email);\n  }\n\n  fetchSignInMethodsForEmail(email) {\n    return exp.fetchSignInMethodsForEmail(this._delegate, email);\n  }\n\n  isSignInWithEmailLink(emailLink) {\n    return exp.isSignInWithEmailLink(this._delegate, emailLink);\n  }\n\n  async getRedirectResult() {\n    _assert$1(_isPopupRedirectSupported(), this._delegate, \"operation-not-supported-in-this-environment\"\n    /* OPERATION_NOT_SUPPORTED */\n    );\n\n    const credential = await exp.getRedirectResult(this._delegate, CompatPopupRedirectResolver);\n\n    if (!credential) {\n      return {\n        credential: null,\n        user: null\n      };\n    }\n\n    return convertCredential(this._delegate, Promise.resolve(credential));\n  } // This function should only be called by frameworks (e.g. FirebaseUI-web) to log their usage.\n  // It is not intended for direct use by developer apps. NO jsdoc here to intentionally leave it\n  // out of autogenerated documentation pages to reduce accidental misuse.\n\n\n  addFrameworkForLogging(framework) {\n    exp.addFrameworkForLogging(this._delegate, framework);\n  }\n\n  onAuthStateChanged(nextOrObserver, errorFn, completed) {\n    const {\n      next,\n      error,\n      complete\n    } = wrapObservers(nextOrObserver, errorFn, completed);\n    return this._delegate.onAuthStateChanged(next, error, complete);\n  }\n\n  onIdTokenChanged(nextOrObserver, errorFn, completed) {\n    const {\n      next,\n      error,\n      complete\n    } = wrapObservers(nextOrObserver, errorFn, completed);\n    return this._delegate.onIdTokenChanged(next, error, complete);\n  }\n\n  sendSignInLinkToEmail(email, actionCodeSettings) {\n    return exp.sendSignInLinkToEmail(this._delegate, email, actionCodeSettings);\n  }\n\n  sendPasswordResetEmail(email, actionCodeSettings) {\n    return exp.sendPasswordResetEmail(this._delegate, email, actionCodeSettings || undefined);\n  }\n\n  async setPersistence(persistence) {\n    _validatePersistenceArgument(this._delegate, persistence);\n\n    let converted;\n\n    switch (persistence) {\n      case Persistence.SESSION:\n        converted = exp.browserSessionPersistence;\n        break;\n\n      case Persistence.LOCAL:\n        // Not using isIndexedDBAvailable() since it only checks if indexedDB is defined.\n        const isIndexedDBFullySupported = await exp._getInstance(exp.indexedDBLocalPersistence)._isAvailable();\n        converted = isIndexedDBFullySupported ? exp.indexedDBLocalPersistence : exp.browserLocalPersistence;\n        break;\n\n      case Persistence.NONE:\n        converted = exp.inMemoryPersistence;\n        break;\n\n      default:\n        return exp._fail(\"argument-error\"\n        /* ARGUMENT_ERROR */\n        , {\n          appName: this._delegate.name\n        });\n    }\n\n    return this._delegate.setPersistence(converted);\n  }\n\n  signInAndRetrieveDataWithCredential(credential) {\n    return this.signInWithCredential(credential);\n  }\n\n  signInAnonymously() {\n    return convertCredential(this._delegate, exp.signInAnonymously(this._delegate));\n  }\n\n  signInWithCredential(credential) {\n    return convertCredential(this._delegate, exp.signInWithCredential(this._delegate, credential));\n  }\n\n  signInWithCustomToken(token) {\n    return convertCredential(this._delegate, exp.signInWithCustomToken(this._delegate, token));\n  }\n\n  signInWithEmailAndPassword(email, password) {\n    return convertCredential(this._delegate, exp.signInWithEmailAndPassword(this._delegate, email, password));\n  }\n\n  signInWithEmailLink(email, emailLink) {\n    return convertCredential(this._delegate, exp.signInWithEmailLink(this._delegate, email, emailLink));\n  }\n\n  signInWithPhoneNumber(phoneNumber, applicationVerifier) {\n    return convertConfirmationResult(this._delegate, exp.signInWithPhoneNumber(this._delegate, phoneNumber, applicationVerifier));\n  }\n\n  async signInWithPopup(provider) {\n    _assert$1(_isPopupRedirectSupported(), this._delegate, \"operation-not-supported-in-this-environment\"\n    /* OPERATION_NOT_SUPPORTED */\n    );\n\n    return convertCredential(this._delegate, exp.signInWithPopup(this._delegate, provider, CompatPopupRedirectResolver));\n  }\n\n  async signInWithRedirect(provider) {\n    _assert$1(_isPopupRedirectSupported(), this._delegate, \"operation-not-supported-in-this-environment\"\n    /* OPERATION_NOT_SUPPORTED */\n    );\n\n    await _savePersistenceForRedirect(this._delegate);\n    return exp.signInWithRedirect(this._delegate, provider, CompatPopupRedirectResolver);\n  }\n\n  updateCurrentUser(user) {\n    // remove ts-ignore once overloads are defined for exp functions to accept compat objects\n    // @ts-ignore\n    return this._delegate.updateCurrentUser(user);\n  }\n\n  verifyPasswordResetCode(code) {\n    return exp.verifyPasswordResetCode(this._delegate, code);\n  }\n\n  unwrap() {\n    return this._delegate;\n  }\n\n  _delete() {\n    return this._delegate._delete();\n  }\n\n  linkUnderlyingAuth() {\n    this._delegate.wrapped = () => this;\n  }\n\n}\n\nAuth.Persistence = Persistence;\n\nfunction wrapObservers(nextOrObserver, error, complete) {\n  let next = nextOrObserver;\n\n  if (typeof nextOrObserver !== 'function') {\n    ({\n      next,\n      error,\n      complete\n    } = nextOrObserver);\n  } // We know 'next' is now a function\n\n\n  const oldNext = next;\n\n  const newNext = user => oldNext(user && User.getOrCreate(user));\n\n  return {\n    next: newNext,\n    error: error,\n    complete\n  };\n}\n\nfunction buildPersistenceHierarchy(apiKey, appName) {\n  // Note this is slightly different behavior: in this case, the stored\n  // persistence is checked *first* rather than last. This is because we want\n  // to prefer stored persistence type in the hierarchy. This is an empty\n  // array if window is not available or there is no pending redirect\n  const persistences = _getPersistencesFromRedirect(apiKey, appName); // If \"self\" is available, add indexedDB\n\n\n  if (typeof self !== 'undefined' && !persistences.includes(exp.indexedDBLocalPersistence)) {\n    persistences.push(exp.indexedDBLocalPersistence);\n  } // If \"window\" is available, add HTML Storage persistences\n\n\n  if (typeof window !== 'undefined') {\n    for (const persistence of [exp.browserLocalPersistence, exp.browserSessionPersistence]) {\n      if (!persistences.includes(persistence)) {\n        persistences.push(persistence);\n      }\n    }\n  } // Add in-memory as a final fallback\n\n\n  if (!persistences.includes(exp.inMemoryPersistence)) {\n    persistences.push(exp.inMemoryPersistence);\n  }\n\n  return persistences;\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nclass PhoneAuthProvider {\n  constructor() {\n    this.providerId = 'phone'; // TODO: remove ts-ignore when moving types from auth-types to auth-compat\n    // @ts-ignore\n\n    this._delegate = new exp.PhoneAuthProvider(unwrap(firebase.auth()));\n  }\n\n  static credential(verificationId, verificationCode) {\n    return exp.PhoneAuthProvider.credential(verificationId, verificationCode);\n  }\n\n  verifyPhoneNumber(phoneInfoOptions, applicationVerifier) {\n    return this._delegate.verifyPhoneNumber( // The implementation matches but the types are subtly incompatible\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    phoneInfoOptions, applicationVerifier);\n  }\n\n  unwrap() {\n    return this._delegate;\n  }\n\n}\n\nPhoneAuthProvider.PHONE_SIGN_IN_METHOD = exp.PhoneAuthProvider.PHONE_SIGN_IN_METHOD;\nPhoneAuthProvider.PROVIDER_ID = exp.PhoneAuthProvider.PROVIDER_ID;\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nconst _assert = exp._assert;\n\nclass RecaptchaVerifier {\n  constructor(container, parameters) {\n    let app = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : firebase.app();\n\n    var _a; // API key is required for web client RPC calls.\n\n\n    _assert((_a = app.options) === null || _a === void 0 ? void 0 : _a.apiKey, \"invalid-api-key\"\n    /* INVALID_API_KEY */\n    , {\n      appName: app.name\n    });\n\n    this._delegate = new exp.RecaptchaVerifier(container, // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    parameters, // TODO: remove ts-ignore when moving types from auth-types to auth-compat\n    // @ts-ignore\n    app.auth());\n    this.type = this._delegate.type;\n  }\n\n  clear() {\n    this._delegate.clear();\n  }\n\n  render() {\n    return this._delegate.render();\n  }\n\n  verify() {\n    return this._delegate.verify();\n  }\n\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nconst AUTH_TYPE = 'auth-compat'; // Create auth components to register with firebase.\n// Provides Auth public APIs.\n\nfunction registerAuthCompat(instance) {\n  instance.INTERNAL.registerComponent(new Component(AUTH_TYPE, container => {\n    // getImmediate for FirebaseApp will always succeed\n    const app = container.getProvider('app-compat').getImmediate();\n    const authProvider = container.getProvider('auth');\n    return new Auth(app, authProvider);\n  }, \"PUBLIC\"\n  /* PUBLIC */\n  ).setServiceProps({\n    ActionCodeInfo: {\n      Operation: {\n        EMAIL_SIGNIN: exp.ActionCodeOperation.EMAIL_SIGNIN,\n        PASSWORD_RESET: exp.ActionCodeOperation.PASSWORD_RESET,\n        RECOVER_EMAIL: exp.ActionCodeOperation.RECOVER_EMAIL,\n        REVERT_SECOND_FACTOR_ADDITION: exp.ActionCodeOperation.REVERT_SECOND_FACTOR_ADDITION,\n        VERIFY_AND_CHANGE_EMAIL: exp.ActionCodeOperation.VERIFY_AND_CHANGE_EMAIL,\n        VERIFY_EMAIL: exp.ActionCodeOperation.VERIFY_EMAIL\n      }\n    },\n    EmailAuthProvider: exp.EmailAuthProvider,\n    FacebookAuthProvider: exp.FacebookAuthProvider,\n    GithubAuthProvider: exp.GithubAuthProvider,\n    GoogleAuthProvider: exp.GoogleAuthProvider,\n    OAuthProvider: exp.OAuthProvider,\n    SAMLAuthProvider: exp.SAMLAuthProvider,\n    PhoneAuthProvider: PhoneAuthProvider,\n    PhoneMultiFactorGenerator: exp.PhoneMultiFactorGenerator,\n    RecaptchaVerifier: RecaptchaVerifier,\n    TwitterAuthProvider: exp.TwitterAuthProvider,\n    Auth,\n    AuthCredential: exp.AuthCredential,\n    Error: FirebaseError\n  }).setInstantiationMode(\"LAZY\"\n  /* LAZY */\n  ).setMultipleInstances(false));\n  instance.registerVersion(name, version);\n}\n\nregisterAuthCompat(firebase);","map":{"version":3,"mappings":";;;;;;AAAA;;;;;;;;;;;;;;;AAeG;;AAkBH,MAAMA,gCAAgC,GAAG,IAAzC;;AAEA,SAASC,iBAAT,GAA0B;;;EACxB,OAAO,WAAI,SAAJ,QAAI,WAAJ,GAAI,MAAJ,OAAI,CAAEC,QAAN,MAAc,IAAd,IAAcC,aAAd,GAAc,MAAd,GAAcA,GAAEC,QAAhB,KAA4B,IAAnC;AACD;AAED;;AAEG;;;AACH,SAASC,cAAT,GAAuB;EACrB,OAAOJ,iBAAiB,OAAO,OAAxB,IAAmCA,iBAAiB,OAAO,QAAlE;AACD;AAED;;;;AAIG;;;AACa,wCAAiD;EAAA,IAApBK,EAAoB,uEAAPC,KAAK,EAAE;EAC/D,OAAO,CAAC,EACN,CAACN,iBAAiB,OAAO,OAAxB,IACCA,iBAAiB,OAAO,QADzB,IAECA,iBAAiB,OAAO,YAF1B,KAGAK,EAAE,CAACE,WAAH,GAAiBC,KAAjB,CAAuB,0BAAvB,CAJM,CAAR;AAMD;AAED;;;AAGG;;;AACH,SAASC,oBAAT,GAA6B;EAC3B,OAAOC,aAAa,MAAMC,MAAM,EAAhC;AACD;AAED;;;AAGG;;;AACH,SAASC,OAAT,GAAgB;EACd,OAAOC,IAAI,MAAM,SAAQ,SAAR,YAAQ,WAAR,GAAQ,MAAR,WAAQ,CAAEC,YAAV,MAA2B,EAA5C;AACD;AAED;;;;AAIG;;;AACH,SAASC,OAAT,GAAqC;EAAA,IAApBV,EAAoB,uEAAPC,KAAK,EAAE;EACnC,OAAO,YAAYU,IAAZ,CAAiBX,EAAjB,CAAP;AACD;AAED;;;;AAIG;;;AACH,SAASY,8BAAT,GAA4D;EAAA,IAApBZ,EAAoB,uEAAPC,KAAK,EAAE;EAC1D,OAAOM,OAAO,MAAMG,OAAO,CAACV,EAAD,CAA3B;AACD;AAED;;;SACgBa,yBAAsB;EACpC,IAAI;IACF,MAAMC,OAAO,GAAGC,IAAI,CAACC,YAArB;;IACA,MAAMC,GAAG,GAAGC,GAAI,CAACC,gBAALD,EAAZ;;IACA,IAAIJ,OAAJ,EAAa;;;MAGXA,OAAO,CAAC,SAAD,CAAP,CAAmBG,GAAnB,EAAwB,GAAxB;MACAH,OAAO,CAAC,YAAD,CAAP,CAAsBG,GAAtB,EAJW;;;;;;MAUX,IAAIL,8BAA8B,EAAlC,EAAsC;;;QAGpC,OAAOQ,oBAAoB,EAA3B;MACD;;MACD,OAAO,IAAP;IACD;EACF,CApBD,CAoBE,OAAOC,CAAP,EAAU;;;IAGV,OAAOC,SAAS,MAAMF,oBAAoB,EAA1C;EACD;;EACD,OAAO,KAAP;AACD;AAED;;;AAGG;;;SACaE,YAAS;;EAEvB,OACE,OAAOC,MAAP,KAAkB,WAAlB,IACA,uBAAuBA,MADvB,IAEA,mBAAmBA,MAHrB;AAKD;;SAEeC,4BAAyB;EACvC,OACE,CAACzB,cAAc,MACb0B,kBAAkB,EADnB,IAECC,4BAA4B,EAF9B;;EAKA,CAACtB,oBAAoB,EALrB;;EAQAS,sBAAsB,EARtB;EAUA,CAACS,SAAS,EAXZ;AAaD;AAED;;;SACgBK,mBAAgB;EAC9B,OAAOD,4BAA4B,MAAM,OAAOE,QAAP,KAAoB,WAA7D;AACD;;AAEM,eAAeC,UAAf,GAAyB;EAC9B,IAAI,CAACF,gBAAgB,EAArB,EAAyB;IACvB,OAAO,KAAP;EACD;;EAED,OAAO,IAAIG,OAAJ,CAAYC,OAAO,IAAG;IAC3B,MAAMC,SAAS,GAAGC,UAAU,CAAC,MAAK;;MAEhCF,OAAO,CAAC,KAAD,CAAP;IACD,CAH2B,EAGzBrC,gCAHyB,CAA5B;IAKAkC,QAAQ,CAACM,gBAAT,CAA0B,aAA1B,EAAyC,MAAK;MAC5CC,YAAY,CAACH,SAAD,CAAZ;MACAD,OAAO,CAAC,IAAD,CAAP;IACD,CAHD;EAID,CAVM,CAAP;AAWD;;SAEeK,iBAAc;EAC5B,OAAO,OAAOC,MAAP,KAAkB,WAAlB,GAAgCA,MAAhC,GAAyC,IAAhD;AACF;AClLA;;;;;;;;;;;;;;;AAeG;;;AAMI,MAAMC,WAAW,GAAG;EACzBC,KAAK,EAAE,OADkB;EAEzBC,IAAI,EAAE,MAFmB;EAGzBC,OAAO,EAAE;AAHgB,CAApB;AAMP,MAAMC,SAAO,GAAuBC,GAAG,CAACD,OAAxC;AAEA,MAAME,eAAe,GAAG,aAAxB;AAEA;;;AAGG;;AACa,sCACdC,IADc,EAEdC,WAFc,EAEK;EAEnBJ,SAAO,CACLK,MAAM,CAACC,MAAP,CAAcV,WAAd,EAA2BW,QAA3B,CAAoCH,WAApC,CADK,EAELD,IAFK,EAED;EAAA;EAFC,CAAPH,CAFmB;;;EAQnB,IAAIrC,aAAa,EAAjB,EAAqB;;IAEnBqC,SAAO,CACLI,WAAW,KAAKR,WAAW,CAACG,OADvB,EAELI,IAFK,EAED;IAAA;IAFC,CAAPH;;IAKA;EACD;;EACD,IAAIpC,MAAM,EAAV,EAAc;;IAEZoC,SAAO,CACLI,WAAW,KAAKR,WAAW,CAACE,IADvB,EAELK,IAFK,EAED;IAAA;IAFC,CAAPH;;IAKA;EACD;;EACD,IAAIpB,SAAS,EAAb,EAAiB;;;IAGfoB,SAAO,CACLI,WAAW,KAAKR,WAAW,CAACE,IAA5B,IACGM,WAAW,KAAKR,WAAW,CAACC,KAA5B,IAAqCnB,oBAAoB,EAFvD,EAGLyB,IAHK,EAGD;IAAA;IAHC,CAAPH;;IAMA;EACD,CApCkB;;;EAsCnBA,SAAO,CACLI,WAAW,KAAKR,WAAW,CAACE,IAA5B,IAAoC3B,sBAAsB,EADrD,EAELgC,IAFK,EAED;EAAA;EAFC,CAAPH;AAKD;;AAEM,eAAeQ,2BAAf,CACLL,IADK,EACiB;EAEtB,MAAMA,IAAI,CAACM,sBAAX;EACA,MAAMC,OAAO,GAAGC,4BAA4B,EAA5C;;EACA,MAAMpC,GAAG,GAAG0B,GAAG,CAACW,mBAAJ,CACVV,eADU,EAEVC,IAAI,CAACU,MAAL,CAAYC,MAFF,EAGVX,IAAI,CAACY,IAHK,CAAZ;;EAKA,IAAIL,OAAJ,EAAa;IACXA,OAAO,CAACM,OAAR,CAAgBzC,GAAhB,EAAqB4B,IAAI,CAACc,eAAL,EAArB;EACD;AACF;;AAEe,sCACdH,MADc,EAEdI,OAFc,EAEC;EAEf,MAAMR,OAAO,GAAGC,4BAA4B,EAA5C;;EACA,IAAI,CAACD,OAAL,EAAc;IACZ,OAAO,EAAP;EACD;;EAED,MAAMnC,GAAG,GAAG0B,GAAG,CAACW,mBAAJ,CAAwBV,eAAxB,EAAyCY,MAAzC,EAAiDI,OAAjD,CAAZ;;EACA,MAAMd,WAAW,GAAGM,OAAO,CAACS,OAAR,CAAgB5C,GAAhB,CAApB;;EAEA,QAAQ6B,WAAR;IACE,KAAKR,WAAW,CAACE,IAAjB;MACE,OAAO,CAACG,GAAG,CAACmB,mBAAL,CAAP;;IACF,KAAKxB,WAAW,CAACC,KAAjB;MACE,OAAO,CAACI,GAAG,CAACoB,yBAAL,EAAgCpB,GAAG,CAACqB,yBAApC,CAAP;;IACF,KAAK1B,WAAW,CAACG,OAAjB;MACE,OAAO,CAACE,GAAG,CAACqB,yBAAL,CAAP;;IACF;MACE,OAAO,EAAP;EARJ;AAUD;AAED;;;AACA,SAASX,4BAAT,GAAqC;;;EACnC,IAAI;IACF,OAAO,qBAAc,EAAd,MAAgB,IAAhB,IAAgBxD,aAAhB,GAAgB,MAAhB,GAAgBA,GAAEoE,cAAlB,KAAoC,IAA3C;EACD,CAFD,CAEE,OAAO5C,CAAP,EAAU;IACV,OAAO,IAAP;EACD;AACH;AChIA;;;;;;;;;;;;;;;AAeG;;;AAKH,MAAMqB,SAAO,GAAuBC,GAAG,CAACD,OAAxC;AAEA;;MACawB,4BAA2B;EAAxCC;;IAImB,KAAeC,eAAf,GACfzB,GAAG,CAAC0B,YAAJ,CAAiB1B,GAAG,CAAC2B,4BAArB,CADe;IAEA,KAAeC,eAAf,GACf5B,GAAG,CAAC0B,YAAJ,CAAiB1B,GAAG,CAAC6B,4BAArB,CADe,CANnB;;IASU,KAAkBC,kBAAlB,GAA+D,IAA/D;IACR,4BAAuB9B,GAAG,CAACqB,yBAA3B;IAEA,2BAI0CrB,GAAG,CAAC+B,kBAJ9C;IAKA,+BAA0B/B,GAAG,CAACgC,uBAA9B;EAqED;;EAnEkB,MAAXC,WAAW,CAAC/B,IAAD,EAAmB;IAClC,MAAM,KAAKgC,wBAAL,EAAN;IACA,OAAO,KAAKC,0BAAL,CAAgCF,WAAhC,CAA4C/B,IAA5C,CAAP;EACD;;EAEe,MAAVkC,UAAU,CACdlC,IADc,EAEdmC,QAFc,EAGdC,QAHc,EAIdC,OAJc,EAIE;IAEhB,MAAM,KAAKL,wBAAL,EAAN;IACA,OAAO,KAAKC,0BAAL,CAAgCC,UAAhC,CACLlC,IADK,EAELmC,QAFK,EAGLC,QAHK,EAILC,OAJK,CAAP;EAMD;;EAEkB,MAAbC,aAAa,CACjBtC,IADiB,EAEjBmC,QAFiB,EAGjBC,QAHiB,EAIjBC,OAJiB,EAID;IAEhB,MAAM,KAAKL,wBAAL,EAAN;IACA,OAAO,KAAKC,0BAAL,CAAgCK,aAAhC,CACLtC,IADK,EAELmC,QAFK,EAGLC,QAHK,EAILC,OAJK,CAAP;EAMD;;EAEDE,4BAA4B,CAC1BvC,IAD0B,EAE1BwC,EAF0B,EAEO;IAEjC,KAAKP,0BAAL,CAAgCM,4BAAhC,CAA6DvC,IAA7D,EAAmEwC,EAAnE;EACD;;EAEDC,iBAAiB,CAACzC,IAAD,EAAe;IAC9B,OAAO,KAAKiC,0BAAL,CAAgCQ,iBAAhC,CAAkDzC,IAAlD,CAAP;EACD;;EAEyB,IAAtB0C,sBAAsB;IACxB,OAAO5D,gBAAgB,MAAM,KAAKyC,eAAL,CAAqBmB,sBAAlD;EACD;;EAEqC,IAA1BT,0BAA0B;IACpCpC,SAAO,CAAC,KAAK+B,kBAAN,EAAwB;IAAA;IAAxB,CAAP/B;;IACA,OAAO,KAAK+B,kBAAZ;EACD;;EAEqC,MAAxBI,wBAAwB;IACpC,IAAI,KAAKJ,kBAAT,EAA6B;MAC3B;IACD,CAHmC;;;;IAOpC,MAAMe,SAAS,GAAG,MAAM3D,UAAU,EAAlC;IACA,KAAK4C,kBAAL,GAA0Be,SAAS,GAC/B,KAAKjB,eAD0B,GAE/B,KAAKH,eAFT;EAGD;;AArFqC;ACvBxC;;;;;;;;;;;;;;;AAeG;;;AAYG,SAAUqB,MAAV,CAAoBC,MAApB,EAAmC;EACvC,OAAQA,MAAqB,CAACD,MAAtB,EAAR;AACD;;AAEK,SAAUE,OAAV,CAAqBD,MAArB,EAAoC;EACxC,OAAQA,MAA4B,CAACC,OAA7B,EAAR;AACF;ACjCA;;;;;;;;;;;;;;;AAeG;;;AASH,SAASC,sBAAT,CACEC,cADF,EAC4C;EAE1C,OAAOC,oBAAoB,CAACD,cAAD,CAA3B;AACD;;AAED,SAASE,sBAAT,CAAgClD,IAAhC,EAAgDxB,CAAhD,EAAgE;SAAA;;;;EAG9D,MAAM2E,QAAQ,GAAG,CAACnG,MAAC,CAACoG,UAAH,MAAyD,IAAzD,IAAyDpG,aAAzD,GAAyD,MAAzD,GAAyDA,GACtEqG,cADJ;;EAEA,IAAI7E,CAAC,CAAC8E,IAAF,KAAW,iCAAf,EAAkD;IAChD,MAAMC,MAAM,GAAG/E,CAAf;IACA+E,MAAM,CAACC,QAAP,GAAkB,IAAIC,mBAAJ,CAChBzD,IADgB,EAEhBF,GAAG,CAAC4D,sBAAJ,CAA2B1D,IAA3B,EAAiCxB,CAAjC,CAFgB,CAAlB;EAID,CAND,MAMO,IAAI2E,QAAJ,EAAc;IACnB,MAAMQ,UAAU,GAAGV,oBAAoB,CAACzE,CAAD,CAAvC;IACA,MAAMoF,OAAO,GAAGpF,CAAhB;;IACA,IAAImF,UAAJ,EAAgB;MACdC,OAAO,CAACD,UAAR,GAAqBA,UAArB;MACAC,OAAO,CAACC,QAAR,GAAmBV,QAAQ,CAACU,QAAT,IAAqBC,SAAxC;MACAF,OAAO,CAACG,KAAR,GAAgBZ,QAAQ,CAACY,KAAT,IAAkBD,SAAlC;MACAF,OAAO,CAACI,WAAR,GAAsBb,QAAQ,CAACa,WAAT,IAAwBF,SAA9C;IACD;EACF;AACF;;AAED,SAASb,oBAAT,CACEJ,MADF,EAC4C;EAE1C,MAAM;IAAEQ;EAAF,IACJR,MAAM,YAAYoB,aAAlB,GAAkCpB,MAAM,CAACO,UAAzC,GAAsDP,MADxD;;EAGA,IAAI,CAACQ,cAAL,EAAqB;IACnB,OAAO,IAAP;EACD,CAPyC;;;;;EAY1C,IAAI,EAAER,MAAM,YAAYoB,aAApB,CAAJ,EAAwC;IACtC,IAAI,oBAAoBZ,cAApB,IAAsC,iBAAiBA,cAA3D,EAA2E;MACzE,OAAOvD,GAAG,CAACoE,iBAAJ,CAAsBC,oBAAtB,CAA2CtB,MAA3C,CAAP;IACD;EACF;;EAED,MAAMuB,UAAU,GAAGf,cAAc,CAACe,UAAlC,CAlB0C;;;EAsB1C,IAAI,CAACA,UAAD,IAAeA,UAAU,KAAKtE,GAAG,CAACuE,UAAJ,CAAeC,QAAjD,EAA2D;IACzD,OAAO,IAAP;EACD;;EAED,IAAInC,QAAJ;;EAIA,QAAQiC,UAAR;IACE,KAAKtE,GAAG,CAACuE,UAAJ,CAAeE,MAApB;MACEpC,QAAQ,GAAGrC,GAAG,CAAC0E,kBAAf;MACA;;IACF,KAAK1E,GAAG,CAACuE,UAAJ,CAAeI,QAApB;MACEtC,QAAQ,GAAGrC,GAAG,CAAC4E,oBAAf;MACA;;IACF,KAAK5E,GAAG,CAACuE,UAAJ,CAAeM,MAApB;MACExC,QAAQ,GAAGrC,GAAG,CAAC8E,kBAAf;MACA;;IACF,KAAK9E,GAAG,CAACuE,UAAJ,CAAeQ,OAApB;MACE1C,QAAQ,GAAGrC,GAAG,CAACgF,mBAAf;MACA;;IACF;MACE,MAAM;QACJC,YADI;QAEJC,gBAFI;QAGJC,gBAHI;QAIJC,YAJI;QAKJC;MALI,IAMF9B,cANJ;;MAOA,IACE,CAAC2B,gBAAD,IACA,CAACC,gBADD,IAEA,CAACF,YAFD,IAGA,CAACG,YAJH,EAKE;QACA,OAAO,IAAP;MACD,CAfH;;;MAiBE,IAAIA,YAAJ,EAAkB;QAChB,IAAId,UAAU,CAACgB,UAAX,CAAsB,OAAtB,CAAJ,EAAoC;UAClC,OAAOtF,GAAG,CAACuF,kBAAJ,CAAuBC,OAAvB,CAA+BlB,UAA/B,EAA2Cc,YAA3C,CAAP;QACD,CAFD,MAEO;;UAEL,OAAOpF,GAAG,CAACyF,eAAJ,CAAoBC,WAApB,CAAgC;YACrCpB,UADqC;YAErCqB,YAAY,EAAErB,UAFuB;YAGrCc,YAHqC;YAIrCQ,OAAO,EAAEX,YAJ4B;YAKrCY,WAAW,EAAEX;UALwB,CAAhC,CAAP;QAOD;MACF;;MACD,OAAO,IAAIlF,GAAG,CAAC8F,aAAR,CAAsBxB,UAAtB,EAAkCT,UAAlC,CAA6C;QAClD+B,OAAO,EAAEX,YADyC;QAElDY,WAAW,EAAEX,gBAFqC;QAGlDa,QAAQ,EAAEV;MAHwC,CAA7C,CAAP;EA5CJ;;EAmDA,OAAOtC,MAAM,YAAYoB,aAAlB,GACH9B,QAAQ,CAAC2D,mBAAT,CAA6BjD,MAA7B,CADG,GAEHV,QAAQ,CAACgC,oBAAT,CAA8BtB,MAA9B,CAFJ;AAGD;;AAEe,2BACd7C,IADc,EAEd+F,iBAFc,EAEgC;EAE9C,OAAOA,iBAAiB,CACrBC,KADI,CACExH,CAAC,IAAG;IACT,IAAIA,CAAC,YAAYyF,aAAjB,EAAgC;MAC9Bf,sBAAsB,CAAClD,IAAD,EAAOxB,CAAP,CAAtB;IACD;;IACD,MAAMA,CAAN;EACD,CANI,EAOJyH,IAPI,CAOCtC,UAAU,IAAG;IACjB,MAAMuC,aAAa,GAAGvC,UAAU,CAACuC,aAAjC;IACA,MAAMC,IAAI,GAAGxC,UAAU,CAACwC,IAAxB;IAEA,OAAO;MACLD,aADK;MAELvC,UAAU,EAAEZ,sBAAsB,CAChCY,UADgC,CAF7B;MAKLyC,kBAAkB,EAAEtG,GAAG,CAACuG,qBAAJ,CAClB1C,UADkB,CALf;MAQLwC,IAAI,EAAEG,IAAI,CAACC,WAAL,CAAiBJ,IAAjB;IARD,CAAP;EAUD,CArBI,CAAP;AAsBD;;AAEM,eAAeK,yBAAf,CACLxG,IADK,EAELyG,yBAFK,EAEqD;EAE1D,MAAMC,qBAAqB,GAAG,MAAMD,yBAApC;EACA,OAAO;IACLE,cAAc,EAAED,qBAAqB,CAACC,cADjC;IAELC,OAAO,EAAGC,gBAAD,IACPC,iBAAiB,CAAC9G,IAAD,EAAO0G,qBAAqB,CAACE,OAAtB,CAA8BC,gBAA9B,CAAP;EAHd,CAAP;AAKD;;AAED,MAAMpD,mBAAN,CAAyB;EAEvBnC,WACE,OACiBkC,QADjB,EACkD;IAAjC,KAAQA,QAAR;IAEjB,KAAKxD,IAAL,GAAY8C,OAAO,CAAC9C,IAAD,CAAnB;EACD;;EAEU,IAAPO,OAAO;IACT,OAAO,KAAKiD,QAAL,CAAcjD,OAArB;EACD;;EAEQ,IAALwG,KAAK;IACP,OAAO,KAAKvD,QAAL,CAAcuD,KAArB;EACD;;EAEDC,aAAa,CACXC,SADW,EAC2B;IAEtC,OAAOH,iBAAiB,CACtBlE,MAAM,CAAC,KAAK5C,IAAN,CADgB,EAEtB,KAAKwD,QAAL,CAAcwD,aAAd,CAA4BC,SAA5B,CAFsB,CAAxB;EAID;;AAxBsB;ACpLzB;;;;;;;;;;;;;;;AAeG;;;MAYUX,KAAI;EAOfhF,YAA6B4F,SAA7B,EAAgD;IAAnB,KAASA,SAAT;IAC3B,KAAKC,WAAL,GAAmBrH,GAAG,CAACqH,WAAJ,CAAgBD,SAAhB,CAAnB;EACD;;EAEiB,OAAXX,WAAW,CAACJ,IAAD,EAAe;IAC/B,IAAI,CAACG,IAAI,CAACc,QAAL,CAAcC,GAAd,CAAkBlB,IAAlB,CAAL,EAA8B;MAC5BG,IAAI,CAACc,QAAL,CAAcE,GAAd,CAAkBnB,IAAlB,EAAwB,IAAIG,IAAJ,CAASH,IAAT,CAAxB;IACD;;IAED,OAAOG,IAAI,CAACc,QAAL,CAAcG,GAAd,CAAkBpB,IAAlB,CAAP;EACD;;EAEDqB,MAAM;IACJ,OAAO,KAAKN,SAAL,CAAeM,MAAf,EAAP;EACD;;EACDC,MAAM;IACJ,OAAO,KAAKP,SAAL,CAAeO,MAAf,EAAP;EACD;;EACDC,MAAM;IACJ,OAAO,KAAKR,SAAL,CAAeQ,MAAf,EAAP;EACD;;EACDC,gBAAgB,CAACC,YAAD,EAAuB;IACrC,OAAO,KAAKV,SAAL,CAAeS,gBAAf,CAAgCC,YAAhC,CAAP;EACD;;EACDC,UAAU,CAACD,YAAD,EAAuB;IAC/B,OAAO,KAAKV,SAAL,CAAeW,UAAf,CAA0BD,YAA1B,CAAP;EACD;;EACDE,iCAAiC,CAC/BnE,UAD+B,EACE;IAEjC,OAAO,KAAKoE,kBAAL,CAAwBpE,UAAxB,CAAP;EACD;;EACuB,MAAlBoE,kBAAkB,CACtBpE,UADsB,EACW;IAEjC,OAAOmD,iBAAiB,CACtB,KAAK9G,IADiB,EAEtBF,GAAG,CAACiI,kBAAJ,CAAuB,KAAKb,SAA5B,EAAuCvD,UAAvC,CAFsB,CAAxB;EAID;;EACwB,MAAnBqE,mBAAmB,CACvBhE,WADuB,EAEvBiE,mBAFuB,EAEwB;IAE/C,OAAOzB,yBAAyB,CAC9B,KAAKxG,IADyB,EAE9BF,GAAG,CAACkI,mBAAJ,CAAwB,KAAKd,SAA7B,EAAwClD,WAAxC,EAAqDiE,mBAArD,CAF8B,CAAhC;EAID;;EACkB,MAAbC,aAAa,CACjB/F,QADiB,EACY;IAE7B,OAAO2E,iBAAiB,CACtB,KAAK9G,IADiB,EAEtBF,GAAG,CAACoI,aAAJ,CACE,KAAKhB,SADP,EAEE/E,QAFF,EAGEd,2BAHF,CAFsB,CAAxB;EAQD;;EACqB,MAAhB8G,gBAAgB,CAAChG,QAAD,EAA8B;IAClD,MAAM9B,2BAA2B,CAACP,GAAG,CAACsI,SAAJ,CAAc,KAAKpI,IAAnB,CAAD,CAAjC;IACA,OAAOF,GAAG,CAACqI,gBAAJ,CACL,KAAKjB,SADA,EAEL/E,QAFK,EAGLd,2BAHK,CAAP;EAKD;;EACDgH,2CAA2C,CACzC1E,UADyC,EACR;IAEjC,OAAO,KAAK2E,4BAAL,CAAkC3E,UAAlC,CAAP;EACD;;EACiC,MAA5B2E,4BAA4B,CAChC3E,UADgC,EACC;IAEjC,OAAOmD,iBAAiB,CACtB,KAAK9G,IADiB,EAEtBF,GAAG,CAACwI,4BAAJ,CACE,KAAKpB,SADP,EAEEvD,UAFF,CAFsB,CAAxB;EAOD;;EACD4E,6BAA6B,CAC3BvE,WAD2B,EAE3BiE,mBAF2B,EAEoB;IAE/C,OAAOzB,yBAAyB,CAC9B,KAAKxG,IADyB,EAE9BF,GAAG,CAACyI,6BAAJ,CACE,KAAKrB,SADP,EAEElD,WAFF,EAGEiE,mBAHF,CAF8B,CAAhC;EAQD;;EACDO,uBAAuB,CACrBrG,QADqB,EACQ;IAE7B,OAAO2E,iBAAiB,CACtB,KAAK9G,IADiB,EAEtBF,GAAG,CAAC0I,uBAAJ,CACE,KAAKtB,SADP,EAEE/E,QAFF,EAGEd,2BAHF,CAFsB,CAAxB;EAQD;;EAC+B,MAA1BoH,0BAA0B,CAC9BtG,QAD8B,EACD;IAE7B,MAAM9B,2BAA2B,CAACP,GAAG,CAACsI,SAAJ,CAAc,KAAKpI,IAAnB,CAAD,CAAjC;IACA,OAAOF,GAAG,CAAC2I,0BAAJ,CACL,KAAKvB,SADA,EAEL/E,QAFK,EAGLd,2BAHK,CAAP;EAKD;;EACDqH,qBAAqB,CACnBC,kBADmB,EACkC;IAErD,OAAO7I,GAAG,CAAC4I,qBAAJ,CAA0B,KAAKxB,SAA/B,EAA0CyB,kBAA1C,CAAP;EACD;;EACW,MAANC,MAAM,CAACxE,UAAD,EAAmB;IAC7B,MAAMtE,GAAG,CAAC8I,MAAJ,CAAW,KAAK1B,SAAhB,EAA2B9C,UAA3B,CAAN;IACA,OAAO,IAAP;EACD;;EACDyE,WAAW,CAACC,QAAD,EAAiB;IAC1B,OAAOhJ,GAAG,CAAC+I,WAAJ,CAAgB,KAAK3B,SAArB,EAAgC4B,QAAhC,CAAP;EACD;;EACDC,cAAc,CAACC,WAAD,EAAoB;IAChC,OAAOlJ,GAAG,CAACiJ,cAAJ,CAAmB,KAAK7B,SAAxB,EAAmC8B,WAAnC,CAAP;EACD;;EACDC,iBAAiB,CAACC,eAAD,EAAuC;IACtD,OAAOpJ,GAAG,CAACmJ,iBAAJ,CACL,KAAK/B,SADA,EAELgC,eAFK,CAAP;EAID;;EACDC,aAAa,CAACC,OAAD,EAGZ;IACC,OAAOtJ,GAAG,CAACqJ,aAAJ,CAAkB,KAAKjC,SAAvB,EAAkCkC,OAAlC,CAAP;EACD;;EACDC,uBAAuB,CACrBP,QADqB,EAErBH,kBAFqB,EAEgC;IAErD,OAAO7I,GAAG,CAACuJ,uBAAJ,CACL,KAAKnC,SADA,EAEL4B,QAFK,EAGLH,kBAHK,CAAP;EAKD;;EACgB,IAAbW,aAAa;IACf,OAAO,KAAKpC,SAAL,CAAeoC,aAAtB;EACD;;EACc,IAAXC,WAAW;IACb,OAAO,KAAKrC,SAAL,CAAeqC,WAAtB;EACD;;EACW,IAARC,QAAQ;IACV,OAAO,KAAKtC,SAAL,CAAesC,QAAtB;EACD;;EACc,IAAXxF,WAAW;IACb,OAAO,KAAKkD,SAAL,CAAelD,WAAtB;EACD;;EACe,IAAZyF,YAAY;IACd,OAAO,KAAKvC,SAAL,CAAeuC,YAAtB;EACD;;EACe,IAAZC,YAAY;IACd,OAAO,KAAKxC,SAAL,CAAewC,YAAtB;EACD;;EACW,IAAR7F,QAAQ;IACV,OAAO,KAAKqD,SAAL,CAAerD,QAAtB;EACD;;EACc,IAAX8F,WAAW;IACb,OAAO,KAAKzC,SAAL,CAAeyC,WAAtB;EACD;;EACQ,IAAL5F,KAAK;IACP,OAAO,KAAKmD,SAAL,CAAenD,KAAtB;EACD;;EACW,IAAR6F,QAAQ;IACV,OAAO,KAAK1C,SAAL,CAAe0C,QAAtB;EACD;;EACa,IAAVxF,UAAU;IACZ,OAAO,KAAK8C,SAAL,CAAe9C,UAAtB;EACD;;EACM,IAAHyF,GAAG;IACL,OAAO,KAAK3C,SAAL,CAAe2C,GAAtB;EACD;;EACe,IAAJ7J,IAAI;IACd,OAAQ,KAAKkH,SAAL,CAAgClH,IAAxC;EACD;;AA1Mc,C,CACf;AACA;;;AACwBsG,gBAAW,IAAIwD,OAAJ,EAAX;AC9B1B;;;;;;;;;;;;;;;AAeG;;AAuBH,MAAMjK,SAAO,GAAuBC,GAAG,CAACD,OAAxC;;MAEakK,KAAI;EAMfzI,WAAqB,MAAkBa,QAAlB,EAA4C;IAA5C,KAAG6H,GAAH;;IACnB,IAAI7H,QAAQ,CAAC8H,aAAT,EAAJ,EAA8B;MAC5B,KAAK/C,SAAL,GAAiB/E,QAAQ,CAAC+H,YAAT,EAAjB;MACA,KAAKC,kBAAL;MACA;IACD;;IAED,MAAM;MAAExJ;IAAF,IAAaqJ,GAAG,CAACI,OAAvB,CAP+D;;IAS/DvK,SAAO,CAACc,MAAD,EAA4C;IAAA;IAA5C,EAA4C;MACjDI,OAAO,EAAEiJ,GAAG,CAACpJ;IADoC,CAA5C,CAAPf,CAT+D;;;IAc/DA,SAAO,CAACc,MAAD,EAA4C;IAAA;IAA5C,EAA4C;MACjDI,OAAO,EAAEiJ,GAAG,CAACpJ;IADoC,CAA5C,CAAPf,CAd+D;;;IAmB/D,MAAM2D,QAAQ,GACZ,OAAOhE,MAAP,KAAkB,WAAlB,GAAgC6B,2BAAhC,GAA8DyC,SADhE;IAEA,KAAKoD,SAAL,GAAiB/E,QAAQ,CAACkI,UAAT,CAAoB;MACnCD,OAAO,EAAE;QACPnK,WAAW,EAAEqK,yBAAyB,CAAC3J,MAAD,EAASqJ,GAAG,CAACpJ,IAAb,CAD/B;QAEP2J,qBAAqB,EAAE/G;MAFhB;IAD0B,CAApB,CAAjB;;IAOA,KAAK0D,SAAL,CAAesD,eAAf,CAA+B1K,GAAG,CAAC2K,aAAnC;;IACA,KAAKN,kBAAL;EACD;;EAEiB,IAAdO,cAAc;IAChB,OAAO,KAAKxD,SAAL,CAAewD,cAAtB;EACD;;EAEc,IAAXC,WAAW;IACb,IAAI,CAAC,KAAKzD,SAAL,CAAeyD,WAApB,EAAiC;MAC/B,OAAO,IAAP;IACD;;IAED,OAAOrE,IAAI,CAACC,WAAL,CAAiB,KAAKW,SAAL,CAAeyD,WAAhC,CAAP;EACD;;EACe,IAAZC,YAAY;IACd,OAAO,KAAK1D,SAAL,CAAe0D,YAAtB;EACD;;EACe,IAAZA,YAAY,CAACA,YAAD,EAA4B;IAC1C,KAAK1D,SAAL,CAAe0D,YAAf,GAA8BA,YAA9B;EACD;;EACW,IAARC,QAAQ;IACV,OAAO,KAAK3D,SAAL,CAAe2D,QAAtB;EACD;;EACW,IAARhH,QAAQ;IACV,OAAO,KAAKqD,SAAL,CAAerD,QAAtB;EACD;;EACW,IAARA,QAAQ,CAACiH,GAAD,EAAmB;IAC7B,KAAK5D,SAAL,CAAerD,QAAf,GAA0BiH,GAA1B;EACD;;EACDC,iBAAiB;IACf,KAAK7D,SAAL,CAAe6D,iBAAf;EACD;;EACDC,OAAO;IACL,OAAO,KAAK9D,SAAL,CAAe8D,OAAf,EAAP;EACD;;EACDC,WAAW,CAACC,GAAD,EAAcd,OAAd,EAAoD;IAC7DtK,GAAG,CAACqL,mBAAJ,CAAwB,KAAKjE,SAA7B,EAAwCgE,GAAxC,EAA6Cd,OAA7C;EACD;;EACDgB,eAAe,CAAC9H,IAAD,EAAa;IAC1B,OAAOxD,GAAG,CAACsL,eAAJ,CAAoB,KAAKlE,SAAzB,EAAoC5D,IAApC,CAAP;EACD;;EAED+H,eAAe,CAAC/H,IAAD,EAAa;IAC1B,OAAOxD,GAAG,CAACuL,eAAJ,CAAoB,KAAKnE,SAAzB,EAAoC5D,IAApC,CAAP;EACD;;EAEDgI,oBAAoB,CAAChI,IAAD,EAAe0F,WAAf,EAAkC;IACpD,OAAOlJ,GAAG,CAACwL,oBAAJ,CAAyB,KAAKpE,SAA9B,EAAyC5D,IAAzC,EAA+C0F,WAA/C,CAAP;EACD;;EAEmC,MAA9BuC,8BAA8B,CAClCxH,KADkC,EAElCyH,QAFkC,EAElB;IAEhB,OAAO1E,iBAAiB,CACtB,KAAKI,SADiB,EAEtBpH,GAAG,CAACyL,8BAAJ,CAAmC,KAAKrE,SAAxC,EAAmDnD,KAAnD,EAA0DyH,QAA1D,CAFsB,CAAxB;EAID;;EACDC,sBAAsB,CAAC1H,KAAD,EAAc;IAClC,OAAO,KAAK2H,0BAAL,CAAgC3H,KAAhC,CAAP;EACD;;EACD2H,0BAA0B,CAAC3H,KAAD,EAAc;IACtC,OAAOjE,GAAG,CAAC4L,0BAAJ,CAA+B,KAAKxE,SAApC,EAA+CnD,KAA/C,CAAP;EACD;;EACD4H,qBAAqB,CAACC,SAAD,EAAkB;IACrC,OAAO9L,GAAG,CAAC6L,qBAAJ,CAA0B,KAAKzE,SAA/B,EAA0C0E,SAA1C,CAAP;EACD;;EACsB,MAAjBC,iBAAiB;IACrBhM,SAAO,CACLlB,yBAAyB,EADpB,EAEL,KAAKuI,SAFA,EAES;IAAA;IAFT,CAAPrH;;IAKA,MAAM8D,UAAU,GAAG,MAAM7D,GAAG,CAAC+L,iBAAJ,CACvB,KAAK3E,SADkB,EAEvB7F,2BAFuB,CAAzB;;IAIA,IAAI,CAACsC,UAAL,EAAiB;MACf,OAAO;QACLA,UAAU,EAAE,IADP;QAELwC,IAAI,EAAE;MAFD,CAAP;IAID;;IACD,OAAOW,iBAAiB,CAAC,KAAKI,SAAN,EAAiBjI,OAAO,CAACC,OAAR,CAAgByE,UAAhB,CAAjB,CAAxB;EACD,CAxHc;;;;;EA6HfmI,sBAAsB,CAACC,SAAD,EAAkB;IACtCjM,GAAG,CAACgM,sBAAJ,CAA2B,KAAK5E,SAAhC,EAA2C6E,SAA3C;EACD;;EAEDC,kBAAkB,CAChBC,cADgB,EAEhBC,OAFgB,EAGhBC,SAHgB,EAGO;IAEvB,MAAM;MAAEC,IAAF;MAAQC,KAAR;MAAeC;IAAf,IAA4BC,aAAa,CAC7CN,cAD6C,EAE7CC,OAF6C,EAG7CC,SAH6C,CAA/C;IAKA,OAAO,KAAKjF,SAAL,CAAe8E,kBAAf,CAAkCI,IAAlC,EAAyCC,KAAzC,EAAgDC,QAAhD,CAAP;EACD;;EACDE,gBAAgB,CACdP,cADc,EAEdC,OAFc,EAGdC,SAHc,EAGS;IAEvB,MAAM;MAAEC,IAAF;MAAQC,KAAR;MAAeC;IAAf,IAA4BC,aAAa,CAC7CN,cAD6C,EAE7CC,OAF6C,EAG7CC,SAH6C,CAA/C;IAKA,OAAO,KAAKjF,SAAL,CAAesF,gBAAf,CAAgCJ,IAAhC,EAAuCC,KAAvC,EAA8CC,QAA9C,CAAP;EACD;;EACDG,qBAAqB,CACnB1I,KADmB,EAEnB4E,kBAFmB,EAE0B;IAE7C,OAAO7I,GAAG,CAAC2M,qBAAJ,CAA0B,KAAKvF,SAA/B,EAA0CnD,KAA1C,EAAiD4E,kBAAjD,CAAP;EACD;;EACD+D,sBAAsB,CACpB3I,KADoB,EAEpB4E,kBAFoB,EAEiC;IAErD,OAAO7I,GAAG,CAAC4M,sBAAJ,CACL,KAAKxF,SADA,EAELnD,KAFK,EAGL4E,kBAAkB,IAAI7E,SAHjB,CAAP;EAKD;;EACmB,MAAd6I,cAAc,CAAC1M,WAAD,EAAoB;IACtC2M,4BAA4B,CAAC,KAAK1F,SAAN,EAAiBjH,WAAjB,CAA5B;;IACA,IAAI4M,SAAJ;;IACA,QAAQ5M,WAAR;MACE,KAAKR,WAAW,CAACG,OAAjB;QACEiN,SAAS,GAAG/M,GAAG,CAACqB,yBAAhB;QACA;;MACF,KAAK1B,WAAW,CAACC,KAAjB;;QAEE,MAAMoN,yBAAyB,GAAG,MAAMhN,GAAG,CACxC0B,YADqC,CACC1B,GAAG,CAACoB,yBADL,EAErC6L,YAFqC,EAAxC;QAGAF,SAAS,GAAGC,yBAAyB,GACjChN,GAAG,CAACoB,yBAD6B,GAEjCpB,GAAG,CAACkN,uBAFR;QAGA;;MACF,KAAKvN,WAAW,CAACE,IAAjB;QACEkN,SAAS,GAAG/M,GAAG,CAACmB,mBAAhB;QACA;;MACF;QACE,OAAOnB,GAAG,CAACmN,KAAJ,CAA4C;QAAA;QAA5C,EAA4C;UACjDlM,OAAO,EAAE,KAAKmG,SAAL,CAAetG;QADyB,CAA5C,CAAP;IAjBJ;;IAsBA,OAAO,KAAKsG,SAAL,CAAeyF,cAAf,CAA8BE,SAA9B,CAAP;EACD;;EAEDK,mCAAmC,CACjCvJ,UADiC,EACA;IAEjC,OAAO,KAAKwJ,oBAAL,CAA0BxJ,UAA1B,CAAP;EACD;;EACDyJ,iBAAiB;IACf,OAAOtG,iBAAiB,CACtB,KAAKI,SADiB,EAEtBpH,GAAG,CAACsN,iBAAJ,CAAsB,KAAKlG,SAA3B,CAFsB,CAAxB;EAID;;EACDiG,oBAAoB,CAClBxJ,UADkB,EACe;IAEjC,OAAOmD,iBAAiB,CACtB,KAAKI,SADiB,EAEtBpH,GAAG,CAACqN,oBAAJ,CAAyB,KAAKjG,SAA9B,EAAyCvD,UAAzC,CAFsB,CAAxB;EAID;;EACD0J,qBAAqB,CAACC,KAAD,EAAc;IACjC,OAAOxG,iBAAiB,CACtB,KAAKI,SADiB,EAEtBpH,GAAG,CAACuN,qBAAJ,CAA0B,KAAKnG,SAA/B,EAA0CoG,KAA1C,CAFsB,CAAxB;EAID;;EACDC,0BAA0B,CACxBxJ,KADwB,EAExByH,QAFwB,EAER;IAEhB,OAAO1E,iBAAiB,CACtB,KAAKI,SADiB,EAEtBpH,GAAG,CAACyN,0BAAJ,CAA+B,KAAKrG,SAApC,EAA+CnD,KAA/C,EAAsDyH,QAAtD,CAFsB,CAAxB;EAID;;EACDgC,mBAAmB,CACjBzJ,KADiB,EAEjB6H,SAFiB,EAEC;IAElB,OAAO9E,iBAAiB,CACtB,KAAKI,SADiB,EAEtBpH,GAAG,CAAC0N,mBAAJ,CAAwB,KAAKtG,SAA7B,EAAwCnD,KAAxC,EAA+C6H,SAA/C,CAFsB,CAAxB;EAID;;EACD6B,qBAAqB,CACnBzJ,WADmB,EAEnBiE,mBAFmB,EAE4B;IAE/C,OAAOzB,yBAAyB,CAC9B,KAAKU,SADyB,EAE9BpH,GAAG,CAAC2N,qBAAJ,CACE,KAAKvG,SADP,EAEElD,WAFF,EAGEiE,mBAHF,CAF8B,CAAhC;EAQD;;EACoB,MAAfyF,eAAe,CACnBvL,QADmB,EACU;IAE7BtC,SAAO,CACLlB,yBAAyB,EADpB,EAEL,KAAKuI,SAFA,EAES;IAAA;IAFT,CAAPrH;;IAKA,OAAOiH,iBAAiB,CACtB,KAAKI,SADiB,EAEtBpH,GAAG,CAAC4N,eAAJ,CACE,KAAKxG,SADP,EAEE/E,QAFF,EAGEd,2BAHF,CAFsB,CAAxB;EAQD;;EACuB,MAAlBsM,kBAAkB,CAACxL,QAAD,EAA8B;IACpDtC,SAAO,CACLlB,yBAAyB,EADpB,EAEL,KAAKuI,SAFA,EAES;IAAA;IAFT,CAAPrH;;IAMA,MAAMQ,2BAA2B,CAAC,KAAK6G,SAAN,CAAjC;IACA,OAAOpH,GAAG,CAAC6N,kBAAJ,CACL,KAAKzG,SADA,EAEL/E,QAFK,EAGLd,2BAHK,CAAP;EAKD;;EACDuM,iBAAiB,CAACzH,IAAD,EAAyB;;;IAGxC,OAAO,KAAKe,SAAL,CAAe0G,iBAAf,CAAiCzH,IAAjC,CAAP;EACD;;EACD0H,uBAAuB,CAACvK,IAAD,EAAa;IAClC,OAAOxD,GAAG,CAAC+N,uBAAJ,CAA4B,KAAK3G,SAAjC,EAA4C5D,IAA5C,CAAP;EACD;;EACDV,MAAM;IACJ,OAAO,KAAKsE,SAAZ;EACD;;EACD4G,OAAO;IACL,OAAO,KAAK5G,SAAL,CAAe4G,OAAf,EAAP;EACD;;EACO3D,kBAAkB;IACvB,KAAKjD,SAAL,CAAmDpE,OAAnD,GAA6D,MAAM,IAAnE;EACF;;AA5Sc;;AAGRiH,IAAW,YAAX,GAActK,WAAd;;AA4ST,SAAS8M,aAAT,CACEN,cADF,EAEEI,KAFF,EAGEC,QAHF,EAGwB;EAEtB,IAAIF,IAAI,GAAGH,cAAX;;EACA,IAAI,OAAOA,cAAP,KAA0B,UAA9B,EAA0C;IACxC,CAAC;MAAEG,IAAF;MAAQC,KAAR;MAAeC;IAAf,IAA4BL,cAA7B;EACD,CALqB;;;EAQtB,MAAM8B,OAAO,GAAG3B,IAAhB;;EAEA,MAAM4B,OAAO,GAAI7H,IAAD,IACd4H,OAAO,CAAC5H,IAAI,IAAIG,IAAI,CAACC,WAAL,CAAiBJ,IAAjB,CAAT,CADT;;EAEA,OAAO;IACLiG,IAAI,EAAE4B,OADD;IAEL3B,KAAK,EAAEA,KAFF;IAGLC;EAHK,CAAP;AAKD;;AAED,SAAShC,yBAAT,CACE3J,MADF,EAEEI,OAFF,EAEiB;;;;;EAMf,MAAMkN,YAAY,GAAGC,4BAA4B,CAACvN,MAAD,EAASI,OAAT,CAAjD,CANe;;;EASf,IACE,OAAO7C,IAAP,KAAgB,WAAhB,IACA,CAAC+P,YAAY,CAAC7N,QAAb,CAAsBN,GAAG,CAACoB,yBAA1B,CAFH,EAGE;IACA+M,YAAY,CAACE,IAAb,CAAkBrO,GAAG,CAACoB,yBAAtB;EACD,CAdc;;;EAiBf,IAAI,OAAO1B,MAAP,KAAkB,WAAtB,EAAmC;IACjC,KAAK,MAAMS,WAAX,IAA0B,CACxBH,GAAG,CAACkN,uBADoB,EAExBlN,GAAG,CAACqB,yBAFoB,CAA1B,EAGG;MACD,IAAI,CAAC8M,YAAY,CAAC7N,QAAb,CAAsBH,WAAtB,CAAL,EAAyC;QACvCgO,YAAY,CAACE,IAAb,CAAkBlO,WAAlB;MACD;IACF;EACF,CA1Bc;;;EA6Bf,IAAI,CAACgO,YAAY,CAAC7N,QAAb,CAAsBN,GAAG,CAACmB,mBAA1B,CAAL,EAAqD;IACnDgN,YAAY,CAACE,IAAb,CAAkBrO,GAAG,CAACmB,mBAAtB;EACD;;EAED,OAAOgN,YAAP;AACF;ACjZA;;;;;;;;;;;;;;;AAeG;;;MAQU/J,kBAAiB;EAgB5B5C;IAbA,KAAU8C,UAAV,GAAa,OAAb,CAaA;;;IAGE,KAAK8C,SAAL,GAAiB,IAAIpH,GAAG,CAACoE,iBAAR,CAA0BtB,MAAM,CAACwL,QAAQ,CAACpO,IAAT,EAAD,CAAhC,CAAjB;EACD;;EAXgB,OAAV2D,UAAU,CACfgD,cADe,EAEfE,gBAFe,EAES;IAExB,OAAO/G,GAAG,CAACoE,iBAAJ,CAAsBP,UAAtB,CAAiCgD,cAAjC,EAAiDE,gBAAjD,CAAP;EACD;;EAQDwH,iBAAiB,CACfC,gBADe,EAMfrG,mBANe,EAMgC;IAE/C,OAAO,KAAKf,SAAL,CAAemH,iBAAf;;IAGLC,gBAHK,EAILrG,mBAJK,CAAP;EAMD;;EAEDrF,MAAM;IACJ,OAAO,KAAKsE,SAAZ;EACD;;AAxC2B;;AAMrBhD,yCAAuBpE,GAAG,CAACoE,iBAAJ,CAAsBqK,oBAA7C;AACArK,gCAAcpE,GAAG,CAACoE,iBAAJ,CAAsBsK,WAApC;AC9BT;;;;;;;;;;;;;;;AAeG;;AAOH,MAAM3O,OAAO,GAAuBC,GAAG,CAACD,OAAxC;;MAEa4O,kBAAiB;EAK5BnN,WACE,YACAoN,UADA,EAEiC;IAAA,IAAjC1E,GAAiC,uEAAdoE,QAAQ,CAACpE,GAAT,EAAc;;WAAA;;;IAGjCnK,OAAO,CAAC,SAAG,CAACuK,OAAJ,MAAW,IAAX,IAAWpN,aAAX,GAAW,MAAX,GAAWA,GAAE2D,MAAd,EAAyD;IAAA;IAAzD,EAAyD;MAC9DI,OAAO,EAAEiJ,GAAG,CAACpJ;IADiD,CAAzD,CAAP;;IAGA,KAAKsG,SAAL,GAAiB,IAAIpH,GAAG,CAAC2O,iBAAR,CACfE,SADe;IAGfD,UAHe;;IAOf1E,GAAG,CAAChK,IAAJ,EAPe,CAAjB;IASA,KAAK4O,IAAL,GAAY,KAAK1H,SAAL,CAAe0H,IAA3B;EACD;;EACDC,KAAK;IACH,KAAK3H,SAAL,CAAe2H,KAAf;EACD;;EACDC,MAAM;IACJ,OAAO,KAAK5H,SAAL,CAAe4H,MAAf,EAAP;EACD;;EACDC,MAAM;IACJ,OAAO,KAAK7H,SAAL,CAAe6H,MAAf,EAAP;EACD;;AAjC2B;ACxB9B;;;;;;;;;;;;;;;AAeG;;;AAmBH,MAAMC,SAAS,GAAG,aAAlB,C,CAqCA;AACA;;AACA,SAASC,kBAAT,CAA4BC,QAA5B,EAAwD;EACtDA,QAAQ,CAACC,QAAT,CAAkBC,iBAAlB,CACE,IAAIC,SAAJ,CACEL,SADF,EAEEL,SAAS,IAAG;;IAEV,MAAM3E,GAAG,GAAG2E,SAAS,CAACW,WAAV,CAAsB,YAAtB,EAAoCpF,YAApC,EAAZ;IACA,MAAMqF,YAAY,GAAGZ,SAAS,CAACW,WAAV,CAAsB,MAAtB,CAArB;IACA,OAAO,IAAIvF,IAAJ,CAASC,GAAT,EAAcuF,YAAd,CAAP;EACD,CAPH,EASC;EAAA;EATD,EAUGC,eAVH,CAUmB;IACfC,cAAc,EAAE;MACdC,SAAS,EAAE;QACTC,YAAY,EAAEtR,GAAI,CAACuR,mBAALvR,CAAyBsR,YAD9B;QAETE,cAAc,EAAExR,GAAI,CAACuR,mBAALvR,CAAyBwR,cAFhC;QAGTC,aAAa,EAAEzR,GAAI,CAACuR,mBAALvR,CAAyByR,aAH/B;QAITC,6BAA6B,EAC3B1R,GAAI,CAACuR,mBAALvR,CAAyB0R,6BALlB;QAMTC,uBAAuB,EACrB3R,GAAI,CAACuR,mBAALvR,CAAyB2R,uBAPlB;QAQTC,YAAY,EAAE5R,GAAI,CAACuR,mBAALvR,CAAyB4R;MAR9B;IADG,CADD;IAafC,iBAAiB,EAAE7R,GAAI,CAAC6R,iBAbT;IAcfxL,oBAAoB,EAAErG,GAAI,CAACqG,oBAdZ;IAefE,kBAAkB,EAAEvG,GAAI,CAACuG,kBAfV;IAgBfJ,kBAAkB,EAAEnG,GAAI,CAACmG,kBAhBV;IAiBfoB,aAAa,EAAEvH,GAAI,CAACuH,aAjBL;IAkBfuK,gBAAgB,EAAE9R,GAAI,CAAC8R,gBAlBR;IAmBfjM,iBAAiB,EAAEkM,iBAnBJ;IAoBfC,yBAAyB,EAAEhS,GAAI,CAACgS,yBApBjB;IAqBf5B,iBAAiB,EAAE6B,iBArBJ;IAsBfxL,mBAAmB,EAAEzG,GAAI,CAACyG,mBAtBX;IAuBfiF,IAvBe;IAwBfwG,cAAc,EAAElS,GAAI,CAACkS,cAxBN;IAyBfC,KAAK,EAAEvM;EAzBQ,CAVnB,EAqCGwM,oBArCH,CAqC+C;EAAA;EArC/C,EAsCGC,oBAtCH,CAsCwB,KAtCxB,CADF;EA0CAxB,QAAQ,CAACyB,eAAT,CAAyB/P,IAAzB,EAA+BgQ,OAA/B;AACD;;AAED3B,kBAAkB,CAACb,QAAD,CAAlB","names":["CORDOVA_ONDEVICEREADY_TIMEOUT_MS","_getCurrentScheme","location","_a","protocol","_isHttpOrHttps","ua","getUA","toLowerCase","match","_isNativeEnvironment","isReactNative","isNode","_isIe11","isIE","documentMode","_isEdge","test","_isLocalStorageNotSynchronized","_isWebStorageSupported","storage","self","localStorage","key","impl","_generateEventId","isIndexedDBAvailable","e","_isWorker","global","_isPopupRedirectSupported","isBrowserExtension","_isAndroidOrIosCordovaScheme","_isLikelyCordova","document","_isCordova","Promise","resolve","timeoutId","setTimeout","addEventListener","clearTimeout","_getSelfWindow","window","Persistence","LOCAL","NONE","SESSION","_assert","exp","PERSISTENCE_KEY","auth","persistence","Object","values","includes","_savePersistenceForRedirect","_initializationPromise","session","getSessionStorageIfAvailable","_persistenceKeyName","config","apiKey","name","setItem","_getPersistence","appName","getItem","inMemoryPersistence","indexedDBLocalPersistence","browserSessionPersistence","sessionStorage","CompatPopupRedirectResolver","constructor","browserResolver","_getInstance","browserPopupRedirectResolver","cordovaResolver","cordovaPopupRedirectResolver","underlyingResolver","_getRedirectResult","_overrideRedirectResult","_initialize","selectUnderlyingResolver","assertedUnderlyingResolver","_openPopup","provider","authType","eventId","_openRedirect","_isIframeWebStorageSupported","cb","_originValidation","_shouldInitProactively","isCordova","unwrap","object","wrapped","credentialFromResponse","userCredential","credentialFromObject","attachExtraErrorFields","response","customData","_tokenResponse","code","mfaErr","resolver","MultiFactorResolver","getMultiFactorResolver","credential","credErr","tenantId","undefined","email","phoneNumber","FirebaseError","PhoneAuthProvider","credentialFromResult","providerId","ProviderId","PASSWORD","GOOGLE","GoogleAuthProvider","FACEBOOK","FacebookAuthProvider","GITHUB","GithubAuthProvider","TWITTER","TwitterAuthProvider","oauthIdToken","oauthAccessToken","oauthTokenSecret","pendingToken","nonce","startsWith","SAMLAuthCredential","_create","OAuthCredential","_fromParams","signInMethod","idToken","accessToken","OAuthProvider","rawNonce","credentialFromError","credentialPromise","catch","then","operationType","user","additionalUserInfo","getAdditionalUserInfo","User","getOrCreate","convertConfirmationResult","confirmationResultPromise","confirmationResultExp","verificationId","confirm","verificationCode","convertCredential","hints","resolveSignIn","assertion","_delegate","multiFactor","USER_MAP","has","set","get","delete","reload","toJSON","getIdTokenResult","forceRefresh","getIdToken","linkAndRetrieveDataWithCredential","linkWithCredential","linkWithPhoneNumber","applicationVerifier","linkWithPopup","linkWithRedirect","_castAuth","reauthenticateAndRetrieveDataWithCredential","reauthenticateWithCredential","reauthenticateWithPhoneNumber","reauthenticateWithPopup","reauthenticateWithRedirect","sendEmailVerification","actionCodeSettings","unlink","updateEmail","newEmail","updatePassword","newPassword","updatePhoneNumber","phoneCredential","updateProfile","profile","verifyBeforeUpdateEmail","emailVerified","isAnonymous","metadata","providerData","refreshToken","displayName","photoURL","uid","WeakMap","Auth","app","isInitialized","getImmediate","linkUnderlyingAuth","options","initialize","buildPersistenceHierarchy","popupRedirectResolver","_updateErrorMap","debugErrorMap","emulatorConfig","currentUser","languageCode","settings","tid","useDeviceLanguage","signOut","useEmulator","url","connectAuthEmulator","applyActionCode","checkActionCode","confirmPasswordReset","createUserWithEmailAndPassword","password","fetchProvidersForEmail","fetchSignInMethodsForEmail","isSignInWithEmailLink","emailLink","getRedirectResult","addFrameworkForLogging","framework","onAuthStateChanged","nextOrObserver","errorFn","completed","next","error","complete","wrapObservers","onIdTokenChanged","sendSignInLinkToEmail","sendPasswordResetEmail","setPersistence","_validatePersistenceArgument","converted","isIndexedDBFullySupported","_isAvailable","browserLocalPersistence","_fail","signInAndRetrieveDataWithCredential","signInWithCredential","signInAnonymously","signInWithCustomToken","token","signInWithEmailAndPassword","signInWithEmailLink","signInWithPhoneNumber","signInWithPopup","signInWithRedirect","updateCurrentUser","verifyPasswordResetCode","_delete","oldNext","newNext","persistences","_getPersistencesFromRedirect","push","firebase","verifyPhoneNumber","phoneInfoOptions","PHONE_SIGN_IN_METHOD","PROVIDER_ID","RecaptchaVerifier","parameters","container","type","clear","render","verify","AUTH_TYPE","registerAuthCompat","instance","INTERNAL","registerComponent","Component","getProvider","authProvider","setServiceProps","ActionCodeInfo","Operation","EMAIL_SIGNIN","ActionCodeOperation","PASSWORD_RESET","RECOVER_EMAIL","REVERT_SECOND_FACTOR_ADDITION","VERIFY_AND_CHANGE_EMAIL","VERIFY_EMAIL","EmailAuthProvider","SAMLAuthProvider","CompatAuthProvider","PhoneMultiFactorGenerator","CompatRecaptchaVerifier","AuthCredential","Error","setInstantiationMode","setMultipleInstances","registerVersion","version"],"sources":["/home/fullzer4/Documents/GitHub/ToDoList/node_modules/@firebase/auth-compat/src/platform.ts","/home/fullzer4/Documents/GitHub/ToDoList/node_modules/@firebase/auth-compat/src/persistence.ts","/home/fullzer4/Documents/GitHub/ToDoList/node_modules/@firebase/auth-compat/src/popup_redirect.ts","/home/fullzer4/Documents/GitHub/ToDoList/node_modules/@firebase/auth-compat/src/wrap.ts","/home/fullzer4/Documents/GitHub/ToDoList/node_modules/@firebase/auth-compat/src/user_credential.ts","/home/fullzer4/Documents/GitHub/ToDoList/node_modules/@firebase/auth-compat/src/user.ts","/home/fullzer4/Documents/GitHub/ToDoList/node_modules/@firebase/auth-compat/src/auth.ts","/home/fullzer4/Documents/GitHub/ToDoList/node_modules/@firebase/auth-compat/src/phone_auth_provider.ts","/home/fullzer4/Documents/GitHub/ToDoList/node_modules/@firebase/auth-compat/src/recaptcha_verifier.ts","/home/fullzer4/Documents/GitHub/ToDoList/node_modules/@firebase/auth-compat/index.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as impl from '@firebase/auth/internal';\nimport {\n  getUA,\n  isBrowserExtension,\n  isReactNative,\n  isNode,\n  isIE,\n  isIndexedDBAvailable\n} from '@firebase/util';\n\ndeclare global {\n  interface Document {\n    documentMode?: number;\n  }\n}\n\nconst CORDOVA_ONDEVICEREADY_TIMEOUT_MS = 1000;\n\nfunction _getCurrentScheme(): string | null {\n  return self?.location?.protocol || null;\n}\n\n/**\n * @return {boolean} Whether the current environment is http or https.\n */\nfunction _isHttpOrHttps(): boolean {\n  return _getCurrentScheme() === 'http:' || _getCurrentScheme() === 'https:';\n}\n\n/**\n * @param {?string=} ua The user agent.\n * @return {boolean} Whether the app is rendered in a mobile iOS or Android\n *     Cordova environment.\n */\nexport function _isAndroidOrIosCordovaScheme(ua: string = getUA()): boolean {\n  return !!(\n    (_getCurrentScheme() === 'file:' ||\n      _getCurrentScheme() === 'ionic:' ||\n      _getCurrentScheme() === 'capacitor:') &&\n    ua.toLowerCase().match(/iphone|ipad|ipod|android/)\n  );\n}\n\n/**\n * @return {boolean} Whether the environment is a native environment, where\n *     CORS checks do not apply.\n */\nfunction _isNativeEnvironment(): boolean {\n  return isReactNative() || isNode();\n}\n\n/**\n * Checks whether the user agent is IE11.\n * @return {boolean} True if it is IE11.\n */\nfunction _isIe11(): boolean {\n  return isIE() && document?.documentMode === 11;\n}\n\n/**\n * Checks whether the user agent is Edge.\n * @param {string} userAgent The browser user agent string.\n * @return {boolean} True if it is Edge.\n */\nfunction _isEdge(ua: string = getUA()): boolean {\n  return /Edge\\/\\d+/.test(ua);\n}\n\n/**\n * @param {?string=} opt_userAgent The navigator user agent.\n * @return {boolean} Whether local storage is not synchronized between an iframe\n *     and a popup of the same domain.\n */\nfunction _isLocalStorageNotSynchronized(ua: string = getUA()): boolean {\n  return _isIe11() || _isEdge(ua);\n}\n\n/** @return {boolean} Whether web storage is supported. */\nexport function _isWebStorageSupported(): boolean {\n  try {\n    const storage = self.localStorage;\n    const key = impl._generateEventId();\n    if (storage) {\n      // setItem will throw an exception if we cannot access WebStorage (e.g.,\n      // Safari in private mode).\n      storage['setItem'](key, '1');\n      storage['removeItem'](key);\n      // For browsers where iframe web storage does not synchronize with a popup\n      // of the same domain, indexedDB is used for persistent storage. These\n      // browsers include IE11 and Edge.\n      // Make sure it is supported (IE11 and Edge private mode does not support\n      // that).\n      if (_isLocalStorageNotSynchronized()) {\n        // In such browsers, if indexedDB is not supported, an iframe cannot be\n        // notified of the popup sign in result.\n        return isIndexedDBAvailable();\n      }\n      return true;\n    }\n  } catch (e) {\n    // localStorage is not available from a worker. Test availability of\n    // indexedDB.\n    return _isWorker() && isIndexedDBAvailable();\n  }\n  return false;\n}\n\n/**\n * @param {?Object=} global The optional global scope.\n * @return {boolean} Whether current environment is a worker.\n */\nexport function _isWorker(): boolean {\n  // WorkerGlobalScope only defined in worker environment.\n  return (\n    typeof global !== 'undefined' &&\n    'WorkerGlobalScope' in global &&\n    'importScripts' in global\n  );\n}\n\nexport function _isPopupRedirectSupported(): boolean {\n  return (\n    (_isHttpOrHttps() ||\n      isBrowserExtension() ||\n      _isAndroidOrIosCordovaScheme()) &&\n    // React Native with remote debugging reports its location.protocol as\n    // http.\n    !_isNativeEnvironment() &&\n    // Local storage has to be supported for browser popup and redirect\n    // operations to work.\n    _isWebStorageSupported() &&\n    // DOM, popups and redirects are not supported within a worker.\n    !_isWorker()\n  );\n}\n\n/** Quick check that indicates the platform *may* be Cordova */\nexport function _isLikelyCordova(): boolean {\n  return _isAndroidOrIosCordovaScheme() && typeof document !== 'undefined';\n}\n\nexport async function _isCordova(): Promise<boolean> {\n  if (!_isLikelyCordova()) {\n    return false;\n  }\n\n  return new Promise(resolve => {\n    const timeoutId = setTimeout(() => {\n      // We've waited long enough; the telltale Cordova event didn't happen\n      resolve(false);\n    }, CORDOVA_ONDEVICEREADY_TIMEOUT_MS);\n\n    document.addEventListener('deviceready', () => {\n      clearTimeout(timeoutId);\n      resolve(true);\n    });\n  });\n}\n\nexport function _getSelfWindow(): Window | null {\n  return typeof window !== 'undefined' ? window : null;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as exp from '@firebase/auth/internal';\nimport { isIndexedDBAvailable, isNode, isReactNative } from '@firebase/util';\nimport { _getSelfWindow, _isWebStorageSupported, _isWorker } from './platform';\n\nexport const Persistence = {\n  LOCAL: 'local',\n  NONE: 'none',\n  SESSION: 'session'\n};\n\nconst _assert: typeof exp._assert = exp._assert;\n\nconst PERSISTENCE_KEY = 'persistence';\n\n/**\n * Validates that an argument is a valid persistence value. If an invalid type\n * is specified, an error is thrown synchronously.\n */\nexport function _validatePersistenceArgument(\n  auth: exp.Auth,\n  persistence: string\n): void {\n  _assert(\n    Object.values(Persistence).includes(persistence),\n    auth,\n    exp.AuthErrorCode.INVALID_PERSISTENCE\n  );\n  // Validate if the specified type is supported in the current environment.\n  if (isReactNative()) {\n    // This is only supported in a browser.\n    _assert(\n      persistence !== Persistence.SESSION,\n      auth,\n      exp.AuthErrorCode.UNSUPPORTED_PERSISTENCE\n    );\n    return;\n  }\n  if (isNode()) {\n    // Only none is supported in Node.js.\n    _assert(\n      persistence === Persistence.NONE,\n      auth,\n      exp.AuthErrorCode.UNSUPPORTED_PERSISTENCE\n    );\n    return;\n  }\n  if (_isWorker()) {\n    // In a worker environment, either LOCAL or NONE are supported.\n    // If indexedDB not supported and LOCAL provided, throw an error\n    _assert(\n      persistence === Persistence.NONE ||\n        (persistence === Persistence.LOCAL && isIndexedDBAvailable()),\n      auth,\n      exp.AuthErrorCode.UNSUPPORTED_PERSISTENCE\n    );\n    return;\n  }\n  // This is restricted by what the browser supports.\n  _assert(\n    persistence === Persistence.NONE || _isWebStorageSupported(),\n    auth,\n    exp.AuthErrorCode.UNSUPPORTED_PERSISTENCE\n  );\n}\n\nexport async function _savePersistenceForRedirect(\n  auth: exp.AuthInternal\n): Promise<void> {\n  await auth._initializationPromise;\n  const session = getSessionStorageIfAvailable();\n  const key = exp._persistenceKeyName(\n    PERSISTENCE_KEY,\n    auth.config.apiKey,\n    auth.name\n  );\n  if (session) {\n    session.setItem(key, auth._getPersistence());\n  }\n}\n\nexport function _getPersistencesFromRedirect(\n  apiKey: string,\n  appName: string\n): exp.Persistence[] {\n  const session = getSessionStorageIfAvailable();\n  if (!session) {\n    return [];\n  }\n\n  const key = exp._persistenceKeyName(PERSISTENCE_KEY, apiKey, appName);\n  const persistence = session.getItem(key);\n\n  switch (persistence) {\n    case Persistence.NONE:\n      return [exp.inMemoryPersistence];\n    case Persistence.LOCAL:\n      return [exp.indexedDBLocalPersistence, exp.browserSessionPersistence];\n    case Persistence.SESSION:\n      return [exp.browserSessionPersistence];\n    default:\n      return [];\n  }\n}\n\n/** Returns session storage, or null if the property access errors */\nfunction getSessionStorageIfAvailable(): Storage | null {\n  try {\n    return _getSelfWindow()?.sessionStorage || null;\n  } catch (e) {\n    return null;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as exp from '@firebase/auth/internal';\nimport { _isCordova, _isLikelyCordova } from './platform';\n\nconst _assert: typeof exp._assert = exp._assert;\n\n/** Platform-agnostic popup-redirect resolver */\nexport class CompatPopupRedirectResolver\n  implements exp.PopupRedirectResolverInternal\n{\n  // Create both resolvers for dynamic resolution later\n  private readonly browserResolver: exp.PopupRedirectResolverInternal =\n    exp._getInstance(exp.browserPopupRedirectResolver);\n  private readonly cordovaResolver: exp.PopupRedirectResolverInternal =\n    exp._getInstance(exp.cordovaPopupRedirectResolver);\n  // The actual resolver in use: either browserResolver or cordovaResolver.\n  private underlyingResolver: exp.PopupRedirectResolverInternal | null = null;\n  _redirectPersistence = exp.browserSessionPersistence;\n\n  _completeRedirectFn: (\n    auth: exp.Auth,\n    resolver: exp.PopupRedirectResolver,\n    bypassAuthState: boolean\n  ) => Promise<exp.UserCredential | null> = exp._getRedirectResult;\n  _overrideRedirectResult = exp._overrideRedirectResult;\n\n  async _initialize(auth: exp.AuthImpl): Promise<exp.EventManager> {\n    await this.selectUnderlyingResolver();\n    return this.assertedUnderlyingResolver._initialize(auth);\n  }\n\n  async _openPopup(\n    auth: exp.AuthImpl,\n    provider: exp.AuthProvider,\n    authType: exp.AuthEventType,\n    eventId?: string\n  ): Promise<exp.AuthPopup> {\n    await this.selectUnderlyingResolver();\n    return this.assertedUnderlyingResolver._openPopup(\n      auth,\n      provider,\n      authType,\n      eventId\n    );\n  }\n\n  async _openRedirect(\n    auth: exp.AuthImpl,\n    provider: exp.AuthProvider,\n    authType: exp.AuthEventType,\n    eventId?: string\n  ): Promise<void> {\n    await this.selectUnderlyingResolver();\n    return this.assertedUnderlyingResolver._openRedirect(\n      auth,\n      provider,\n      authType,\n      eventId\n    );\n  }\n\n  _isIframeWebStorageSupported(\n    auth: exp.AuthImpl,\n    cb: (support: boolean) => unknown\n  ): void {\n    this.assertedUnderlyingResolver._isIframeWebStorageSupported(auth, cb);\n  }\n\n  _originValidation(auth: exp.Auth): Promise<void> {\n    return this.assertedUnderlyingResolver._originValidation(auth);\n  }\n\n  get _shouldInitProactively(): boolean {\n    return _isLikelyCordova() || this.browserResolver._shouldInitProactively;\n  }\n\n  private get assertedUnderlyingResolver(): exp.PopupRedirectResolverInternal {\n    _assert(this.underlyingResolver, exp.AuthErrorCode.INTERNAL_ERROR);\n    return this.underlyingResolver;\n  }\n\n  private async selectUnderlyingResolver(): Promise<void> {\n    if (this.underlyingResolver) {\n      return;\n    }\n\n    // We haven't yet determined whether or not we're in Cordova; go ahead\n    // and determine that state now.\n    const isCordova = await _isCordova();\n    this.underlyingResolver = isCordova\n      ? this.cordovaResolver\n      : this.browserResolver;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** Forward direction wrapper from Compat --unwrap-> Exp */\nexport interface Wrapper<T> {\n  unwrap(): T;\n}\n\n/** Reverse direction wrapper from Exp --wrapped--> Compat */\nexport interface ReverseWrapper<T> {\n  wrapped(): T;\n}\n\nexport function unwrap<T>(object: unknown): T {\n  return (object as Wrapper<T>).unwrap();\n}\n\nexport function wrapped<T>(object: unknown): T {\n  return (object as ReverseWrapper<T>).wrapped();\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as exp from '@firebase/auth/internal';\nimport * as compat from '@firebase/auth-types';\nimport { FirebaseError } from '@firebase/util';\nimport { Auth } from './auth';\nimport { User } from './user';\nimport { unwrap, wrapped } from './wrap';\n\nfunction credentialFromResponse(\n  userCredential: exp.UserCredentialInternal\n): exp.AuthCredential | null {\n  return credentialFromObject(userCredential);\n}\n\nfunction attachExtraErrorFields(auth: exp.Auth, e: FirebaseError): void {\n  // The response contains all fields from the server which may or may not\n  // actually match the underlying type\n  const response = (e.customData as exp.TaggedWithTokenResponse | undefined)\n    ?._tokenResponse as unknown as Record<string, string>;\n  if (e.code === 'auth/multi-factor-auth-required') {\n    const mfaErr = e as compat.MultiFactorError;\n    mfaErr.resolver = new MultiFactorResolver(\n      auth,\n      exp.getMultiFactorResolver(auth, e as exp.MultiFactorError)\n    );\n  } else if (response) {\n    const credential = credentialFromObject(e);\n    const credErr = e as compat.AuthError;\n    if (credential) {\n      credErr.credential = credential;\n      credErr.tenantId = response.tenantId || undefined;\n      credErr.email = response.email || undefined;\n      credErr.phoneNumber = response.phoneNumber || undefined;\n    }\n  }\n}\n\nfunction credentialFromObject(\n  object: FirebaseError | exp.UserCredential\n): exp.AuthCredential | null {\n  const { _tokenResponse } = (\n    object instanceof FirebaseError ? object.customData : object\n  ) as exp.TaggedWithTokenResponse;\n  if (!_tokenResponse) {\n    return null;\n  }\n\n  // Handle phone Auth credential responses, as they have a different format\n  // from other backend responses (i.e. no providerId). This is also only the\n  // case for user credentials (does not work for errors).\n  if (!(object instanceof FirebaseError)) {\n    if ('temporaryProof' in _tokenResponse && 'phoneNumber' in _tokenResponse) {\n      return exp.PhoneAuthProvider.credentialFromResult(object);\n    }\n  }\n\n  const providerId = _tokenResponse.providerId;\n\n  // Email and password is not supported as there is no situation where the\n  // server would return the password to the client.\n  if (!providerId || providerId === exp.ProviderId.PASSWORD) {\n    return null;\n  }\n\n  let provider: Pick<\n    typeof exp.OAuthProvider,\n    'credentialFromResult' | 'credentialFromError'\n  >;\n  switch (providerId) {\n    case exp.ProviderId.GOOGLE:\n      provider = exp.GoogleAuthProvider;\n      break;\n    case exp.ProviderId.FACEBOOK:\n      provider = exp.FacebookAuthProvider;\n      break;\n    case exp.ProviderId.GITHUB:\n      provider = exp.GithubAuthProvider;\n      break;\n    case exp.ProviderId.TWITTER:\n      provider = exp.TwitterAuthProvider;\n      break;\n    default:\n      const {\n        oauthIdToken,\n        oauthAccessToken,\n        oauthTokenSecret,\n        pendingToken,\n        nonce\n      } = _tokenResponse as exp.SignInWithIdpResponse;\n      if (\n        !oauthAccessToken &&\n        !oauthTokenSecret &&\n        !oauthIdToken &&\n        !pendingToken\n      ) {\n        return null;\n      }\n      // TODO(avolkovi): uncomment this and get it working with SAML & OIDC\n      if (pendingToken) {\n        if (providerId.startsWith('saml.')) {\n          return exp.SAMLAuthCredential._create(providerId, pendingToken);\n        } else {\n          // OIDC and non-default providers excluding Twitter.\n          return exp.OAuthCredential._fromParams({\n            providerId,\n            signInMethod: providerId,\n            pendingToken,\n            idToken: oauthIdToken,\n            accessToken: oauthAccessToken\n          });\n        }\n      }\n      return new exp.OAuthProvider(providerId).credential({\n        idToken: oauthIdToken,\n        accessToken: oauthAccessToken,\n        rawNonce: nonce\n      });\n  }\n\n  return object instanceof FirebaseError\n    ? provider.credentialFromError(object)\n    : provider.credentialFromResult(object);\n}\n\nexport function convertCredential(\n  auth: exp.Auth,\n  credentialPromise: Promise<exp.UserCredential>\n): Promise<compat.UserCredential> {\n  return credentialPromise\n    .catch(e => {\n      if (e instanceof FirebaseError) {\n        attachExtraErrorFields(auth, e);\n      }\n      throw e;\n    })\n    .then(credential => {\n      const operationType = credential.operationType;\n      const user = credential.user;\n\n      return {\n        operationType,\n        credential: credentialFromResponse(\n          credential as exp.UserCredentialInternal\n        ),\n        additionalUserInfo: exp.getAdditionalUserInfo(\n          credential as exp.UserCredential\n        ),\n        user: User.getOrCreate(user)\n      };\n    });\n}\n\nexport async function convertConfirmationResult(\n  auth: exp.Auth,\n  confirmationResultPromise: Promise<exp.ConfirmationResult>\n): Promise<compat.ConfirmationResult> {\n  const confirmationResultExp = await confirmationResultPromise;\n  return {\n    verificationId: confirmationResultExp.verificationId,\n    confirm: (verificationCode: string) =>\n      convertCredential(auth, confirmationResultExp.confirm(verificationCode))\n  };\n}\n\nclass MultiFactorResolver implements compat.MultiFactorResolver {\n  readonly auth: Auth;\n  constructor(\n    auth: exp.Auth,\n    private readonly resolver: exp.MultiFactorResolver\n  ) {\n    this.auth = wrapped(auth);\n  }\n\n  get session(): compat.MultiFactorSession {\n    return this.resolver.session;\n  }\n\n  get hints(): compat.MultiFactorInfo[] {\n    return this.resolver.hints;\n  }\n\n  resolveSignIn(\n    assertion: compat.MultiFactorAssertion\n  ): Promise<compat.UserCredential> {\n    return convertCredential(\n      unwrap(this.auth),\n      this.resolver.resolveSignIn(assertion as exp.MultiFactorAssertion)\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as exp from '@firebase/auth/internal';\nimport * as compat from '@firebase/auth-types';\nimport { Compat } from '@firebase/util';\nimport { _savePersistenceForRedirect } from './persistence';\nimport { CompatPopupRedirectResolver } from './popup_redirect';\nimport {\n  convertConfirmationResult,\n  convertCredential\n} from './user_credential';\n\nexport class User implements compat.User, Compat<exp.User> {\n  // Maintain a map so that there's always a 1:1 mapping between new User and\n  // legacy compat users\n  private static readonly USER_MAP = new WeakMap<exp.User, User>();\n\n  readonly multiFactor: compat.MultiFactorUser;\n\n  private constructor(readonly _delegate: exp.User) {\n    this.multiFactor = exp.multiFactor(_delegate);\n  }\n\n  static getOrCreate(user: exp.User): User {\n    if (!User.USER_MAP.has(user)) {\n      User.USER_MAP.set(user, new User(user));\n    }\n\n    return User.USER_MAP.get(user)!;\n  }\n\n  delete(): Promise<void> {\n    return this._delegate.delete();\n  }\n  reload(): Promise<void> {\n    return this._delegate.reload();\n  }\n  toJSON(): object {\n    return this._delegate.toJSON();\n  }\n  getIdTokenResult(forceRefresh?: boolean): Promise<compat.IdTokenResult> {\n    return this._delegate.getIdTokenResult(forceRefresh);\n  }\n  getIdToken(forceRefresh?: boolean): Promise<string> {\n    return this._delegate.getIdToken(forceRefresh);\n  }\n  linkAndRetrieveDataWithCredential(\n    credential: compat.AuthCredential\n  ): Promise<compat.UserCredential> {\n    return this.linkWithCredential(credential);\n  }\n  async linkWithCredential(\n    credential: compat.AuthCredential\n  ): Promise<compat.UserCredential> {\n    return convertCredential(\n      this.auth,\n      exp.linkWithCredential(this._delegate, credential as exp.AuthCredential)\n    );\n  }\n  async linkWithPhoneNumber(\n    phoneNumber: string,\n    applicationVerifier: compat.ApplicationVerifier\n  ): Promise<compat.ConfirmationResult> {\n    return convertConfirmationResult(\n      this.auth,\n      exp.linkWithPhoneNumber(this._delegate, phoneNumber, applicationVerifier)\n    );\n  }\n  async linkWithPopup(\n    provider: compat.AuthProvider\n  ): Promise<compat.UserCredential> {\n    return convertCredential(\n      this.auth,\n      exp.linkWithPopup(\n        this._delegate,\n        provider as exp.AuthProvider,\n        CompatPopupRedirectResolver\n      )\n    );\n  }\n  async linkWithRedirect(provider: compat.AuthProvider): Promise<void> {\n    await _savePersistenceForRedirect(exp._castAuth(this.auth));\n    return exp.linkWithRedirect(\n      this._delegate,\n      provider as exp.AuthProvider,\n      CompatPopupRedirectResolver\n    );\n  }\n  reauthenticateAndRetrieveDataWithCredential(\n    credential: compat.AuthCredential\n  ): Promise<compat.UserCredential> {\n    return this.reauthenticateWithCredential(credential);\n  }\n  async reauthenticateWithCredential(\n    credential: compat.AuthCredential\n  ): Promise<compat.UserCredential> {\n    return convertCredential(\n      this.auth as unknown as exp.Auth,\n      exp.reauthenticateWithCredential(\n        this._delegate,\n        credential as exp.AuthCredential\n      )\n    );\n  }\n  reauthenticateWithPhoneNumber(\n    phoneNumber: string,\n    applicationVerifier: compat.ApplicationVerifier\n  ): Promise<compat.ConfirmationResult> {\n    return convertConfirmationResult(\n      this.auth,\n      exp.reauthenticateWithPhoneNumber(\n        this._delegate,\n        phoneNumber,\n        applicationVerifier\n      )\n    );\n  }\n  reauthenticateWithPopup(\n    provider: compat.AuthProvider\n  ): Promise<compat.UserCredential> {\n    return convertCredential(\n      this.auth,\n      exp.reauthenticateWithPopup(\n        this._delegate,\n        provider as exp.AuthProvider,\n        CompatPopupRedirectResolver\n      )\n    );\n  }\n  async reauthenticateWithRedirect(\n    provider: compat.AuthProvider\n  ): Promise<void> {\n    await _savePersistenceForRedirect(exp._castAuth(this.auth));\n    return exp.reauthenticateWithRedirect(\n      this._delegate,\n      provider as exp.AuthProvider,\n      CompatPopupRedirectResolver\n    );\n  }\n  sendEmailVerification(\n    actionCodeSettings?: compat.ActionCodeSettings | null\n  ): Promise<void> {\n    return exp.sendEmailVerification(this._delegate, actionCodeSettings);\n  }\n  async unlink(providerId: string): Promise<compat.User> {\n    await exp.unlink(this._delegate, providerId);\n    return this;\n  }\n  updateEmail(newEmail: string): Promise<void> {\n    return exp.updateEmail(this._delegate, newEmail);\n  }\n  updatePassword(newPassword: string): Promise<void> {\n    return exp.updatePassword(this._delegate, newPassword);\n  }\n  updatePhoneNumber(phoneCredential: compat.AuthCredential): Promise<void> {\n    return exp.updatePhoneNumber(\n      this._delegate,\n      phoneCredential as exp.PhoneAuthCredential\n    );\n  }\n  updateProfile(profile: {\n    displayName?: string | null;\n    photoURL?: string | null;\n  }): Promise<void> {\n    return exp.updateProfile(this._delegate, profile);\n  }\n  verifyBeforeUpdateEmail(\n    newEmail: string,\n    actionCodeSettings?: compat.ActionCodeSettings | null\n  ): Promise<void> {\n    return exp.verifyBeforeUpdateEmail(\n      this._delegate,\n      newEmail,\n      actionCodeSettings\n    );\n  }\n  get emailVerified(): boolean {\n    return this._delegate.emailVerified;\n  }\n  get isAnonymous(): boolean {\n    return this._delegate.isAnonymous;\n  }\n  get metadata(): compat.UserMetadata {\n    return this._delegate.metadata;\n  }\n  get phoneNumber(): string | null {\n    return this._delegate.phoneNumber;\n  }\n  get providerData(): Array<compat.UserInfo | null> {\n    return this._delegate.providerData;\n  }\n  get refreshToken(): string {\n    return this._delegate.refreshToken;\n  }\n  get tenantId(): string | null {\n    return this._delegate.tenantId;\n  }\n  get displayName(): string | null {\n    return this._delegate.displayName;\n  }\n  get email(): string | null {\n    return this._delegate.email;\n  }\n  get photoURL(): string | null {\n    return this._delegate.photoURL;\n  }\n  get providerId(): string {\n    return this._delegate.providerId;\n  }\n  get uid(): string {\n    return this._delegate.uid;\n  }\n  private get auth(): exp.Auth {\n    return (this._delegate as exp.UserImpl).auth as unknown as exp.Auth;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseApp, _FirebaseService } from '@firebase/app-compat';\nimport * as exp from '@firebase/auth/internal';\nimport * as compat from '@firebase/auth-types';\nimport { Provider } from '@firebase/component';\nimport { ErrorFn, Observer, Unsubscribe } from '@firebase/util';\n\nimport {\n  _validatePersistenceArgument,\n  Persistence,\n  _getPersistencesFromRedirect,\n  _savePersistenceForRedirect\n} from './persistence';\nimport { _isPopupRedirectSupported } from './platform';\nimport { CompatPopupRedirectResolver } from './popup_redirect';\nimport { User } from './user';\nimport {\n  convertConfirmationResult,\n  convertCredential\n} from './user_credential';\nimport { ReverseWrapper, Wrapper } from './wrap';\n\nconst _assert: typeof exp._assert = exp._assert;\n\nexport class Auth\n  implements compat.FirebaseAuth, Wrapper<exp.Auth>, _FirebaseService\n{\n  static Persistence = Persistence;\n  readonly _delegate: exp.AuthImpl;\n\n  constructor(readonly app: FirebaseApp, provider: Provider<'auth'>) {\n    if (provider.isInitialized()) {\n      this._delegate = provider.getImmediate() as exp.AuthImpl;\n      this.linkUnderlyingAuth();\n      return;\n    }\n\n    const { apiKey } = app.options;\n    // TODO: platform needs to be determined using heuristics\n    _assert(apiKey, exp.AuthErrorCode.INVALID_API_KEY, {\n      appName: app.name\n    });\n\n    // TODO: platform needs to be determined using heuristics\n    _assert(apiKey, exp.AuthErrorCode.INVALID_API_KEY, {\n      appName: app.name\n    });\n\n    // Only use a popup/redirect resolver in browser environments\n    const resolver =\n      typeof window !== 'undefined' ? CompatPopupRedirectResolver : undefined;\n    this._delegate = provider.initialize({\n      options: {\n        persistence: buildPersistenceHierarchy(apiKey, app.name),\n        popupRedirectResolver: resolver\n      }\n    }) as exp.AuthImpl;\n\n    this._delegate._updateErrorMap(exp.debugErrorMap);\n    this.linkUnderlyingAuth();\n  }\n\n  get emulatorConfig(): compat.EmulatorConfig | null {\n    return this._delegate.emulatorConfig;\n  }\n\n  get currentUser(): compat.User | null {\n    if (!this._delegate.currentUser) {\n      return null;\n    }\n\n    return User.getOrCreate(this._delegate.currentUser);\n  }\n  get languageCode(): string | null {\n    return this._delegate.languageCode;\n  }\n  set languageCode(languageCode: string | null) {\n    this._delegate.languageCode = languageCode;\n  }\n  get settings(): compat.AuthSettings {\n    return this._delegate.settings;\n  }\n  get tenantId(): string | null {\n    return this._delegate.tenantId;\n  }\n  set tenantId(tid: string | null) {\n    this._delegate.tenantId = tid;\n  }\n  useDeviceLanguage(): void {\n    this._delegate.useDeviceLanguage();\n  }\n  signOut(): Promise<void> {\n    return this._delegate.signOut();\n  }\n  useEmulator(url: string, options?: { disableWarnings: boolean }): void {\n    exp.connectAuthEmulator(this._delegate, url, options);\n  }\n  applyActionCode(code: string): Promise<void> {\n    return exp.applyActionCode(this._delegate, code);\n  }\n\n  checkActionCode(code: string): Promise<compat.ActionCodeInfo> {\n    return exp.checkActionCode(this._delegate, code);\n  }\n\n  confirmPasswordReset(code: string, newPassword: string): Promise<void> {\n    return exp.confirmPasswordReset(this._delegate, code, newPassword);\n  }\n\n  async createUserWithEmailAndPassword(\n    email: string,\n    password: string\n  ): Promise<compat.UserCredential> {\n    return convertCredential(\n      this._delegate,\n      exp.createUserWithEmailAndPassword(this._delegate, email, password)\n    );\n  }\n  fetchProvidersForEmail(email: string): Promise<string[]> {\n    return this.fetchSignInMethodsForEmail(email);\n  }\n  fetchSignInMethodsForEmail(email: string): Promise<string[]> {\n    return exp.fetchSignInMethodsForEmail(this._delegate, email);\n  }\n  isSignInWithEmailLink(emailLink: string): boolean {\n    return exp.isSignInWithEmailLink(this._delegate, emailLink);\n  }\n  async getRedirectResult(): Promise<compat.UserCredential> {\n    _assert(\n      _isPopupRedirectSupported(),\n      this._delegate,\n      exp.AuthErrorCode.OPERATION_NOT_SUPPORTED\n    );\n    const credential = await exp.getRedirectResult(\n      this._delegate,\n      CompatPopupRedirectResolver\n    );\n    if (!credential) {\n      return {\n        credential: null,\n        user: null\n      };\n    }\n    return convertCredential(this._delegate, Promise.resolve(credential));\n  }\n\n  // This function should only be called by frameworks (e.g. FirebaseUI-web) to log their usage.\n  // It is not intended for direct use by developer apps. NO jsdoc here to intentionally leave it\n  // out of autogenerated documentation pages to reduce accidental misuse.\n  addFrameworkForLogging(framework: string): void {\n    exp.addFrameworkForLogging(this._delegate, framework);\n  }\n\n  onAuthStateChanged(\n    nextOrObserver: Observer<unknown> | ((a: compat.User | null) => unknown),\n    errorFn?: (error: compat.Error) => unknown,\n    completed?: Unsubscribe\n  ): Unsubscribe {\n    const { next, error, complete } = wrapObservers(\n      nextOrObserver,\n      errorFn,\n      completed\n    );\n    return this._delegate.onAuthStateChanged(next!, error, complete);\n  }\n  onIdTokenChanged(\n    nextOrObserver: Observer<unknown> | ((a: compat.User | null) => unknown),\n    errorFn?: (error: compat.Error) => unknown,\n    completed?: Unsubscribe\n  ): Unsubscribe {\n    const { next, error, complete } = wrapObservers(\n      nextOrObserver,\n      errorFn,\n      completed\n    );\n    return this._delegate.onIdTokenChanged(next!, error, complete);\n  }\n  sendSignInLinkToEmail(\n    email: string,\n    actionCodeSettings: compat.ActionCodeSettings\n  ): Promise<void> {\n    return exp.sendSignInLinkToEmail(this._delegate, email, actionCodeSettings);\n  }\n  sendPasswordResetEmail(\n    email: string,\n    actionCodeSettings?: compat.ActionCodeSettings | null\n  ): Promise<void> {\n    return exp.sendPasswordResetEmail(\n      this._delegate,\n      email,\n      actionCodeSettings || undefined\n    );\n  }\n  async setPersistence(persistence: string): Promise<void> {\n    _validatePersistenceArgument(this._delegate, persistence);\n    let converted;\n    switch (persistence) {\n      case Persistence.SESSION:\n        converted = exp.browserSessionPersistence;\n        break;\n      case Persistence.LOCAL:\n        // Not using isIndexedDBAvailable() since it only checks if indexedDB is defined.\n        const isIndexedDBFullySupported = await exp\n          ._getInstance<exp.PersistenceInternal>(exp.indexedDBLocalPersistence)\n          ._isAvailable();\n        converted = isIndexedDBFullySupported\n          ? exp.indexedDBLocalPersistence\n          : exp.browserLocalPersistence;\n        break;\n      case Persistence.NONE:\n        converted = exp.inMemoryPersistence;\n        break;\n      default:\n        return exp._fail(exp.AuthErrorCode.ARGUMENT_ERROR, {\n          appName: this._delegate.name\n        });\n    }\n\n    return this._delegate.setPersistence(converted);\n  }\n\n  signInAndRetrieveDataWithCredential(\n    credential: compat.AuthCredential\n  ): Promise<compat.UserCredential> {\n    return this.signInWithCredential(credential);\n  }\n  signInAnonymously(): Promise<compat.UserCredential> {\n    return convertCredential(\n      this._delegate,\n      exp.signInAnonymously(this._delegate)\n    );\n  }\n  signInWithCredential(\n    credential: compat.AuthCredential\n  ): Promise<compat.UserCredential> {\n    return convertCredential(\n      this._delegate,\n      exp.signInWithCredential(this._delegate, credential as exp.AuthCredential)\n    );\n  }\n  signInWithCustomToken(token: string): Promise<compat.UserCredential> {\n    return convertCredential(\n      this._delegate,\n      exp.signInWithCustomToken(this._delegate, token)\n    );\n  }\n  signInWithEmailAndPassword(\n    email: string,\n    password: string\n  ): Promise<compat.UserCredential> {\n    return convertCredential(\n      this._delegate,\n      exp.signInWithEmailAndPassword(this._delegate, email, password)\n    );\n  }\n  signInWithEmailLink(\n    email: string,\n    emailLink?: string\n  ): Promise<compat.UserCredential> {\n    return convertCredential(\n      this._delegate,\n      exp.signInWithEmailLink(this._delegate, email, emailLink)\n    );\n  }\n  signInWithPhoneNumber(\n    phoneNumber: string,\n    applicationVerifier: compat.ApplicationVerifier\n  ): Promise<compat.ConfirmationResult> {\n    return convertConfirmationResult(\n      this._delegate,\n      exp.signInWithPhoneNumber(\n        this._delegate,\n        phoneNumber,\n        applicationVerifier\n      )\n    );\n  }\n  async signInWithPopup(\n    provider: compat.AuthProvider\n  ): Promise<compat.UserCredential> {\n    _assert(\n      _isPopupRedirectSupported(),\n      this._delegate,\n      exp.AuthErrorCode.OPERATION_NOT_SUPPORTED\n    );\n    return convertCredential(\n      this._delegate,\n      exp.signInWithPopup(\n        this._delegate,\n        provider as exp.AuthProvider,\n        CompatPopupRedirectResolver\n      )\n    );\n  }\n  async signInWithRedirect(provider: compat.AuthProvider): Promise<void> {\n    _assert(\n      _isPopupRedirectSupported(),\n      this._delegate,\n      exp.AuthErrorCode.OPERATION_NOT_SUPPORTED\n    );\n\n    await _savePersistenceForRedirect(this._delegate);\n    return exp.signInWithRedirect(\n      this._delegate,\n      provider as exp.AuthProvider,\n      CompatPopupRedirectResolver\n    );\n  }\n  updateCurrentUser(user: compat.User | null): Promise<void> {\n    // remove ts-ignore once overloads are defined for exp functions to accept compat objects\n    // @ts-ignore\n    return this._delegate.updateCurrentUser(user);\n  }\n  verifyPasswordResetCode(code: string): Promise<string> {\n    return exp.verifyPasswordResetCode(this._delegate, code);\n  }\n  unwrap(): exp.Auth {\n    return this._delegate;\n  }\n  _delete(): Promise<void> {\n    return this._delegate._delete();\n  }\n  private linkUnderlyingAuth(): void {\n    (this._delegate as unknown as ReverseWrapper<Auth>).wrapped = () => this;\n  }\n}\n\nfunction wrapObservers(\n  nextOrObserver: Observer<unknown> | ((a: compat.User | null) => unknown),\n  error?: (error: compat.Error) => unknown,\n  complete?: Unsubscribe\n): Partial<Observer<exp.User | null>> {\n  let next = nextOrObserver;\n  if (typeof nextOrObserver !== 'function') {\n    ({ next, error, complete } = nextOrObserver);\n  }\n\n  // We know 'next' is now a function\n  const oldNext = next as (a: compat.User | null) => unknown;\n\n  const newNext = (user: exp.User | null): unknown =>\n    oldNext(user && User.getOrCreate(user as exp.User));\n  return {\n    next: newNext,\n    error: error as ErrorFn,\n    complete\n  };\n}\n\nfunction buildPersistenceHierarchy(\n  apiKey: string,\n  appName: string\n): exp.Persistence[] {\n  // Note this is slightly different behavior: in this case, the stored\n  // persistence is checked *first* rather than last. This is because we want\n  // to prefer stored persistence type in the hierarchy. This is an empty\n  // array if window is not available or there is no pending redirect\n  const persistences = _getPersistencesFromRedirect(apiKey, appName);\n\n  // If \"self\" is available, add indexedDB\n  if (\n    typeof self !== 'undefined' &&\n    !persistences.includes(exp.indexedDBLocalPersistence)\n  ) {\n    persistences.push(exp.indexedDBLocalPersistence);\n  }\n\n  // If \"window\" is available, add HTML Storage persistences\n  if (typeof window !== 'undefined') {\n    for (const persistence of [\n      exp.browserLocalPersistence,\n      exp.browserSessionPersistence\n    ]) {\n      if (!persistences.includes(persistence)) {\n        persistences.push(persistence);\n      }\n    }\n  }\n\n  // Add in-memory as a final fallback\n  if (!persistences.includes(exp.inMemoryPersistence)) {\n    persistences.push(exp.inMemoryPersistence);\n  }\n\n  return persistences;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as exp from '@firebase/auth/internal';\nimport * as compat from '@firebase/auth-types';\nimport firebase from '@firebase/app-compat';\nimport { Compat } from '@firebase/util';\nimport { unwrap } from './wrap';\n\nexport class PhoneAuthProvider\n  implements compat.PhoneAuthProvider, Compat<exp.PhoneAuthProvider>\n{\n  providerId = 'phone';\n  readonly _delegate: exp.PhoneAuthProvider;\n\n  static PHONE_SIGN_IN_METHOD = exp.PhoneAuthProvider.PHONE_SIGN_IN_METHOD;\n  static PROVIDER_ID = exp.PhoneAuthProvider.PROVIDER_ID;\n\n  static credential(\n    verificationId: string,\n    verificationCode: string\n  ): compat.AuthCredential {\n    return exp.PhoneAuthProvider.credential(verificationId, verificationCode);\n  }\n\n  constructor() {\n    // TODO: remove ts-ignore when moving types from auth-types to auth-compat\n    // @ts-ignore\n    this._delegate = new exp.PhoneAuthProvider(unwrap(firebase.auth!()));\n  }\n\n  verifyPhoneNumber(\n    phoneInfoOptions:\n      | string\n      | compat.PhoneSingleFactorInfoOptions\n      | compat.PhoneMultiFactorEnrollInfoOptions\n      | compat.PhoneMultiFactorSignInInfoOptions,\n    applicationVerifier: compat.ApplicationVerifier\n  ): Promise<string> {\n    return this._delegate.verifyPhoneNumber(\n      // The implementation matches but the types are subtly incompatible\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      phoneInfoOptions as any,\n      applicationVerifier\n    );\n  }\n\n  unwrap(): exp.PhoneAuthProvider {\n    return this._delegate;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport firebase, { FirebaseApp } from '@firebase/app-compat';\nimport * as exp from '@firebase/auth/internal';\nimport * as compat from '@firebase/auth-types';\nimport { Compat } from '@firebase/util';\n\nconst _assert: typeof exp._assert = exp._assert;\n\nexport class RecaptchaVerifier\n  implements compat.RecaptchaVerifier, Compat<exp.ApplicationVerifier>\n{\n  readonly _delegate: exp.RecaptchaVerifier;\n  type: string;\n  constructor(\n    container: HTMLElement | string,\n    parameters?: object | null,\n    app: FirebaseApp = firebase.app()\n  ) {\n    // API key is required for web client RPC calls.\n    _assert(app.options?.apiKey, exp.AuthErrorCode.INVALID_API_KEY, {\n      appName: app.name\n    });\n    this._delegate = new exp.RecaptchaVerifier(\n      container,\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      parameters as any,\n\n      // TODO: remove ts-ignore when moving types from auth-types to auth-compat\n      // @ts-ignore\n      app.auth!()\n    );\n    this.type = this._delegate.type;\n  }\n  clear(): void {\n    this._delegate.clear();\n  }\n  render(): Promise<number> {\n    return this._delegate.render();\n  }\n  verify(): Promise<string> {\n    return this._delegate.verify();\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* eslint-disable camelcase */\n\nimport firebase, { _FirebaseNamespace } from '@firebase/app-compat';\nimport * as impl from '@firebase/auth/internal';\nimport {\n  Component,\n  ComponentType,\n  InstantiationMode\n} from '@firebase/component';\nimport { FirebaseError } from '@firebase/util';\n\nimport * as types from '@firebase/auth-types';\nimport { name, version } from './package.json';\nimport { Auth } from './src/auth';\nimport { PhoneAuthProvider as CompatAuthProvider } from './src/phone_auth_provider';\nimport { RecaptchaVerifier as CompatRecaptchaVerifier } from './src/recaptcha_verifier';\n\nconst AUTH_TYPE = 'auth-compat';\n\ndeclare module '@firebase/component' {\n  interface NameServiceMapping {\n    'auth-compat': types.FirebaseAuth;\n  }\n}\n\ndeclare module '@firebase/app-compat' {\n  interface FirebaseNamespace {\n    auth: {\n      (app?: FirebaseApp): types.FirebaseAuth;\n      Auth: typeof types.FirebaseAuth;\n      EmailAuthProvider: typeof types.EmailAuthProvider;\n      EmailAuthProvider_Instance: typeof types.EmailAuthProvider_Instance;\n      FacebookAuthProvider: typeof types.FacebookAuthProvider;\n      FacebookAuthProvider_Instance: typeof types.FacebookAuthProvider_Instance;\n      GithubAuthProvider: typeof types.GithubAuthProvider;\n      GithubAuthProvider_Instance: typeof types.GithubAuthProvider_Instance;\n      GoogleAuthProvider: typeof types.GoogleAuthProvider;\n      GoogleAuthProvider_Instance: typeof types.GoogleAuthProvider_Instance;\n      OAuthProvider: typeof types.OAuthProvider;\n      SAMLAuthProvider: typeof types.SAMLAuthProvider;\n      PhoneAuthProvider: typeof types.PhoneAuthProvider;\n      PhoneAuthProvider_Instance: typeof types.PhoneAuthProvider_Instance;\n      PhoneMultiFactorGenerator: typeof types.PhoneMultiFactorGenerator;\n      RecaptchaVerifier: typeof types.RecaptchaVerifier;\n      RecaptchaVerifier_Instance: typeof types.RecaptchaVerifier_Instance;\n      TwitterAuthProvider: typeof types.TwitterAuthProvider;\n      TwitterAuthProvider_Instance: typeof types.TwitterAuthProvider_Instance;\n    };\n  }\n  interface FirebaseApp {\n    auth?(): types.FirebaseAuth;\n  }\n}\n\n// Create auth components to register with firebase.\n// Provides Auth public APIs.\nfunction registerAuthCompat(instance: _FirebaseNamespace): void {\n  instance.INTERNAL.registerComponent(\n    new Component(\n      AUTH_TYPE,\n      container => {\n        // getImmediate for FirebaseApp will always succeed\n        const app = container.getProvider('app-compat').getImmediate();\n        const authProvider = container.getProvider('auth');\n        return new Auth(app, authProvider);\n      },\n      ComponentType.PUBLIC\n    )\n      .setServiceProps({\n        ActionCodeInfo: {\n          Operation: {\n            EMAIL_SIGNIN: impl.ActionCodeOperation.EMAIL_SIGNIN,\n            PASSWORD_RESET: impl.ActionCodeOperation.PASSWORD_RESET,\n            RECOVER_EMAIL: impl.ActionCodeOperation.RECOVER_EMAIL,\n            REVERT_SECOND_FACTOR_ADDITION:\n              impl.ActionCodeOperation.REVERT_SECOND_FACTOR_ADDITION,\n            VERIFY_AND_CHANGE_EMAIL:\n              impl.ActionCodeOperation.VERIFY_AND_CHANGE_EMAIL,\n            VERIFY_EMAIL: impl.ActionCodeOperation.VERIFY_EMAIL\n          }\n        },\n        EmailAuthProvider: impl.EmailAuthProvider,\n        FacebookAuthProvider: impl.FacebookAuthProvider,\n        GithubAuthProvider: impl.GithubAuthProvider,\n        GoogleAuthProvider: impl.GoogleAuthProvider,\n        OAuthProvider: impl.OAuthProvider,\n        SAMLAuthProvider: impl.SAMLAuthProvider,\n        PhoneAuthProvider: CompatAuthProvider,\n        PhoneMultiFactorGenerator: impl.PhoneMultiFactorGenerator,\n        RecaptchaVerifier: CompatRecaptchaVerifier,\n        TwitterAuthProvider: impl.TwitterAuthProvider,\n        Auth,\n        AuthCredential: impl.AuthCredential,\n        Error: FirebaseError\n      })\n      .setInstantiationMode(InstantiationMode.LAZY)\n      .setMultipleInstances(false)\n  );\n\n  instance.registerVersion(name, version);\n}\n\nregisterAuthCompat(firebase as _FirebaseNamespace);\n"]},"metadata":{},"sourceType":"module"}