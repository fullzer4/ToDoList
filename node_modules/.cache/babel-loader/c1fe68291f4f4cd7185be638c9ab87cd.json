{"ast":null,"code":"import { Deferred } from '@firebase/util';\n/**\r\n * Component for service name T, e.g. `auth`, `auth-internal`\r\n */\n\nclass Component {\n  /**\r\n   *\r\n   * @param name The public service name, e.g. app, auth, firestore, database\r\n   * @param instanceFactory Service factory responsible for creating the public interface\r\n   * @param type whether the service provided by the component is public or private\r\n   */\n  constructor(name, instanceFactory, type) {\n    this.name = name;\n    this.instanceFactory = instanceFactory;\n    this.type = type;\n    this.multipleInstances = false;\n    /**\r\n     * Properties to be added to the service namespace\r\n     */\n\n    this.serviceProps = {};\n    this.instantiationMode = \"LAZY\"\n    /* LAZY */\n    ;\n    this.onInstanceCreated = null;\n  }\n\n  setInstantiationMode(mode) {\n    this.instantiationMode = mode;\n    return this;\n  }\n\n  setMultipleInstances(multipleInstances) {\n    this.multipleInstances = multipleInstances;\n    return this;\n  }\n\n  setServiceProps(props) {\n    this.serviceProps = props;\n    return this;\n  }\n\n  setInstanceCreatedCallback(callback) {\n    this.onInstanceCreated = callback;\n    return this;\n  }\n\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nconst DEFAULT_ENTRY_NAME = '[DEFAULT]';\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Provider for instance for service name T, e.g. 'auth', 'auth-internal'\r\n * NameServiceMapping[T] is an alias for the type of the instance\r\n */\n\nclass Provider {\n  constructor(name, container) {\n    this.name = name;\n    this.container = container;\n    this.component = null;\n    this.instances = new Map();\n    this.instancesDeferred = new Map();\n    this.instancesOptions = new Map();\n    this.onInitCallbacks = new Map();\n  }\n  /**\r\n   * @param identifier A provider can provide mulitple instances of a service\r\n   * if this.component.multipleInstances is true.\r\n   */\n\n\n  get(identifier) {\n    // if multipleInstances is not supported, use the default name\n    const normalizedIdentifier = this.normalizeInstanceIdentifier(identifier);\n\n    if (!this.instancesDeferred.has(normalizedIdentifier)) {\n      const deferred = new Deferred();\n      this.instancesDeferred.set(normalizedIdentifier, deferred);\n\n      if (this.isInitialized(normalizedIdentifier) || this.shouldAutoInitialize()) {\n        // initialize the service if it can be auto-initialized\n        try {\n          const instance = this.getOrInitializeService({\n            instanceIdentifier: normalizedIdentifier\n          });\n\n          if (instance) {\n            deferred.resolve(instance);\n          }\n        } catch (e) {// when the instance factory throws an exception during get(), it should not cause\n          // a fatal error. We just return the unresolved promise in this case.\n        }\n      }\n    }\n\n    return this.instancesDeferred.get(normalizedIdentifier).promise;\n  }\n\n  getImmediate(options) {\n    var _a; // if multipleInstances is not supported, use the default name\n\n\n    const normalizedIdentifier = this.normalizeInstanceIdentifier(options === null || options === void 0 ? void 0 : options.identifier);\n    const optional = (_a = options === null || options === void 0 ? void 0 : options.optional) !== null && _a !== void 0 ? _a : false;\n\n    if (this.isInitialized(normalizedIdentifier) || this.shouldAutoInitialize()) {\n      try {\n        return this.getOrInitializeService({\n          instanceIdentifier: normalizedIdentifier\n        });\n      } catch (e) {\n        if (optional) {\n          return null;\n        } else {\n          throw e;\n        }\n      }\n    } else {\n      // In case a component is not initialized and should/can not be auto-initialized at the moment, return null if the optional flag is set, or throw\n      if (optional) {\n        return null;\n      } else {\n        throw Error(`Service ${this.name} is not available`);\n      }\n    }\n  }\n\n  getComponent() {\n    return this.component;\n  }\n\n  setComponent(component) {\n    if (component.name !== this.name) {\n      throw Error(`Mismatching Component ${component.name} for Provider ${this.name}.`);\n    }\n\n    if (this.component) {\n      throw Error(`Component for ${this.name} has already been provided`);\n    }\n\n    this.component = component; // return early without attempting to initialize the component if the component requires explicit initialization (calling `Provider.initialize()`)\n\n    if (!this.shouldAutoInitialize()) {\n      return;\n    } // if the service is eager, initialize the default instance\n\n\n    if (isComponentEager(component)) {\n      try {\n        this.getOrInitializeService({\n          instanceIdentifier: DEFAULT_ENTRY_NAME\n        });\n      } catch (e) {// when the instance factory for an eager Component throws an exception during the eager\n        // initialization, it should not cause a fatal error.\n        // TODO: Investigate if we need to make it configurable, because some component may want to cause\n        // a fatal error in this case?\n      }\n    } // Create service instances for the pending promises and resolve them\n    // NOTE: if this.multipleInstances is false, only the default instance will be created\n    // and all promises with resolve with it regardless of the identifier.\n\n\n    for (const [instanceIdentifier, instanceDeferred] of this.instancesDeferred.entries()) {\n      const normalizedIdentifier = this.normalizeInstanceIdentifier(instanceIdentifier);\n\n      try {\n        // `getOrInitializeService()` should always return a valid instance since a component is guaranteed. use ! to make typescript happy.\n        const instance = this.getOrInitializeService({\n          instanceIdentifier: normalizedIdentifier\n        });\n        instanceDeferred.resolve(instance);\n      } catch (e) {// when the instance factory throws an exception, it should not cause\n        // a fatal error. We just leave the promise unresolved.\n      }\n    }\n  }\n\n  clearInstance() {\n    let identifier = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : DEFAULT_ENTRY_NAME;\n    this.instancesDeferred.delete(identifier);\n    this.instancesOptions.delete(identifier);\n    this.instances.delete(identifier);\n  } // app.delete() will call this method on every provider to delete the services\n  // TODO: should we mark the provider as deleted?\n\n\n  async delete() {\n    const services = Array.from(this.instances.values());\n    await Promise.all([...services.filter(service => 'INTERNAL' in service) // legacy services\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    .map(service => service.INTERNAL.delete()), ...services.filter(service => '_delete' in service) // modularized services\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    .map(service => service._delete())]);\n  }\n\n  isComponentSet() {\n    return this.component != null;\n  }\n\n  isInitialized() {\n    let identifier = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : DEFAULT_ENTRY_NAME;\n    return this.instances.has(identifier);\n  }\n\n  getOptions() {\n    let identifier = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : DEFAULT_ENTRY_NAME;\n    return this.instancesOptions.get(identifier) || {};\n  }\n\n  initialize() {\n    let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const {\n      options = {}\n    } = opts;\n    const normalizedIdentifier = this.normalizeInstanceIdentifier(opts.instanceIdentifier);\n\n    if (this.isInitialized(normalizedIdentifier)) {\n      throw Error(`${this.name}(${normalizedIdentifier}) has already been initialized`);\n    }\n\n    if (!this.isComponentSet()) {\n      throw Error(`Component ${this.name} has not been registered yet`);\n    }\n\n    const instance = this.getOrInitializeService({\n      instanceIdentifier: normalizedIdentifier,\n      options\n    }); // resolve any pending promise waiting for the service instance\n\n    for (const [instanceIdentifier, instanceDeferred] of this.instancesDeferred.entries()) {\n      const normalizedDeferredIdentifier = this.normalizeInstanceIdentifier(instanceIdentifier);\n\n      if (normalizedIdentifier === normalizedDeferredIdentifier) {\n        instanceDeferred.resolve(instance);\n      }\n    }\n\n    return instance;\n  }\n  /**\r\n   *\r\n   * @param callback - a function that will be invoked  after the provider has been initialized by calling provider.initialize().\r\n   * The function is invoked SYNCHRONOUSLY, so it should not execute any longrunning tasks in order to not block the program.\r\n   *\r\n   * @param identifier An optional instance identifier\r\n   * @returns a function to unregister the callback\r\n   */\n\n\n  onInit(callback, identifier) {\n    var _a;\n\n    const normalizedIdentifier = this.normalizeInstanceIdentifier(identifier);\n    const existingCallbacks = (_a = this.onInitCallbacks.get(normalizedIdentifier)) !== null && _a !== void 0 ? _a : new Set();\n    existingCallbacks.add(callback);\n    this.onInitCallbacks.set(normalizedIdentifier, existingCallbacks);\n    const existingInstance = this.instances.get(normalizedIdentifier);\n\n    if (existingInstance) {\n      callback(existingInstance, normalizedIdentifier);\n    }\n\n    return () => {\n      existingCallbacks.delete(callback);\n    };\n  }\n  /**\r\n   * Invoke onInit callbacks synchronously\r\n   * @param instance the service instance`\r\n   */\n\n\n  invokeOnInitCallbacks(instance, identifier) {\n    const callbacks = this.onInitCallbacks.get(identifier);\n\n    if (!callbacks) {\n      return;\n    }\n\n    for (const callback of callbacks) {\n      try {\n        callback(instance, identifier);\n      } catch (_a) {// ignore errors in the onInit callback\n      }\n    }\n  }\n\n  getOrInitializeService(_ref) {\n    let {\n      instanceIdentifier,\n      options = {}\n    } = _ref;\n    let instance = this.instances.get(instanceIdentifier);\n\n    if (!instance && this.component) {\n      instance = this.component.instanceFactory(this.container, {\n        instanceIdentifier: normalizeIdentifierForFactory(instanceIdentifier),\n        options\n      });\n      this.instances.set(instanceIdentifier, instance);\n      this.instancesOptions.set(instanceIdentifier, options);\n      /**\r\n       * Invoke onInit listeners.\r\n       * Note this.component.onInstanceCreated is different, which is used by the component creator,\r\n       * while onInit listeners are registered by consumers of the provider.\r\n       */\n\n      this.invokeOnInitCallbacks(instance, instanceIdentifier);\n      /**\r\n       * Order is important\r\n       * onInstanceCreated() should be called after this.instances.set(instanceIdentifier, instance); which\r\n       * makes `isInitialized()` return true.\r\n       */\n\n      if (this.component.onInstanceCreated) {\n        try {\n          this.component.onInstanceCreated(this.container, instanceIdentifier, instance);\n        } catch (_a) {// ignore errors in the onInstanceCreatedCallback\n        }\n      }\n    }\n\n    return instance || null;\n  }\n\n  normalizeInstanceIdentifier() {\n    let identifier = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : DEFAULT_ENTRY_NAME;\n\n    if (this.component) {\n      return this.component.multipleInstances ? identifier : DEFAULT_ENTRY_NAME;\n    } else {\n      return identifier; // assume multiple instances are supported before the component is provided.\n    }\n  }\n\n  shouldAutoInitialize() {\n    return !!this.component && this.component.instantiationMode !== \"EXPLICIT\"\n    /* EXPLICIT */\n    ;\n  }\n\n} // undefined should be passed to the service factory for the default instance\n\n\nfunction normalizeIdentifierForFactory(identifier) {\n  return identifier === DEFAULT_ENTRY_NAME ? undefined : identifier;\n}\n\nfunction isComponentEager(component) {\n  return component.instantiationMode === \"EAGER\"\n  /* EAGER */\n  ;\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * ComponentContainer that provides Providers for service name T, e.g. `auth`, `auth-internal`\r\n */\n\n\nclass ComponentContainer {\n  constructor(name) {\n    this.name = name;\n    this.providers = new Map();\n  }\n  /**\r\n   *\r\n   * @param component Component being added\r\n   * @param overwrite When a component with the same name has already been registered,\r\n   * if overwrite is true: overwrite the existing component with the new component and create a new\r\n   * provider with the new component. It can be useful in tests where you want to use different mocks\r\n   * for different tests.\r\n   * if overwrite is false: throw an exception\r\n   */\n\n\n  addComponent(component) {\n    const provider = this.getProvider(component.name);\n\n    if (provider.isComponentSet()) {\n      throw new Error(`Component ${component.name} has already been registered with ${this.name}`);\n    }\n\n    provider.setComponent(component);\n  }\n\n  addOrOverwriteComponent(component) {\n    const provider = this.getProvider(component.name);\n\n    if (provider.isComponentSet()) {\n      // delete the existing provider from the container, so we can register the new component\n      this.providers.delete(component.name);\n    }\n\n    this.addComponent(component);\n  }\n  /**\r\n   * getProvider provides a type safe interface where it can only be called with a field name\r\n   * present in NameServiceMapping interface.\r\n   *\r\n   * Firebase SDKs providing services should extend NameServiceMapping interface to register\r\n   * themselves.\r\n   */\n\n\n  getProvider(name) {\n    if (this.providers.has(name)) {\n      return this.providers.get(name);\n    } // create a Provider for a service that hasn't registered with Firebase\n\n\n    const provider = new Provider(name, this);\n    this.providers.set(name, provider);\n    return provider;\n  }\n\n  getProviders() {\n    return Array.from(this.providers.values());\n  }\n\n}\n\nexport { Component, ComponentContainer, Provider };","map":{"version":3,"mappings":"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","names":["Component","constructor","name","instanceFactory","type","setInstantiationMode","mode","instantiationMode","setMultipleInstances","multipleInstances","setServiceProps","props","serviceProps","setInstanceCreatedCallback","callback","onInstanceCreated","DEFAULT_ENTRY_NAME","Provider","container","Map","get","identifier","normalizedIdentifier","normalizeInstanceIdentifier","instancesDeferred","has","deferred","Deferred","set","isInitialized","shouldAutoInitialize","instance","getOrInitializeService","instanceIdentifier","resolve","e","promise","getImmediate","options","optional","_a","Error","getComponent","component","setComponent","isComponentEager","instanceDeferred","entries","clearInstance","delete","instancesOptions","instances","services","Array","from","values","Promise","all","filter","service","map","INTERNAL","_delete","isComponentSet","getOptions","initialize","opts","normalizedDeferredIdentifier","onInit","existingCallbacks","onInitCallbacks","Set","add","existingInstance","invokeOnInitCallbacks","callbacks","normalizeIdentifierForFactory","undefined","ComponentContainer","addComponent","provider","getProvider","addOrOverwriteComponent","providers","getProviders"],"sources":["/home/fullzer4/Documents/GitHub/ToDoList/node_modules/@firebase/component/src/component.ts","/home/fullzer4/Documents/GitHub/ToDoList/node_modules/@firebase/component/src/constants.ts","/home/fullzer4/Documents/GitHub/ToDoList/node_modules/@firebase/component/src/provider.ts","/home/fullzer4/Documents/GitHub/ToDoList/node_modules/@firebase/component/src/component_container.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport {\n  InstantiationMode,\n  InstanceFactory,\n  ComponentType,\n  Dictionary,\n  Name,\n  onInstanceCreatedCallback\n} from './types';\n\n/**\n * Component for service name T, e.g. `auth`, `auth-internal`\n */\nexport class Component<T extends Name = Name> {\n  multipleInstances = false;\n  /**\n   * Properties to be added to the service namespace\n   */\n  serviceProps: Dictionary = {};\n\n  instantiationMode = InstantiationMode.LAZY;\n\n  onInstanceCreated: onInstanceCreatedCallback<T> | null = null;\n\n  /**\n   *\n   * @param name The public service name, e.g. app, auth, firestore, database\n   * @param instanceFactory Service factory responsible for creating the public interface\n   * @param type whether the service provided by the component is public or private\n   */\n  constructor(\n    readonly name: T,\n    readonly instanceFactory: InstanceFactory<T>,\n    readonly type: ComponentType\n  ) {}\n\n  setInstantiationMode(mode: InstantiationMode): this {\n    this.instantiationMode = mode;\n    return this;\n  }\n\n  setMultipleInstances(multipleInstances: boolean): this {\n    this.multipleInstances = multipleInstances;\n    return this;\n  }\n\n  setServiceProps(props: Dictionary): this {\n    this.serviceProps = props;\n    return this;\n  }\n\n  setInstanceCreatedCallback(callback: onInstanceCreatedCallback<T>): this {\n    this.onInstanceCreated = callback;\n    return this;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport const DEFAULT_ENTRY_NAME = '[DEFAULT]';\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Deferred } from '@firebase/util';\nimport { ComponentContainer } from './component_container';\nimport { DEFAULT_ENTRY_NAME } from './constants';\nimport {\n  InitializeOptions,\n  InstantiationMode,\n  Name,\n  NameServiceMapping,\n  OnInitCallBack\n} from './types';\nimport { Component } from './component';\n\n/**\n * Provider for instance for service name T, e.g. 'auth', 'auth-internal'\n * NameServiceMapping[T] is an alias for the type of the instance\n */\nexport class Provider<T extends Name> {\n  private component: Component<T> | null = null;\n  private readonly instances: Map<string, NameServiceMapping[T]> = new Map();\n  private readonly instancesDeferred: Map<\n    string,\n    Deferred<NameServiceMapping[T]>\n  > = new Map();\n  private readonly instancesOptions: Map<string, Record<string, unknown>> =\n    new Map();\n  private onInitCallbacks: Map<string, Set<OnInitCallBack<T>>> = new Map();\n\n  constructor(\n    private readonly name: T,\n    private readonly container: ComponentContainer\n  ) {}\n\n  /**\n   * @param identifier A provider can provide mulitple instances of a service\n   * if this.component.multipleInstances is true.\n   */\n  get(identifier?: string): Promise<NameServiceMapping[T]> {\n    // if multipleInstances is not supported, use the default name\n    const normalizedIdentifier = this.normalizeInstanceIdentifier(identifier);\n\n    if (!this.instancesDeferred.has(normalizedIdentifier)) {\n      const deferred = new Deferred<NameServiceMapping[T]>();\n      this.instancesDeferred.set(normalizedIdentifier, deferred);\n\n      if (\n        this.isInitialized(normalizedIdentifier) ||\n        this.shouldAutoInitialize()\n      ) {\n        // initialize the service if it can be auto-initialized\n        try {\n          const instance = this.getOrInitializeService({\n            instanceIdentifier: normalizedIdentifier\n          });\n          if (instance) {\n            deferred.resolve(instance);\n          }\n        } catch (e) {\n          // when the instance factory throws an exception during get(), it should not cause\n          // a fatal error. We just return the unresolved promise in this case.\n        }\n      }\n    }\n\n    return this.instancesDeferred.get(normalizedIdentifier)!.promise;\n  }\n\n  /**\n   *\n   * @param options.identifier A provider can provide mulitple instances of a service\n   * if this.component.multipleInstances is true.\n   * @param options.optional If optional is false or not provided, the method throws an error when\n   * the service is not immediately available.\n   * If optional is true, the method returns null if the service is not immediately available.\n   */\n  getImmediate(options: {\n    identifier?: string;\n    optional: true;\n  }): NameServiceMapping[T] | null;\n  getImmediate(options?: {\n    identifier?: string;\n    optional?: false;\n  }): NameServiceMapping[T];\n  getImmediate(options?: {\n    identifier?: string;\n    optional?: boolean;\n  }): NameServiceMapping[T] | null {\n    // if multipleInstances is not supported, use the default name\n    const normalizedIdentifier = this.normalizeInstanceIdentifier(\n      options?.identifier\n    );\n    const optional = options?.optional ?? false;\n\n    if (\n      this.isInitialized(normalizedIdentifier) ||\n      this.shouldAutoInitialize()\n    ) {\n      try {\n        return this.getOrInitializeService({\n          instanceIdentifier: normalizedIdentifier\n        });\n      } catch (e) {\n        if (optional) {\n          return null;\n        } else {\n          throw e;\n        }\n      }\n    } else {\n      // In case a component is not initialized and should/can not be auto-initialized at the moment, return null if the optional flag is set, or throw\n      if (optional) {\n        return null;\n      } else {\n        throw Error(`Service ${this.name} is not available`);\n      }\n    }\n  }\n\n  getComponent(): Component<T> | null {\n    return this.component;\n  }\n\n  setComponent(component: Component<T>): void {\n    if (component.name !== this.name) {\n      throw Error(\n        `Mismatching Component ${component.name} for Provider ${this.name}.`\n      );\n    }\n\n    if (this.component) {\n      throw Error(`Component for ${this.name} has already been provided`);\n    }\n\n    this.component = component;\n\n    // return early without attempting to initialize the component if the component requires explicit initialization (calling `Provider.initialize()`)\n    if (!this.shouldAutoInitialize()) {\n      return;\n    }\n\n    // if the service is eager, initialize the default instance\n    if (isComponentEager(component)) {\n      try {\n        this.getOrInitializeService({ instanceIdentifier: DEFAULT_ENTRY_NAME });\n      } catch (e) {\n        // when the instance factory for an eager Component throws an exception during the eager\n        // initialization, it should not cause a fatal error.\n        // TODO: Investigate if we need to make it configurable, because some component may want to cause\n        // a fatal error in this case?\n      }\n    }\n\n    // Create service instances for the pending promises and resolve them\n    // NOTE: if this.multipleInstances is false, only the default instance will be created\n    // and all promises with resolve with it regardless of the identifier.\n    for (const [\n      instanceIdentifier,\n      instanceDeferred\n    ] of this.instancesDeferred.entries()) {\n      const normalizedIdentifier =\n        this.normalizeInstanceIdentifier(instanceIdentifier);\n\n      try {\n        // `getOrInitializeService()` should always return a valid instance since a component is guaranteed. use ! to make typescript happy.\n        const instance = this.getOrInitializeService({\n          instanceIdentifier: normalizedIdentifier\n        })!;\n        instanceDeferred.resolve(instance);\n      } catch (e) {\n        // when the instance factory throws an exception, it should not cause\n        // a fatal error. We just leave the promise unresolved.\n      }\n    }\n  }\n\n  clearInstance(identifier: string = DEFAULT_ENTRY_NAME): void {\n    this.instancesDeferred.delete(identifier);\n    this.instancesOptions.delete(identifier);\n    this.instances.delete(identifier);\n  }\n\n  // app.delete() will call this method on every provider to delete the services\n  // TODO: should we mark the provider as deleted?\n  async delete(): Promise<void> {\n    const services = Array.from(this.instances.values());\n\n    await Promise.all([\n      ...services\n        .filter(service => 'INTERNAL' in service) // legacy services\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        .map(service => (service as any).INTERNAL!.delete()),\n      ...services\n        .filter(service => '_delete' in service) // modularized services\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        .map(service => (service as any)._delete())\n    ]);\n  }\n\n  isComponentSet(): boolean {\n    return this.component != null;\n  }\n\n  isInitialized(identifier: string = DEFAULT_ENTRY_NAME): boolean {\n    return this.instances.has(identifier);\n  }\n\n  getOptions(identifier: string = DEFAULT_ENTRY_NAME): Record<string, unknown> {\n    return this.instancesOptions.get(identifier) || {};\n  }\n\n  initialize(opts: InitializeOptions = {}): NameServiceMapping[T] {\n    const { options = {} } = opts;\n    const normalizedIdentifier = this.normalizeInstanceIdentifier(\n      opts.instanceIdentifier\n    );\n    if (this.isInitialized(normalizedIdentifier)) {\n      throw Error(\n        `${this.name}(${normalizedIdentifier}) has already been initialized`\n      );\n    }\n\n    if (!this.isComponentSet()) {\n      throw Error(`Component ${this.name} has not been registered yet`);\n    }\n\n    const instance = this.getOrInitializeService({\n      instanceIdentifier: normalizedIdentifier,\n      options\n    })!;\n\n    // resolve any pending promise waiting for the service instance\n    for (const [\n      instanceIdentifier,\n      instanceDeferred\n    ] of this.instancesDeferred.entries()) {\n      const normalizedDeferredIdentifier =\n        this.normalizeInstanceIdentifier(instanceIdentifier);\n      if (normalizedIdentifier === normalizedDeferredIdentifier) {\n        instanceDeferred.resolve(instance);\n      }\n    }\n\n    return instance;\n  }\n\n  /**\n   *\n   * @param callback - a function that will be invoked  after the provider has been initialized by calling provider.initialize().\n   * The function is invoked SYNCHRONOUSLY, so it should not execute any longrunning tasks in order to not block the program.\n   *\n   * @param identifier An optional instance identifier\n   * @returns a function to unregister the callback\n   */\n  onInit(callback: OnInitCallBack<T>, identifier?: string): () => void {\n    const normalizedIdentifier = this.normalizeInstanceIdentifier(identifier);\n    const existingCallbacks =\n      this.onInitCallbacks.get(normalizedIdentifier) ??\n      new Set<OnInitCallBack<T>>();\n    existingCallbacks.add(callback);\n    this.onInitCallbacks.set(normalizedIdentifier, existingCallbacks);\n\n    const existingInstance = this.instances.get(normalizedIdentifier);\n    if (existingInstance) {\n      callback(existingInstance, normalizedIdentifier);\n    }\n\n    return () => {\n      existingCallbacks.delete(callback);\n    };\n  }\n\n  /**\n   * Invoke onInit callbacks synchronously\n   * @param instance the service instance`\n   */\n  private invokeOnInitCallbacks(\n    instance: NameServiceMapping[T],\n    identifier: string\n  ): void {\n    const callbacks = this.onInitCallbacks.get(identifier);\n    if (!callbacks) {\n      return;\n    }\n    for (const callback of callbacks) {\n      try {\n        callback(instance, identifier);\n      } catch {\n        // ignore errors in the onInit callback\n      }\n    }\n  }\n\n  private getOrInitializeService({\n    instanceIdentifier,\n    options = {}\n  }: {\n    instanceIdentifier: string;\n    options?: Record<string, unknown>;\n  }): NameServiceMapping[T] | null {\n    let instance = this.instances.get(instanceIdentifier);\n    if (!instance && this.component) {\n      instance = this.component.instanceFactory(this.container, {\n        instanceIdentifier: normalizeIdentifierForFactory(instanceIdentifier),\n        options\n      });\n      this.instances.set(instanceIdentifier, instance);\n      this.instancesOptions.set(instanceIdentifier, options);\n\n      /**\n       * Invoke onInit listeners.\n       * Note this.component.onInstanceCreated is different, which is used by the component creator,\n       * while onInit listeners are registered by consumers of the provider.\n       */\n      this.invokeOnInitCallbacks(instance, instanceIdentifier);\n\n      /**\n       * Order is important\n       * onInstanceCreated() should be called after this.instances.set(instanceIdentifier, instance); which\n       * makes `isInitialized()` return true.\n       */\n      if (this.component.onInstanceCreated) {\n        try {\n          this.component.onInstanceCreated(\n            this.container,\n            instanceIdentifier,\n            instance\n          );\n        } catch {\n          // ignore errors in the onInstanceCreatedCallback\n        }\n      }\n    }\n\n    return instance || null;\n  }\n\n  private normalizeInstanceIdentifier(\n    identifier: string = DEFAULT_ENTRY_NAME\n  ): string {\n    if (this.component) {\n      return this.component.multipleInstances ? identifier : DEFAULT_ENTRY_NAME;\n    } else {\n      return identifier; // assume multiple instances are supported before the component is provided.\n    }\n  }\n\n  private shouldAutoInitialize(): boolean {\n    return (\n      !!this.component &&\n      this.component.instantiationMode !== InstantiationMode.EXPLICIT\n    );\n  }\n}\n\n// undefined should be passed to the service factory for the default instance\nfunction normalizeIdentifierForFactory(identifier: string): string | undefined {\n  return identifier === DEFAULT_ENTRY_NAME ? undefined : identifier;\n}\n\nfunction isComponentEager<T extends Name>(component: Component<T>): boolean {\n  return component.instantiationMode === InstantiationMode.EAGER;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Provider } from './provider';\nimport { Component } from './component';\nimport { Name } from './types';\n\n/**\n * ComponentContainer that provides Providers for service name T, e.g. `auth`, `auth-internal`\n */\nexport class ComponentContainer {\n  private readonly providers = new Map<string, Provider<Name>>();\n\n  constructor(private readonly name: string) {}\n\n  /**\n   *\n   * @param component Component being added\n   * @param overwrite When a component with the same name has already been registered,\n   * if overwrite is true: overwrite the existing component with the new component and create a new\n   * provider with the new component. It can be useful in tests where you want to use different mocks\n   * for different tests.\n   * if overwrite is false: throw an exception\n   */\n  addComponent<T extends Name>(component: Component<T>): void {\n    const provider = this.getProvider(component.name);\n    if (provider.isComponentSet()) {\n      throw new Error(\n        `Component ${component.name} has already been registered with ${this.name}`\n      );\n    }\n\n    provider.setComponent(component);\n  }\n\n  addOrOverwriteComponent<T extends Name>(component: Component<T>): void {\n    const provider = this.getProvider(component.name);\n    if (provider.isComponentSet()) {\n      // delete the existing provider from the container, so we can register the new component\n      this.providers.delete(component.name);\n    }\n\n    this.addComponent(component);\n  }\n\n  /**\n   * getProvider provides a type safe interface where it can only be called with a field name\n   * present in NameServiceMapping interface.\n   *\n   * Firebase SDKs providing services should extend NameServiceMapping interface to register\n   * themselves.\n   */\n  getProvider<T extends Name>(name: T): Provider<T> {\n    if (this.providers.has(name)) {\n      return this.providers.get(name) as unknown as Provider<T>;\n    }\n\n    // create a Provider for a service that hasn't registered with Firebase\n    const provider = new Provider<T>(name, this);\n    this.providers.set(name, provider as unknown as Provider<Name>);\n\n    return provider as Provider<T>;\n  }\n\n  getProviders(): Array<Provider<Name>> {\n    return Array.from(this.providers.values());\n  }\n}\n"]},"metadata":{},"sourceType":"module"}