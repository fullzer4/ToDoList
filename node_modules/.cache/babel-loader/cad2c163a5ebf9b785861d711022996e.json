{"ast":null,"code":"import _objectSpread from \"/home/fullzer4/Documents/GitHub/ToDoList/todolist/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _regeneratorRuntime from \"/home/fullzer4/Documents/GitHub/ToDoList/todolist/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/home/fullzer4/Documents/GitHub/ToDoList/todolist/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { w as wrap, r as replaceTraps } from './wrap-idb-value.js';\nexport { u as unwrap, w as wrap } from './wrap-idb-value.js';\n/**\n * Open a database.\n *\n * @param name Name of the database.\n * @param version Schema version.\n * @param callbacks Additional callbacks.\n */\n\nfunction openDB(name, version) {\n  var _ref = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},\n      blocked = _ref.blocked,\n      upgrade = _ref.upgrade,\n      blocking = _ref.blocking,\n      terminated = _ref.terminated;\n\n  var request = indexedDB.open(name, version);\n  var openPromise = wrap(request);\n\n  if (upgrade) {\n    request.addEventListener('upgradeneeded', function (event) {\n      upgrade(wrap(request.result), event.oldVersion, event.newVersion, wrap(request.transaction));\n    });\n  }\n\n  if (blocked) request.addEventListener('blocked', function () {\n    return blocked();\n  });\n  openPromise.then(function (db) {\n    if (terminated) db.addEventListener('close', function () {\n      return terminated();\n    });\n    if (blocking) db.addEventListener('versionchange', function () {\n      return blocking();\n    });\n  }).catch(function () {});\n  return openPromise;\n}\n/**\n * Delete a database.\n *\n * @param name Name of the database.\n */\n\n\nfunction deleteDB(name) {\n  var _ref2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n      blocked = _ref2.blocked;\n\n  var request = indexedDB.deleteDatabase(name);\n  if (blocked) request.addEventListener('blocked', function () {\n    return blocked();\n  });\n  return wrap(request).then(function () {\n    return undefined;\n  });\n}\n\nvar readMethods = ['get', 'getKey', 'getAll', 'getAllKeys', 'count'];\nvar writeMethods = ['put', 'add', 'delete', 'clear'];\nvar cachedMethods = new Map();\n\nfunction getMethod(target, prop) {\n  if (!(target instanceof IDBDatabase && !(prop in target) && typeof prop === 'string')) {\n    return;\n  }\n\n  if (cachedMethods.get(prop)) return cachedMethods.get(prop);\n  var targetFuncName = prop.replace(/FromIndex$/, '');\n  var useIndex = prop !== targetFuncName;\n  var isWrite = writeMethods.includes(targetFuncName);\n\n  if ( // Bail if the target doesn't exist on the target. Eg, getAll isn't in Edge.\n  !(targetFuncName in (useIndex ? IDBIndex : IDBObjectStore).prototype) || !(isWrite || readMethods.includes(targetFuncName))) {\n    return;\n  }\n\n  var method = /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(storeName) {\n      var _target;\n\n      var tx,\n          target,\n          _len,\n          args,\n          _key,\n          _args = arguments;\n\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              // isWrite ? 'readwrite' : undefined gzipps better, but fails in Edge :(\n              tx = this.transaction(storeName, isWrite ? 'readwrite' : 'readonly');\n              target = tx.store;\n\n              for (_len = _args.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n                args[_key - 1] = _args[_key];\n              }\n\n              if (useIndex) target = target.index(args.shift()); // Must reject if op rejects.\n              // If it's a write operation, must reject if tx.done rejects.\n              // Must reject with op rejection first.\n              // Must resolve with op value.\n              // Must handle both promises (no unhandled rejections)\n\n              _context.next = 6;\n              return Promise.all([(_target = target)[targetFuncName].apply(_target, args), isWrite && tx.done]);\n\n            case 6:\n              return _context.abrupt(\"return\", _context.sent[0]);\n\n            case 7:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, this);\n    }));\n\n    return function method(_x) {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n\n  cachedMethods.set(prop, method);\n  return method;\n}\n\nreplaceTraps(function (oldTraps) {\n  return _objectSpread(_objectSpread({}, oldTraps), {}, {\n    get: function get(target, prop, receiver) {\n      return getMethod(target, prop) || oldTraps.get(target, prop, receiver);\n    },\n    has: function has(target, prop) {\n      return !!getMethod(target, prop) || oldTraps.has(target, prop);\n    }\n  });\n});\nexport { deleteDB, openDB };","map":{"version":3,"names":["w","wrap","r","replaceTraps","u","unwrap","openDB","name","version","blocked","upgrade","blocking","terminated","request","indexedDB","open","openPromise","addEventListener","event","result","oldVersion","newVersion","transaction","then","db","catch","deleteDB","deleteDatabase","undefined","readMethods","writeMethods","cachedMethods","Map","getMethod","target","prop","IDBDatabase","get","targetFuncName","replace","useIndex","isWrite","includes","IDBIndex","IDBObjectStore","prototype","method","storeName","tx","store","args","index","shift","Promise","all","done","set","oldTraps","receiver","has"],"sources":["/home/fullzer4/Documents/GitHub/ToDoList/todolist/node_modules/@firebase/app/node_modules/idb/build/index.js"],"sourcesContent":["import { w as wrap, r as replaceTraps } from './wrap-idb-value.js';\nexport { u as unwrap, w as wrap } from './wrap-idb-value.js';\n\n/**\n * Open a database.\n *\n * @param name Name of the database.\n * @param version Schema version.\n * @param callbacks Additional callbacks.\n */\nfunction openDB(name, version, { blocked, upgrade, blocking, terminated } = {}) {\n    const request = indexedDB.open(name, version);\n    const openPromise = wrap(request);\n    if (upgrade) {\n        request.addEventListener('upgradeneeded', (event) => {\n            upgrade(wrap(request.result), event.oldVersion, event.newVersion, wrap(request.transaction));\n        });\n    }\n    if (blocked)\n        request.addEventListener('blocked', () => blocked());\n    openPromise\n        .then((db) => {\n        if (terminated)\n            db.addEventListener('close', () => terminated());\n        if (blocking)\n            db.addEventListener('versionchange', () => blocking());\n    })\n        .catch(() => { });\n    return openPromise;\n}\n/**\n * Delete a database.\n *\n * @param name Name of the database.\n */\nfunction deleteDB(name, { blocked } = {}) {\n    const request = indexedDB.deleteDatabase(name);\n    if (blocked)\n        request.addEventListener('blocked', () => blocked());\n    return wrap(request).then(() => undefined);\n}\n\nconst readMethods = ['get', 'getKey', 'getAll', 'getAllKeys', 'count'];\nconst writeMethods = ['put', 'add', 'delete', 'clear'];\nconst cachedMethods = new Map();\nfunction getMethod(target, prop) {\n    if (!(target instanceof IDBDatabase &&\n        !(prop in target) &&\n        typeof prop === 'string')) {\n        return;\n    }\n    if (cachedMethods.get(prop))\n        return cachedMethods.get(prop);\n    const targetFuncName = prop.replace(/FromIndex$/, '');\n    const useIndex = prop !== targetFuncName;\n    const isWrite = writeMethods.includes(targetFuncName);\n    if (\n    // Bail if the target doesn't exist on the target. Eg, getAll isn't in Edge.\n    !(targetFuncName in (useIndex ? IDBIndex : IDBObjectStore).prototype) ||\n        !(isWrite || readMethods.includes(targetFuncName))) {\n        return;\n    }\n    const method = async function (storeName, ...args) {\n        // isWrite ? 'readwrite' : undefined gzipps better, but fails in Edge :(\n        const tx = this.transaction(storeName, isWrite ? 'readwrite' : 'readonly');\n        let target = tx.store;\n        if (useIndex)\n            target = target.index(args.shift());\n        // Must reject if op rejects.\n        // If it's a write operation, must reject if tx.done rejects.\n        // Must reject with op rejection first.\n        // Must resolve with op value.\n        // Must handle both promises (no unhandled rejections)\n        return (await Promise.all([\n            target[targetFuncName](...args),\n            isWrite && tx.done,\n        ]))[0];\n    };\n    cachedMethods.set(prop, method);\n    return method;\n}\nreplaceTraps((oldTraps) => ({\n    ...oldTraps,\n    get: (target, prop, receiver) => getMethod(target, prop) || oldTraps.get(target, prop, receiver),\n    has: (target, prop) => !!getMethod(target, prop) || oldTraps.has(target, prop),\n}));\n\nexport { deleteDB, openDB };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}